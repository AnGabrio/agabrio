[{"authors":["agabrio"],"categories":null,"content":"I am a Research Fellow in Statistics and Health Economics in the Department of Statistical Science \u0026amp; in the Department of Primary Care and Population Health at University College London (UK). I graduated in Applied Economics from the University of Pavia (Italy) and in Statistics and Econometrics from the University of Essex (UK). I then completed a PhD programme in Statistics at University College London, after a short visiting period in the Department of Statistics at University of Florida (USA).\nMy main interests are in Bayesian statistical modelling for cost-effectiveness analysis and decision-making problems in the health systems. During my PhD I have specifically focused on the study and adoption of Bayesian methods to handle missing data in health economic evaluations and to assess the impact of their uncertainty on the output of the decision-making process. My research area involves different topics: from systematic literature reviews, case study applications, survival analysis, meta-analytic methods, multilevel models and trial-based clinical and economic analyses. I am very interested in the analysis of longitudinal data, with a focus on different types of statistical methods to deal with missingness.\nI am a member of the Statistics for Health Economic Evaluation research group in the Department of Statistical Science at UCL, which is mainly focused on the development and application of Bayesian methods for health economic evaluations. The group works in collaboration with academics from different institutions and its activities are aimed at providing advice to statisticians, health economists and clinicians working in economic evaluations.\nI am also a member of the Health Economics Analysis and Research methodology Team in the Institute for Clinical Trials and Methodology at UCL, working primarily with the members of the Priment Clinical Trials Unit. The group focuses on the development of methodological tools for the analysis of the economic components in randomised control trials across a wide range of clinical areas and is formed by a group of interdisciplinary and varied experience.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"a4a58741d21f71aab0e211bcb1160621","permalink":"/authors/agabrio/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/agabrio/","section":"authors","summary":"I am a Research Fellow in Statistics and Health Economics in the Department of Statistical Science \u0026amp; in the Department of Primary Care and Population Health at University College London (UK). I graduated in Applied Economics from the University of Pavia (Italy) and in Statistics and Econometrics from the University of Essex (UK). I then completed a PhD programme in Statistics at University College London, after a short visiting period in the Department of Statistics at University of Florida (USA).","tags":null,"title":"Andrea Gabrio","type":"authors"},{"authors":[],"categories":null,"content":"","date":1581411600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581411600,"objectID":"653a898aad846976703184dfd5ad1869","permalink":"/talk/heartcourse2020/","publishdate":"2020-02-01T00:00:00Z","relpermalink":"/talk/heartcourse2020/","section":"talk","summary":"One day short course","tags":["Economic Evaluations","Clinical Trials","HEART"],"title":"Understanding Health Economics in Clinical Trials","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["R","anova","JAGS","mixed effects model"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rWhen single sampling units are selected amongst highly heterogeneous conditions, it is unlikely that these single units will adequately represent the populations and repeated sampling is likely to yield very different outcomes. For example, if we were investigating the impacts of fuel reduction burning across a highly heterogeneous landscape, our ability to replicate adequately might be limited by the number of burn sites available.\nAlternatively, sub-replicates within each of the sampling units (e.g. sites) can be collected (and averaged) so as to provided better representatives for each of the units and ultimately reduce the unexplained variability of the test of treatments. In essence, the sub-replicates are the replicates of an additional nested factor whose levels are nested within the main treatment factor. A nested factor refers to a factor whose levels are unique within each level of the factor it is nested within and each level is only represented once. For example, the fuel reduction burn study design could consist of three burnt sites and three un-burnt (control) sites each containing four quadrats (replicates of site and sub-replicates of the burn treatment). Each site represents a unique level of a random factor (any given site cannot be both burnt and un-burnt) that is nested within the fire treatment (burned or not).\nA nested design can be thought of as a hierarchical arrangement of factors (hence the alternative name hierarchical designs) whereby a treatment is progressively sub-replicated. As an additional example, imagine an experiment designed to comparing the leaf toughness of a number of tree species. Working down the hierarchy, five individual trees were randomly selected within (nested within) each species, three branches were randomly selected within each tree, two leaves were randomly selected within each branch and the force required to shear the leaf material in half (transversely) was measured in four random locations along the leaf. Clearly any given leaf can only be from a single branch, tree and species. Each level of sub-replication is introduced to further reduce the amount of unexplained variation and thereby increasing the power of the test for the main treatment effect. Additionally, it is possible to investigate which scale has the greatest (or least, etc) degree of variability - the level of the species, individual tree, branch, leaf, leaf region etc.\n\rNested factors are typically random factors, of which the levels are randomly selected to represent all possible levels (e.g. sites). When the main treatment effect (often referred to as Factor A) is a fixed factor, such designs are referred to as a mixed model nested ANOVA, whereas when Factor A is random, the design is referred to as a Model II nested ANOVA.\n\rFixed nested factors are also possible. For example, specific dates (corresponding to particular times during a season) could be nested within season. When all factors are fixed, the design is referred to as a Model I mixed model.\n\rFully nested designs (the topic of this chapter) differ from other multi-factor designs in that all factors within (below) the main treatment factor are nested and thus interactions are un-replicated and cannot be tested. Indeed, interaction effects (interaction between Factor A and site) are assumed to be zero.\n\r\r\rLinear models (frequentist)\rThe linear models for two and three factor nested design are:\n\\[ y_{ijk} = \\mu + \\alpha_i + \\beta_{j(i)} + \\epsilon_{ijk},\\]\n\\[ y_{ijkl} = \\mu + \\alpha_i + \\beta_{j(i)} + gamma_{k(j(i))} + \\epsilon_{ijkl},\\]\nwhere \\(\\mu\\) is the overall mean, \\(\\alpha\\) is the effect of Factor A, \\(\\beta\\) is the effect of Factor B, \\(\\gamma\\) is the effect of Factor C and \\(\\epsilon\\) is the random unexplained or residual component.\n\rLinear models (Bayesian)\rSo called “random effects” are modelled differently from “fixed effects” in that rather than estimate their individual effects, we instead estimate the variability due to these “random effects”. Since technically all variables in a Bayesian framework are random, some prefer to use the terms ‘fixed effects’ and ‘varying effects’. As random factors typically represent “random” selections of levels (such as a set of randomly selected sites), incorporated in order to account for the dependency structure (observations within sites are more likely to be correlated to one another - not strickly independent) to the data, we are not overly interested in the individual differences between levels of the ‘varying’ (random) factor. Instead (in addition to imposing a separate correlation structure within each nest), we want to know how much variability is attributed to this level of the design. The linear models for two and three factor nested design are:\n\\[ y_{ijk} = \\mu + \\alpha_i + \\beta_{j(i)} + \\epsilon_{ijk}, \\;\\;\\; \\epsilon_{ijk} \\sim N(0, \\sigma^2), \\;\\;\\; \\beta_{j(i)} \\sim N(0, \\sigma^2_{B}) \\]\n\\[ y_{ijkl} = \\mu + \\alpha_i + \\beta_{j(i)} + \\gamma_{k(j(i))} + \\epsilon_{ijkl}, \\;\\;\\; \\epsilon_{ijkl} \\sim N(0, \\sigma^2), \\;\\;\\; \\beta_{j(i)} \\sim N(0, \\sigma^2_{B}) \\;\\;\\; \\gamma_{k(j(i))} \\sim N(0, \\sigma^2_C) \\]\nwhere \\(\\mu\\) is the overall mean, \\(\\alpha\\) is the effect of Factor A, \\(\\beta\\) is the variability of Factor B (nested within Factor A), \\(\\gamma\\) is the variability of Factor C (nested within Factor B) and \\(\\epsilon\\) is the random unexplained or residual component that is assumed to be normally distributed with a mean of zero and a constant amount of standard deviation (\\(\\sigma^2\\)). The subscripts are iterators. For example, the \\(i\\) represents the number of effects to be estimated for Factor A. Thus the first formula can be read as the \\(k\\)-th observation of \\(y\\) is drawn from a normal distribution (with a specific level of variability) and mean proposed to be determined by a base mean (\\(\\mu\\) - mean of the first treatment across all nests) plus the effect of the \\(i\\)-th treatment effect plus the variabilitythe model proposes that, given a base mean (\\(\\mu\\)) and knowing the effect of the \\(i\\)-th treatment (factor A) and which of the \\(j\\)-th nests within the treatment the \\(k\\)-th observation from Block \\(j\\) (factor B) within treatment effect.\n\rNull hypotheses\rSeparate null hypotheses are associated with each of the factors, however, nested factors are typically only added to absorb some of the unexplained variability and thus, specific hypotheses tests associated with nested factors are of lesser biological importance. Hence, rather than estimate the effects of random effects, we instead estimate how much variability they contribute.\nFactor A: the main treatment effect (fixed)\n\r\\(H_0(A): \\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\) (the population group means are all equal). That is, that the mean of population \\(1\\) is equal to that of population \\(2\\) and so on, and thus all population means are equal to one another - no effect of the factor on the response. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the mean of the first group (\\(\\alpha_i=\\mu_i-\\mu_1\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A) : \\alpha_1=\\alpha_2=\\ldots=\\alpha_i=0\\) (the effect of each group equals zero). If one or more of the \\(\\alpha_i\\) are different from zero (the response mean for this treatment differs from the overall response mean), there is evidence that the null hypothesis is not true indicating that the factor does affect the response variable.\n\r\rFactor A: the main treatment effect (random)\n\r\\(H_0(A) : \\sigma^2_{\\alpha}=0\\) (population variance equals zero). There is no added variance due to all possible levels of A.\r\rFactor B: the nested effect (random)\n\r\\(H_0(B) : \\sigma^2_{\\beta}=0\\) (population variance equals zero). There is no added variance due to all possible levels of B within the (set or all possible) levels of A.\r\rFactor B: the nested effect (fixed)\n\r\\(H_0(B): \\mu_{1(1)}=\\mu_{2(1)}=\\ldots=\\mu_{j(i)}=\\mu\\) (the population group means of B (within A) are all equal).\n\r\\(H_0(B): \\beta_{1(1)}=\\beta_{2(1)}=\\ldots=\\beta_{j(i)}=0\\) (the effect of each chosen B group equals zero).\n\r\r\rAnalysis of variance\rAnalysis of variance sequentially partitions the total variability in the response variable into components explained by each of the factors (starting with the factors lowest down in the hierarchy - the most deeply nested) and the components unexplained by each factor. Explained variability is calculated by subtracting the amount unexplained by the factor from the amount unexplained by a reduced model that does not contain the factor. When the null hypothesis for a factor is true (no effect or added variability), the ratio of explained and unexplained components for that factor (F-ratio) should follow a theoretical F-distribution with an expected value less than 1. The appropriate unexplained residuals and therefore the appropriate F-ratios for each factor differ according to the different null hypotheses associated with different combinations of fixed and random factors in a nested linear model (see Table below).\n\u0026gt; fact_anova_table\rdf MS F-ratio (B random) Var comp (B random) A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS B\u0026#39;(A))\u0026quot; \u0026quot;((MS A) - (MS B\u0026#39;(A)))/nb\u0026quot; B\u0026#39;(A) \u0026quot;(b-1)a\u0026quot; \u0026quot;MS B\u0026#39;(A)\u0026quot; \u0026quot;(MS B\u0026#39;(A))/(MS res)\u0026quot; \u0026quot;((MS B\u0026#39;(A)) - (MS res))/n\u0026quot;\rRes \u0026quot;(n-1)ba\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; F-ratio (B fixed) Var comp (B fixed) A \u0026quot;(MS A)/(MS res)\u0026quot; \u0026quot;((MS A) - (MS res))/nb\u0026quot; B\u0026#39;(A) \u0026quot;(MS B\u0026#39;(A))/(MS res)\u0026quot; \u0026quot;((MS B\u0026#39;(A)) - (MS res))/n\u0026quot;\rRes \u0026quot;\u0026quot; \u0026quot;\u0026quot; \rThe corresponding R syntax is given below.\n\u0026gt; #A fixed/random, B random (balanced)\r\u0026gt; summary(aov(y~A+Error(B), data))\r\u0026gt; VarCorr(lme(y~A,random=1|B, data))\r\u0026gt; \u0026gt; #A fixed/random, B random (unbalanced)\r\u0026gt; anova(lme(y~A,random=1|B, data), type=\u0026#39;marginal\u0026#39;)\r\u0026gt; \u0026gt; #A fixed/random, B fixed(balanced)\r\u0026gt; summary(aov(y~A+B, data))\r\u0026gt; \u0026gt; #A fixed/random, B fixed (unbalanced)\r\u0026gt; contrasts(data$B) \u0026lt;- contr.sum\r\u0026gt; Anova(aov(y~A/B, data), type=\u0026#39;III\u0026#39;)\r\rVariance components\rAs previously alluded to, it can often be useful to determine the relative contribution (to explaining the unexplained variability) of each of the factors as this provides insights into the variability at each different scales. These contributions are known as Variance components and are estimates of the added variances due to each of the factors. For consistency with leading texts on this topic, I have included estimated variance components for various balanced nested ANOVA designs in the above table. However, variance components based on a modified version of the maximum likelihood iterative model fitting procedure (REML) is generally recommended as this accommodates both balanced and unbalanced designs. While there are no numerical differences in the calculations of variance components for fixed and random factors, fixed factors are interpreted very differently and arguably have little clinical meaning (other to infer relative contribution). For fixed factors, variance components estimate the variance between the means of the specific populations that are represented by the selected levels of the factor and therefore represent somewhat arbitrary and artificial populations. For random factors, variance components estimate the variance between means of all possible populations that could have been selected and thus represents the true population variance.\n\rAssumptions\rAn F-distribution represents the relative frequencies of all the possible F-ratio’s when a given null hypothesis is true and certain assumptions about the residuals (denominator in the F-ratio calculation) hold. Consequently, it is also important that diagnostics associated with a particular hypothesis test reflect the denominator for the appropriate F-ratio. For example, when testing the null hypothesis that there is no effect of Factor A (\\(H_0(A):\\alpha_i=0\\)) in a mixed nested ANOVA, the means of each level of Factor B are used as the replicates of Factor A. As with single factor anova, hypothesis testing for nested ANOVA assumes the residuals are:\n\rnormally distributed. Factors higher up in the hierarchy of a nested model are based on means (or means of means) of lower factors and thus the Central Limit Theory would predict that normality will usually be satisfied for the higher level factors. Nevertheless, boxplots using the appropriate scale of replication should be used to explore normality. Scale transformations are often useful.\n\requally varied. Boxplots and plots of means against variance (using the appropriate scale of replication) should be used to explore the spread of values. Residual plots should reveal no patterns. Scale transformations are often useful.\n\rindependent of one another - this requires special consideration so as to ensure that the scale at which sub-replicates are measured is still great enough to enable observations to be independent.\n\r\r\rUnbalanced nested designs\rDesigns that incorporate fixed and random factors (either nested or factorial), involve F-ratio calculations in which the denominators are themselves random factors other than the overall residuals. Many statisticians argue that when such denominators are themselves not statistically significant (at the \\(0.25\\) level), there are substantial power benefits from pooling together successive non-significant denominator terms. Thus an F-ratio for a particular factor might be recalculated after pooling together its original denominator with its denominators denominator and so on. The conservative \\(0.25\\) is used instead of the usual 0.05 to reduce further the likelihood of Type II errors (falsely concluding an effect is non-significant - that might result from insufficient power).\nFor a simple completely balanced nested ANOVA, it is possible to pool together (calculate their mean) each of the sub-replicates within each nest (site) and then perform single factor ANOVA on those aggregates. Indeed, for a balanced design, the estimates and hypothesis for Factor A will be identical to that produced via nested ANOVA. However, if there are an unequal number of sub-replicates within each nest, then the single factor ANOVA will be less powerful that a proper nested ANOVA. Unbalanced designs are those designs in which sample (subsample) sizes for each level of one or more factors differ. These situations are relatively common in biological research, however such imbalance has some important implications for nested designs.\nFirstly, hypothesis tests are more robust to the assumptions of normality and equal variance when the design is balanced. Secondly (and arguably, more importantly), the model contrasts are not orthogonal (independent) and the sums of squares component attributed to each of the model terms cannot be calculated by simple additive partitioning of the total sums of squares. In such situations, exact F-ratios cannot be constructed (at least in theory), variance components calculations are more complicated and significance tests cannot be computed. The denominator MS in an F-ratio is determined by examining the expected value of the mean squares of each term in a model. Unequal sample sizes result in expected means squares for which there are no obvious logical comparators that enable the impact of an individual model term to be isolated. The severity of this issue depends on which scale of the sub-sampling hierarchy the unbalance(s) occurs as well whether the unbalance occurs in the replication of a fixed or random factor. For example, whilst unequal levels of the first nesting factor (e.g. unequal number of burn vs un-burnt sites) has no effect on F-ratio construction or hypothesis testing for the top level factor (irrespective of whether either of the factors are fixed or random), unequal sub-sampling (replication) at the level of a random (but not fixed) nesting factor will impact on the ability to construct F-ratios and variance components of all terms above it in the hierarchy. There are a number of alternative ways of dealing with unbalanced nested designs. All alternatives assume that the imbalance is not a direct result of the treatments themselves. Such outcomes are more appropriately analysed by modelling the counts of surviving observations via frequency analysis.\n\rSplit the analysis up into separate smaller simple ANOVA’s each using the means of the nesting factor to reflect the appropriate scale of replication. As the resulting sums of squares components are thereby based on an aggregated dataset the analyses then inherit the procedures and requirements of single ANOVA.\rAdopt mixed-modelling techniques.\r\rWe note that, in a Bayesian framework, issues of design balance essentially evaporate.\n\rLinear mixed effects models\rAlthough the term “mixed-effects” can be used to refer to any design that incorporates both fixed and random predictors, its use is more commonly restricted to designs in which factors are nested or grouped within other factors. Typical examples include nested, longitudinal (measurements repeated over time) data, repeated measures and blocking designs. Furthermore, rather than basing parameter estimations on observed and expected mean squares or error strata (as outline above), mixed-effects models estimate parameters via maximum likelihood (ML) or residual maximum likelihood (REML). In so doing, mixed-effects models more appropriately handle estimation of parameters, effects and variance components of unbalanced designs (particularly for random effects). Resulting fitted (or expected) values of each level of a factor (for example, the expected population site means) are referred to as Best Linear Unbiased Predictors (BLUP’s). As an acknowledgement that most estimated site means will be more extreme than the underlying true population means they estimate (based on the principle that smaller sample sizes result in greater chances of more extreme observations and that nested sub-replicates are also likely to be highly intercorrelated), BLUP’s are less spread from the overall mean than are simple site means. In addition, mixed-effects models naturally model the “within-block” correlation structure that complicates many longitudinal designs.\nWhilst the basic concepts of mixed-effects models have been around for a long time, recent computing advances and adoptions have greatly boosted the popularity of these procedures. Linear mixed effects models are currently at the forefront of statistical development, and as such, are very much a work in progress - both in theory and in practice. Recent developments have seen a further shift away from the traditional practices associated with degrees of freedom, probability distribution and p-value calculations. The traditional approach to inference testing is to compare the fit of an alternative (full) model to a null (reduced) model (via an F-ratio). When assumptions of normality and homogeneity of variance apply, the degrees of freedom are easily computed and the F-ratio has an exact F-distribution to which it can be compared. However, this approach introduces two additional problematic assumptions when estimating fixed effects in a mixed effects model. Firstly, when estimating the effects of one factor, the parameter estimates associated with other factor(s) are assumed to be the true values of those parameters (not estimates). Whilst this assumption is reasonable when all factors are fixed, as random factors are selected such that they represent one possible set of levels drawn from an entire population of possible levels for the random factor, it is unlikely that the associated parameter estimates accurately reflect the true values. Consequently, there is not necessarily an appropriate F-distribution. Furthermore, determining the appropriate degrees of freedom (nominally, the number of independent observations on which estimates are based) for models that incorporate a hierarchical structure is only possible under very specific circumstances (such as completely balanced designs). Degrees of freedom is a somewhat arbitrary defined concept used primarily to select a theoretical probability distribution on which a statistic can be compared. Arguably, however, it is a concept that is overly simplistic for complex hierarchical designs. Most statistical applications continue to provide the “approximate” solutions (as did earlier versions within R). However, R linear mixed effects development leaders argue strenuously that given the above shortcomings, such approximations are variably inappropriate and are thus omitted.\nMarkov chain Monte Carlo (MCMC) sampling methods provide a Bayesian-like alternative for inference testing. Markov chains use the mixed model parameter estimates to generate posterior probability distributions of each parameter from which Monte Carlo sampling methods draw a large set of parameter samples. These parameter samples can then be used to calculate highest posterior density (HPD) intervals (also known as Bayesian credible intervals). Such intervals indicate the interval in which there is a specified probability (typically \\(95\\)%) that the true population parameter lies. Furthermore, whilst technically against the spirit of the Bayesian philosophy, it is also possible to generate P values on which to base inferences.\n\r\rData generation\rImagine we has designed an experiment in which we intend to measure a response (\\(y\\)) to one of treatments (three levels; “a1”, “a2” and “a3”). The treatments occur at a spatial scale (over an area) that far exceeds the logistical scale of sampling units (it would take too long to sample at the scale at which the treatments were applied). The treatments occurred at the scale of hectares whereas it was only feasible to sample y using 1m quadrats. Given that the treatments were naturally occurring (such as soil type), it was not possible to have more than five sites of each treatment type, yet prior experience suggested that the sites in which you intended to sample were very uneven and patchy with respect to \\(y\\). In an attempt to account for this inter-site variability (and thus maximize the power of the test for the effect of treatment, you decided to employ a nested design in which 10 quadrats were randomly located within each of the five replicate sites per three treatments. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; library(plyr)\r\u0026gt; set.seed(123)\r\u0026gt; nTreat \u0026lt;- 3\r\u0026gt; nSites \u0026lt;- 15\r\u0026gt; nSitesPerTreat \u0026lt;- nSites/nTreat\r\u0026gt; nQuads \u0026lt;- 10\r\u0026gt; site.sigma \u0026lt;- 12\r\u0026gt; sigma \u0026lt;- 5\r\u0026gt; n \u0026lt;- nSites * nQuads\r\u0026gt; sites \u0026lt;- gl(n=nSites,k=nQuads, lab=paste0(\u0026#39;S\u0026#39;,1:nSites))\r\u0026gt; A \u0026lt;- gl(nTreat, nSitesPerTreat*nQuads, n, labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))\r\u0026gt; a.means \u0026lt;- c(40,70,80)\r\u0026gt; ## the site means (treatment effects) are drawn from normal distributions\r\u0026gt; ## with means of 40, 70 and 80 and standard deviations of 12\r\u0026gt; A.effects \u0026lt;- rnorm(nSites, rep(a.means,each=nSitesPerTreat),site.sigma)\r\u0026gt; #A.effects \u0026lt;- a.means %*% t(model.matrix(~A, data.frame(A=gl(nTreat,nSitesPerTreat,nSites))))+rnorm(nSites,0,site.sigma)\r\u0026gt; Xmat \u0026lt;- model.matrix(~sites -1)\r\u0026gt; lin.pred \u0026lt;- Xmat %*% c(A.effects)\r\u0026gt; ## the quadrat observations (within sites) are drawn from\r\u0026gt; ## normal distributions with means according to the site means\r\u0026gt; ## and standard deviations of 5\r\u0026gt; y \u0026lt;- rnorm(n,lin.pred,sigma)\r\u0026gt; data.nest \u0026lt;- data.frame(y=y, A=A, Sites=sites,Quads=1:length(y))\r\u0026gt; head(data.nest) #print out the first six rows of the data set\ry A Sites Quads\r1 42.20886 a1 S1 1\r2 35.76354 a1 S1 2\r3 23.44121 a1 S1 3\r4 36.78107 a1 S1 4\r5 30.91034 a1 S1 5\r6 27.93517 a1 S1 6\r\u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; ggplot(data.nest, aes(y=y, x=1)) + geom_boxplot() + facet_grid(.~Sites)\rExploratory data analysis\rNormality and Homogeneity of variance\n\u0026gt; #Effects of treatment\r\u0026gt; boxplot(y~A, ddply(data.nest, ~A+Sites,numcolwise(mean, na.rm=T)))\r\u0026gt; \u0026gt; #Site effects\r\u0026gt; boxplot(y~Sites, ddply(data.nest, ~A+Sites+Quads,numcolwise(mean, na.rm=T)))\r\u0026gt; \u0026gt; ## with ggplot2\r\u0026gt; ggplot(ddply(data.nest, ~A+Sites,numcolwise(mean, na.rm=T)), aes(y=y, x=A)) +\r+ geom_boxplot()\rConclusions:\n\rthere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical.\n\rthere is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the y-axis. Hence it there is no evidence of non-homogeneity.\n\r\rObvious violations could be addressed either by:\n\rtransform the scale of the response variables (to address normality, etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\r\r\r\rModel fitting\rFor non-hierarchical linear models, uniform priors on variance (standard deviation) parameters seem to work reasonably well. Gelman and others (2006) warns that the use of the inverse-gamma family of non-informative priors are very sensitive to ϵ particularly when variance is close to zero and this may lead to unintentionally informative priors. When the number of groups (treatments or varying/random effects) is large (more than \\(5\\)), Gelman and others (2006) advocated the use of either uniform or half-cauchy priors. Yet when the number of groups is low, Gelman and others (2006) indicates that uniform priors have a tendency to result in inflated variance estimates. Consequently, half-cauchy priors are generally recommended for variances.\nFull parameterisation\n\\[ y_{ijk} \\sim N(\\mu_{ij}, \\sigma^2), \\;\\;\\; \\mu_{ij}=\\alpha_0 + \\alpha_i + \\beta_{j(i)}, \\]\nwhere \\(\\beta_{ij)} \\sim N(0, \\sigma^2_B)\\), \\(\\alpha_0, \\alpha_i \\sim N(0, 1000000)\\), and \\(\\sigma^2, \\sigma^2_B \\sim \\text{Cauchy(0, 25)}\\). The full parameterisation, shows the effects parameterisation in which there is an intercept (\\(\\alpha_0\\)) and two treatment effects (\\(\\alpha_i\\), where \\(i\\) is \\(1,2\\)).\nMatrix parameterisation\n\\[ y_{ijk} \\sim N(\\mu_{ij}, \\sigma^2), \\;\\;\\; \\mu_{ij}=\\boldsymbol \\alpha \\boldsymbol X + \\beta_{j(i)}, \\]\nwhere \\(\\beta_{ij} \\sim N(0, \\sigma^2_B)\\), \\(\\boldsymbol \\alpha \\sim MVN(0, 1000000)\\), and \\(\\sigma^2, \\sigma^2_B \\sim \\text{Cauchy(0, 25)}\\). The full parameterisation, shows the effects parameterisation in which there is an intercept (\\(\\alpha_0\\)) and two treatment effects (\\(\\alpha_i\\), where \\(i\\) is \\(1,2\\)). The matrix parameterisation is a compressed notation, In this parameterisation, there are three alpha parameters (one representing the mean of treatment a1, and the other two representing the treatment effects (differences between a2 and a1 and a3 and a1). In generating priors for each of these three alpha parameters, we could loop through each and define a non-informative normal prior to each (as in the Full parameterisation version). However, it turns out that it is more efficient (in terms of mixing and thus the number of necessary iterations) to define the priors from a multivariate normal distribution. This has as many means as there are parameters to estimate (\\(3\\)) and a \\(3\\times3\\) matrix of zeros and \\(100\\) in the diagonals.\n\\[ \\boldsymbol \\mu =\r\\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\;\\;\\; \\sigma^2 \\sim \\begin{bmatrix}\r1000000 \u0026amp; 0 \u0026amp; 0 \\\\\r0 \u0026amp; 1000000 \u0026amp; 0 \\\\\r0 \u0026amp; 0 \u0026amp; 1000000\r\\end{bmatrix}. \\]\nHierarchical parameterisation\n\\[ y_{ijk} \\sim N(\\beta_{i(j)}, \\sigma^2), \\;\\;\\; \\beta_{i(j)}\\sim N(\\mu_i, \\sigma^2_B), \\]\nwhere \\(\\mu_i = \\boldsymbol \\alpha \\boldsymbol X\\), \\(\\alpha_i \\sim N(0, 1000000)\\), and \\(\\sigma^2, \\sigma^2_B \\sim \\text{Cauchy(0, 25)}\\). In the heirarchical parameterisation, we are indicating two residual layers - one representing the variability in the observed data between individual observations (within sites) and the second representing the variability between site means (within the three treatments).\nFull effect parameterisation\r\u0026gt; modelString=\u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- alpha0 + alpha[A[i]] + beta[site[i]]\r+ }\r+ + #Priors\r+ alpha0 ~ dnorm(0, 1.0E-6)\r+ alpha[1] \u0026lt;- 0\r+ for (i in 2:nA) {\r+ alpha[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ for (i in 1:nSite) {\r+ beta[i] ~ dnorm(0, tau.B) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.B \u0026lt;- pow(sigma.B,-2)\r+ sigma.B \u0026lt;-z/sqrt(chSq.B)\r+ z.B ~ dnorm(0, .0016)I(0,)\r+ chSq.B ~ dgamma(0.5, 0.5)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;fullModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; data.nest.list \u0026lt;- with(data.nest,\r+ list(y=y,\r+ site=as.numeric(Sites),\r+ A=as.numeric(A),\r+ n=nrow(data.nest),\r+ nSite=length(levels(Sites)),\r+ nA = length(levels(A))\r+ )\r+ )\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;alpha0\u0026quot;,\u0026quot;alpha\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sigma.B\u0026quot;)\r\u0026gt; adaptSteps = 1000\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface.\n\u0026gt; data.nest.r2jags.f \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;fullModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 22\rTotal graph size: 502\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.f)\rInference for Bugs model at \u0026quot;fullModel.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\ralpha[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000 1\ralpha[2] 27.388 7.149 13.085 22.881 27.312 31.980 41.230 1.001 3000\ralpha[3] 40.839 7.083 26.936 36.251 40.800 45.412 55.107 1.002 3000\ralpha0 42.325 4.978 32.452 39.136 42.215 45.422 52.310 1.002 3000\rsigma 5.069 0.307 4.530 4.851 5.051 5.265 5.722 1.002 3000\rsigma.B 10.990 2.527 7.168 9.260 10.656 12.306 17.136 1.009 190\rdeviance 909.635 5.937 899.898 905.400 908.952 913.145 923.175 1.001 3000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 17.6 and DIC = 927.3\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMatrix parameterisation\r\u0026gt; modelString2=\u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- inprod(alpha[],X[i,]) + inprod(beta[], Z[i,])\r+ } + + #Priors\r+ alpha ~ dmnorm(a0,A0)\r+ for (i in 1:nZ) {\r+ beta[i] ~ dnorm(0, tau.B) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.B \u0026lt;- pow(sigma.B,-2)\r+ sigma.B \u0026lt;-z/sqrt(chSq.B)\r+ z.B ~ dnorm(0, .0016)I(0,)\r+ chSq.B ~ dgamma(0.5, 0.5)\r+ + }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;matrixModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; A.Xmat \u0026lt;- model.matrix(~A,data.nest)\r\u0026gt; Zmat \u0026lt;- model.matrix(~-1+Sites, data.nest)\r\u0026gt; data.nest.list \u0026lt;- with(data.nest,\r+ list(y=y,\r+ X=A.Xmat,\r+ n=nrow(data.nest),\r+ Z=Zmat, nZ=ncol(Zmat),\r+ a0=rep(0,3), A0=diag(3)\r+ )\r+ )\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;alpha\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sigma.B\u0026quot;,\u0026#39;beta\u0026#39;)\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\rNow run the JAGS code via the R2jags interface.\n\u0026gt; data.nest.r2jags.m \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;matrixModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 20\rTotal graph size: 3231\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.m)\rInference for Bugs model at \u0026quot;matrixModel.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\ralpha[1] 0.201 1.016 -1.750 -0.474 0.215 0.872 2.161 1.001 3000\ralpha[2] 0.082 0.972 -1.835 -0.585 0.092 0.730 1.954 1.003 2000\ralpha[3] 0.077 1.005 -1.867 -0.608 0.075 0.771 2.055 1.001 3000\rbeta[1] 31.532 1.871 27.942 30.237 31.536 32.794 35.248 1.001 3000\rbeta[2] 38.069 1.911 34.289 36.788 38.125 39.343 41.817 1.001 3000\rbeta[3] 59.346 1.872 55.692 58.089 59.346 60.579 63.088 1.001 3000\rbeta[4] 40.644 1.936 36.885 39.378 40.659 41.960 44.321 1.002 1400\rbeta[5] 40.506 1.855 36.802 39.248 40.492 41.750 44.199 1.001 3000\rbeta[6] 90.495 2.131 86.451 89.013 90.489 91.970 94.602 1.001 3000\rbeta[7] 75.252 2.114 71.007 73.850 75.238 76.681 79.322 1.002 1200\rbeta[8] 57.061 2.180 52.888 55.574 57.032 58.568 61.289 1.001 2400\rbeta[9] 61.336 2.171 57.214 59.855 61.372 62.822 65.415 1.001 3000\rbeta[10] 62.816 2.159 58.580 61.353 62.774 64.268 67.144 1.001 3000\rbeta[11] 93.379 2.134 89.192 91.945 93.374 94.750 97.533 1.001 3000\rbeta[12] 83.011 2.161 78.822 81.508 83.024 84.486 87.245 1.001 3000\rbeta[13] 82.765 2.202 78.398 81.292 82.774 84.252 87.054 1.001 3000\rbeta[14] 81.140 2.165 76.775 79.675 81.185 82.598 85.236 1.001 3000\rbeta[15] 74.041 2.119 70.008 72.616 74.027 75.493 78.245 1.001 3000\rsigma 5.058 0.306 4.499 4.844 5.049 5.255 5.710 1.002 1200\rsigma.B 68.791 13.133 48.825 59.338 66.869 75.995 98.963 1.002 3000\rdeviance 909.431 6.235 899.560 905.043 908.621 913.008 923.865 1.003 810\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 19.4 and DIC = 928.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rHierarchical parameterisation\r\u0026gt; modelString3=\u0026quot;\r+ model {\r+ #Likelihood (esimating site means (gamma.site)\r+ for (i in 1:n) {\r+ y[i]~dnorm(quad.means[i],tau)\r+ quad.means[i] \u0026lt;- gamma.site[site[i]]\r+ }\r+ for (i in 1:s) {\r+ gamma.site[i] ~ dnorm(site.means[i], tau.site)\r+ site.means[i] \u0026lt;- inprod(beta[],A.Xmat[i,])\r+ }\r+ #Priors\r+ for (i in 1:a) {\r+ beta[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.B \u0026lt;- pow(sigma.B,-2)\r+ sigma.B \u0026lt;-z/sqrt(chSq.B)\r+ z.B ~ dnorm(0, .0016)I(0,)\r+ chSq.B ~ dgamma(0.5, 0.5)\r+ + tau.site \u0026lt;- pow(sigma.site,-2)\r+ sigma.site \u0026lt;-z/sqrt(chSq.site)\r+ z.site ~ dnorm(0, .0016)I(0,)\r+ chSq.site ~ dgamma(0.5, 0.5)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString3, con = \u0026quot;hierarchicalModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; A.Xmat \u0026lt;- model.matrix(~A,ddply(data.nest,~Sites,catcolwise(unique)))\r\u0026gt; data.nest.list \u0026lt;- with(data.nest,\r+ list(y=y,\r+ site=Sites,\r+ A.Xmat= A.Xmat,\r+ n=nrow(data.nest),\r+ s=length(levels(Sites)),\r+ a = ncol(A.Xmat)\r+ )\r+ )\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sigma.site\u0026quot;)\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\rNow run the JAGS code via the R2jags interface.\n\u0026gt; data.nest.r2jags.h \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;hierarchicalModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 24\rTotal graph size: 406\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.h)\rInference for Bugs model at \u0026quot;hierarchicalModel.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 42.139 4.991 32.186 38.913 42.226 45.346 51.751 1.001 3000\rbeta[2] 27.611 6.859 13.692 23.437 27.617 31.993 41.118 1.001 3000\rbeta[3] 41.048 7.032 26.813 36.805 41.067 45.316 55.566 1.002 1200\rsigma 5.058 0.315 4.483 4.841 5.036 5.257 5.763 1.001 3000\rsigma.site 10.889 2.386 7.235 9.269 10.578 12.125 16.695 1.005 3000\rdeviance 909.557 6.168 899.915 905.154 908.708 913.153 923.686 1.001 1900\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 19.0 and DIC = 928.6\rDIC is an estimate of expected predictive error (lower deviance is better).\rIf you want to include finite-population standard deviations in the model you can use the following code.\n\u0026gt; modelString4=\u0026quot;\r+ model {\r+ #Likelihood (esimating site means (gamma.site)\r+ for (i in 1:n) {\r+ y[i]~dnorm(quad.means[i],tau)\r+ quad.means[i] \u0026lt;- gamma.site[site[i]]\r+ y.err[i]\u0026lt;- quad.means[i]-y[i]\r+ }\r+ for (i in 1:s) {\r+ gamma.site[i] ~ dnorm(site.means[i], tau.site)\r+ site.means[i] \u0026lt;- inprod(beta[],A.Xmat[i,])\r+ site.err[i] \u0026lt;- site.means[i] - gamma.site[i]\r+ }\r+ #Priors\r+ for (i in 1:a) {\r+ beta[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.site \u0026lt;- pow(sigma.site,-2)\r+ sigma.site \u0026lt;-z/sqrt(chSq.site)\r+ z.site ~ dnorm(0, .0016)I(0,)\r+ chSq.site ~ dgamma(0.5, 0.5)\r+ + sd.y \u0026lt;- sd(y.err)\r+ sd.site \u0026lt;- sd(site.err)\r+ sd.A \u0026lt;- sd(beta)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString4, con = \u0026quot;SDModel.txt\u0026quot;)\r\u0026gt; \u0026gt; #data list\r\u0026gt; A.Xmat \u0026lt;- model.matrix(~A,ddply(data.nest,~Sites,catcolwise(unique)))\r\u0026gt; data.nest.list \u0026lt;- with(data.nest,\r+ list(y=y,\r+ site=Sites,\r+ A.Xmat= A.Xmat,\r+ n=nrow(data.nest),\r+ s=length(levels(Sites)),\r+ a = ncol(A.Xmat)\r+ )\r+ )\r\u0026gt; \u0026gt; #parameters and chain details\r\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sd.y\u0026quot;,\u0026#39;sd.site\u0026#39;,\u0026#39;sd.A\u0026#39;,\u0026#39;sigma.site\u0026#39;)\r\u0026gt; adaptSteps = 1000\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\r\u0026gt; \u0026gt; data.nest.r2jags.SD \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;SDModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 22\rTotal graph size: 571\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.SD)\rInference for Bugs model at \u0026quot;SDModel.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 42.336 5.027 32.564 39.187 42.338 45.373 52.570 1.004 420\rbeta[2] 27.417 7.290 12.457 22.904 27.308 31.955 42.039 1.001 2100\rbeta[3] 40.862 7.164 26.163 36.386 40.920 45.444 55.173 1.007 770\rsd.A 10.042 4.276 2.657 7.162 9.646 12.369 19.900 1.001 2200\rsd.site 10.592 1.057 9.214 9.909 10.354 11.029 13.276 1.010 280\rsd.y 4.999 0.095 4.852 4.929 4.987 5.058 5.219 1.003 770\rsigma 5.047 0.309 4.489 4.830 5.029 5.257 5.705 1.005 310\rsigma.site 11.003 2.465 7.419 9.295 10.610 12.282 16.704 1.004 480\rdeviance 909.411 6.011 899.576 904.938 908.750 913.034 922.925 1.003 630\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 18.0 and DIC = 927.5\rDIC is an estimate of expected predictive error (lower deviance is better).\rCalculate \\(R^2\\) from the posterior of the model.\n\u0026gt; data.nest.mcmc.listSD \u0026lt;- as.mcmc(data.nest.r2jags.SD)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~A, data.nest)\r\u0026gt; coefs \u0026lt;- data.nest.r2jags.SD$BUGSoutput$sims.list[[\u0026#39;beta\u0026#39;]]\r\u0026gt; fitted \u0026lt;- coefs %*% t(Xmat)\r\u0026gt; X.var \u0026lt;- aaply(fitted,1,function(x){var(x)})\r\u0026gt; Z.var \u0026lt;- data.nest.r2jags.SD$BUGSoutput$sims.list[[\u0026#39;sd.site\u0026#39;]]^2\r\u0026gt; R.var \u0026lt;- data.nest.r2jags.SD$BUGSoutput$sims.list[[\u0026#39;sd.y\u0026#39;]]^2\r\u0026gt; R2.marginal \u0026lt;- (X.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.marginal \u0026lt;- data.frame(Mean=mean(R2.marginal), Median=median(R2.marginal), HPDinterval(as.mcmc(R2.marginal)))\r\u0026gt; R2.conditional \u0026lt;- (X.var+Z.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.conditional \u0026lt;- data.frame(Mean=mean(R2.conditional),\r+ Median=median(R2.conditional), HPDinterval(as.mcmc(R2.conditional)))\r\u0026gt; R2.site \u0026lt;- (Z.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.site \u0026lt;- data.frame(Mean=mean(R2.site), Median=median(R2.site), HPDinterval(as.mcmc(R2.site)))\r\u0026gt; R2.res\u0026lt;-(R.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.res \u0026lt;- data.frame(Mean=mean(R2.res), Median=median(R2.res), HPDinterval(as.mcmc(R2.res)))\r\u0026gt; \u0026gt; rbind(R2.site=R2.site, R2.marginal=R2.marginal, R2.res=R2.res, R2.conditional=R2.conditional)\rMean Median lower upper\rR2.site 0.26437322 0.2428822 0.16881028 0.41958555\rR2.marginal 0.67674004 0.6992418 0.49930501 0.78437310\rR2.res 0.05888674 0.0584191 0.03459529 0.08514432\rR2.conditional 0.94111326 0.9415809 0.91485568 0.96540471\r\rGraphical summaries\r\u0026gt; newdata \u0026lt;- with(data.nest, data.frame(A=levels(A)))\r\u0026gt; Xmat \u0026lt;- model.matrix(~A, newdata)\r\u0026gt; coefs \u0026lt;- data.nest.r2jags.m$BUGSoutput$sims.list[[\u0026#39;alpha\u0026#39;]]\r\u0026gt; fit \u0026lt;- coefs %*% t(Xmat)\r\u0026gt; newdata \u0026lt;- cbind(newdata,\r+ adply(fit, 2, function(x) {\r+ data.frame(Mean=mean(x), Median=median(x), HPDinterval(as.mcmc(x)),\r+ HPDinterval(as.mcmc(x), p=0.68))\r+ })\r+ )\r\u0026gt; \u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; library(gridExtra)\r\u0026gt; library(grid)\r\u0026gt; p1 \u0026lt;- ggplot(newdata, aes(y=Median, x=A)) +\r+ geom_errorbar(aes(ymin=lower, ymax=upper), width=0.01, size=1) +\r+ geom_errorbar(aes(ymin=lower.1, ymax=upper.1), width=0, size=2) +\r+ geom_point(size=4, shape=21, fill=\u0026#39;white\u0026#39;)+\r+ scale_y_continuous(\u0026#39;Y\u0026#39;)+\r+ scale_x_discrete(\u0026#39;X\u0026#39;)+\r+ theme_classic()+\r+ theme(axis.title.y=element_text(vjust=2, size=rel(1.25)),\r+ axis.title.x=element_text(vjust=-2, size=rel(1.25)),\r+ plot.margin=unit(c(0.5,0.5,2,2), \u0026#39;lines\u0026#39;)\r+ )\r\u0026gt; \u0026gt; p1\r\r\rData generation - second example\rNow imagine a similar experiment in which we intend to measure a response (\\(y\\)) to one of treatments (three levels; “a1”, “a2” and “a3”). As with the previous design, we decided to establish a nested design in which there are sub-replicate (\\(1\\)m Quadrats) within each Site. In the current design, we have decided to further sub-replicate. Within each of the \\(5\\) Quadrats, we are going to randomly place \\(2\\times10\\)cm pit traps. Now we have Sites nested within Treatments, Quadrats nested within Sites AND, Pits nested within Sites. The latter of these (Pits nested within Sites) are the observations (\\(y\\)). As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; nTreat \u0026lt;- 3\r\u0026gt; nSites \u0026lt;- 15\r\u0026gt; nSitesPerTreat \u0026lt;- nSites/nTreat\r\u0026gt; nQuads \u0026lt;- 5\r\u0026gt; nPits \u0026lt;- 2\r\u0026gt; site.sigma \u0026lt;- 10 # sd within between sites within treatment\r\u0026gt; quad.sigma \u0026lt;- 10\r\u0026gt; sigma \u0026lt;- 7.5\r\u0026gt; n \u0026lt;- nSites * nQuads * nPits\r\u0026gt; sites \u0026lt;- gl(n=nSites,n/nSites,n, lab=paste(\u0026quot;site\u0026quot;,1:nSites))\r\u0026gt; A \u0026lt;- gl(nTreat, n/nTreat, n, labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))\r\u0026gt; a.means \u0026lt;- c(40,70,80)\r\u0026gt; \u0026gt; #A\u0026lt;-gl(nTreat,nSites/nTreat,nSites,labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))\r\u0026gt; a\u0026lt;-gl(nTreat,1,nTreat,labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))\r\u0026gt; a.X \u0026lt;- model.matrix(~a, expand.grid(a))\r\u0026gt; a.eff \u0026lt;- as.vector(solve(a.X,a.means))\r\u0026gt; site.means \u0026lt;- rnorm(nSites,a.X %*% a.eff,site.sigma)\r\u0026gt; \u0026gt; A \u0026lt;- gl(nTreat,nSites/nTreat,nSites,labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))\r\u0026gt; A.X \u0026lt;- model.matrix(~A, expand.grid(A))\r\u0026gt; #a.X \u0026lt;- model.matrix(~A, expand.grid(A=gl(nTreat,nSites/nTreat,nSites,labels=c(\u0026#39;a1\u0026#39;,\u0026#39;a2\u0026#39;,\u0026#39;a3\u0026#39;))))\r\u0026gt; site.means \u0026lt;- rnorm(nSites,A.X %*% a.eff,site.sigma)\r\u0026gt; \u0026gt; SITES \u0026lt;- gl(nSites,(nSites*nQuads)/nSites,nSites*nQuads,labels=paste(\u0026#39;site\u0026#39;,1:nSites))\r\u0026gt; sites.X \u0026lt;- model.matrix(~SITES-1)\r\u0026gt; quad.means \u0026lt;- rnorm(nSites*nQuads,sites.X %*% site.means,quad.sigma)\r\u0026gt; \u0026gt; #SITES \u0026lt;- gl(nSites,1,nSites,labels=paste(\u0026#39;site\u0026#39;,1:nSites))\r\u0026gt; #sites.X \u0026lt;- model.matrix(~SITES-1)\r\u0026gt; #quad.means \u0026lt;- rnorm(nSites*nQuads,sites.X %*% site.means,quad.sigma)\r\u0026gt; \u0026gt; QUADS \u0026lt;- gl(nSites*nQuads,n/(nSites*nQuads),n,labels=paste(\u0026#39;quad\u0026#39;,1:(nSites*nQuads)))\r\u0026gt; quads.X \u0026lt;- model.matrix(~QUADS-1)\r\u0026gt; #quads.eff \u0026lt;- as.vector(solve(quads.X,quad.means))\r\u0026gt; #pit.means \u0026lt;- rnorm(n,quads.eff %*% t(quads.X),sigma)\r\u0026gt; pit.means \u0026lt;- rnorm(n,quads.X %*% quad.means,sigma)\r\u0026gt; \u0026gt; PITS \u0026lt;- gl(nPits*nSites*nQuads,1, n, labels=paste(\u0026#39;pit\u0026#39;,1:(nPits*nSites*nQuads)))\r\u0026gt; data.nest1\u0026lt;-data.frame(Pits=PITS,Quads=QUADS,Sites=rep(SITES,each=2), A=rep(A,each=nQuads*nPits),y=pit.means)\r\u0026gt; #data.nest1\u0026lt;-data.nest1[order(data.nest1$A,data.nest1$Sites,data.nest1$Quads),]\r\u0026gt; head(data.nest1) #print out the first six rows of the data set\rPits Quads Sites A y\r1 pit 1 quad 1 site 1 a1 61.79607\r2 pit 2 quad 1 site 1 a1 56.24699\r3 pit 3 quad 2 site 1 a1 42.40885\r4 pit 4 quad 2 site 1 a1 52.06672\r5 pit 5 quad 3 site 1 a1 73.71286\r6 pit 6 quad 3 site 1 a1 62.50529\r\u0026gt; \u0026gt; ggplot(data.nest1, aes(y=y, x=1)) + geom_boxplot() + facet_grid(.~Quads)\rExploratory data analysis\rNormality and Homogeneity of variance\n\u0026gt; #Effects of treatment\r\u0026gt; boxplot(y~A, ddply(data.nest1, ~A+Sites,numcolwise(mean, na.rm=T)))\r\u0026gt; \u0026gt; #Site effects\r\u0026gt; boxplot(y~Sites, ddply(data.nest1, ~A+Sites+Quads,numcolwise(mean, na.rm=T)))\r\u0026gt; \u0026gt; #Quadrat effects\r\u0026gt; boxplot(y~Quads, ddply(data.nest1, ~A+Sites+Quads+Pits,numcolwise(mean, na.rm=T)))\rConclusions:\n\rthere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical.\n\rthere is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the \\(y\\)-axis. Hence it there is no evidence of non-homogeneity.\n\rit is a little difficult to assess normality/homogeneity of variance of quadrats since there are only two pits per quadrat. Nevertheless, there is no suggestion that variance increases with increasing mean.\n\r\rObvious violations could be addressed either by:\n\rtransform the scale of the response variables (to address normality, etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\r\r\r\rModel fitting\rFrequentist for comparison\r\u0026gt; library(nlme)\r\u0026gt; d.lme \u0026lt;- lme(y ~ A, random=~1|Sites/Quads,data=data.nest1)\r\u0026gt; summary(d.lme)\rLinear mixed-effects model fit by REML\rData: data.nest1 AIC BIC logLik\r1137.994 1155.937 -562.997\rRandom effects:\rFormula: ~1 | Sites\r(Intercept)\rStdDev: 10.38248\rFormula: ~1 | Quads %in% Sites\r(Intercept) Residual\rStdDev: 8.441615 7.161178\rFixed effects: y ~ A Value Std.Error DF t-value p-value\r(Intercept) 41.38646 5.04334 75 8.206160 0.0000\rAa2 21.36271 7.13236 12 2.995181 0.0112\rAa3 39.14584 7.13236 12 5.488483 0.0001\rCorrelation: (Intr) Aa2 Aa2 -0.707 Aa3 -0.707 0.500\rStandardized Within-Group Residuals:\rMin Q1 Med Q3 Max -2.11852493 -0.54600763 -0.03428569 0.53382444 2.26256381 Number of Observations: 150\rNumber of Groups: Sites Quads %in% Sites 15 75 \u0026gt; \u0026gt; anova(d.lme)\rnumDF denDF F-value p-value\r(Intercept) 1 75 446.9152 \u0026lt;.0001\rA 2 12 15.1037 5e-04\r\rFull effect parameterisation\r\u0026gt; modelString=\u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- alpha0 + alpha[A[i]] + beta.site[site[i]] + beta.quad[quad[i]]\r+ }\r+ + #Priors\r+ alpha0 ~ dnorm(0, 1.0E-6)\r+ alpha[1] \u0026lt;- 0\r+ for (i in 2:nA) {\r+ alpha[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ for (i in 1:nSite) {\r+ beta.site[i] ~ dnorm(0, tau.Bs) #prior\r+ }\r+ for (i in 1:nQuad) {\r+ beta.quad[i] ~ dnorm(0, tau.Bq) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.Bs \u0026lt;- pow(sigma.Bs,-2)\r+ sigma.Bs \u0026lt;-z/sqrt(chSq.Bs)\r+ z.Bs ~ dnorm(0, .0016)I(0,)\r+ chSq.Bs ~ dgamma(0.5, 0.5)\r+ + tau.Bq \u0026lt;- pow(sigma.Bq,-2)\r+ sigma.Bq \u0026lt;-z/sqrt(chSq.Bq)\r+ z.Bq ~ dnorm(0, .0016)I(0,)\r+ chSq.Bq ~ dgamma(0.5, 0.5)\r+ + }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;fullModel2.txt\u0026quot;)\r\u0026gt; \u0026gt; data.nest.list \u0026lt;- with(data.nest1,\r+ list(y=y,\r+ site=as.numeric(Sites),\r+ A=as.numeric(A),\r+ n=nrow(data.nest1),\r+ nSite=length(levels(Sites)),\r+ nA = length(levels(A)),\r+ nQuad=length(levels(Quads)),\r+ quad = as.numeric(Quads)\r+ )\r+ )\r\u0026gt; \u0026gt; params \u0026lt;- c(\u0026quot;alpha0\u0026quot;,\u0026quot;alpha\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sigma.Bs\u0026quot;,\u0026quot;sigma.Bq\u0026quot;)\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\r\u0026gt; \u0026gt; data.nest.r2jags.f2 \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;fullModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 99\rTotal graph size: 793\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.f2)\rInference for Bugs model at \u0026quot;fullModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\ralpha[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\ralpha[2] 21.147 7.532 6.252 16.137 21.140 25.968 35.890 1.001\ralpha[3] 38.985 7.635 23.341 34.130 39.120 43.879 53.757 1.001\ralpha0 41.541 5.460 30.677 37.967 41.659 45.032 52.383 1.001\rsigma 7.294 0.604 6.238 6.870 7.264 7.664 8.580 1.003\rsigma.Bq 8.433 1.132 6.355 7.650 8.378 9.175 10.757 1.005\rsigma.Bs 10.779 2.673 6.704 8.951 10.409 12.219 17.127 1.017\rdeviance 1020.495 17.724 988.898 1007.948 1019.500 1032.389 1056.708 1.005\rn.eff\ralpha[1] 1\ralpha[2] 3000\ralpha[3] 3000\ralpha0 3000\rsigma 970\rsigma.Bq 420\rsigma.Bs 100\rdeviance 510\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 156.8 and DIC = 1177.3\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMatrix parameterisation\r\u0026gt; modelString2=\u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- inprod(alpha[], X[i,]) + inprod(beta.site[],Z.site[i,]) + inprod(beta.quad[],Z.quad[i,])\r+ y.err[i] \u0026lt;- y[i]-mu[i]\r+ }\r+ + #Priors\r+ for (i in 1:nX) {\r+ alpha[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ for (i in 1:nSite) {\r+ beta.site[i] ~ dnorm(0, tau.Bs) #prior\r+ }\r+ for (i in 1:nQuad) {\r+ beta.quad[i] ~ dnorm(0, tau.Bq) #prior\r+ }\r+ tau \u0026lt;- pow(sigma,-2)\r+ sigma \u0026lt;-z/sqrt(chSq)\r+ z ~ dnorm(0, .0016)I(0,)\r+ chSq ~ dgamma(0.5, 0.5)\r+ + tau.Bs \u0026lt;- pow(sigma.Bs,-2)\r+ sigma.Bs \u0026lt;-z/sqrt(chSq.Bs)\r+ z.Bs ~ dnorm(0, .0016)I(0,)\r+ chSq.Bs ~ dgamma(0.5, 0.5)\r+ + tau.Bq \u0026lt;- pow(sigma.Bq,-2)\r+ sigma.Bq \u0026lt;-z/sqrt(chSq.Bq)\r+ z.Bq ~ dnorm(0, .0016)I(0,)\r+ chSq.Bq ~ dgamma(0.5, 0.5)\r+ + sd.res \u0026lt;- sd(y.err[])\r+ sd.site \u0026lt;- sd(beta.site[])\r+ sd.quad \u0026lt;- sd(beta.quad[]) + }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;matrixModel2.txt\u0026quot;)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~A, data=data.nest1)\r\u0026gt; Zsite \u0026lt;- model.matrix(~-1+Sites, data=data.nest1)\r\u0026gt; Zquad \u0026lt;- model.matrix(~-1+Quads, data=data.nest1)\r\u0026gt; \u0026gt; data.nest.list \u0026lt;- with(data.nest1,\r+ list(y=y,\r+ n=nrow(data.nest1),\r+ X=Xmat, nX=ncol(Xmat),\r+ Z.site=Zsite, nSite=ncol(Zsite),\r+ Z.quad=Zquad, nQuad=ncol(Zquad)\r+ )\r+ )\r\u0026gt; \u0026gt; params \u0026lt;- c(\u0026quot;alpha\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;sigma.Bs\u0026quot;,\u0026quot;sigma.Bq\u0026quot;,\u0026#39;sd.res\u0026#39;,\u0026#39;sd.site\u0026#39;,\u0026#39;sd.quad\u0026#39;)\r\u0026gt; burnInSteps = 3000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = burnInSteps+ceiling((numSavedSteps * thinSteps)/nChains)\r\u0026gt; \u0026gt; data.nest.r2jags.m2 \u0026lt;- jags(data = data.nest.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;matrixModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 150\rUnobserved stochastic nodes: 99\rTotal graph size: 14993\rInitializing model\r\u0026gt; \u0026gt; print(data.nest.r2jags.m2)\rInference for Bugs model at \u0026quot;matrixModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 4500 iterations (first 3000 discarded)\rn.sims = 3000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\ralpha[1] 41.247 5.438 30.494 37.721 41.227 44.692 52.262 1.002\ralpha[2] 21.535 7.824 6.537 16.541 21.439 26.473 37.416 1.003\ralpha[3] 39.276 7.723 24.165 34.357 39.319 44.191 54.637 1.001\rsd.quad 8.427 0.828 6.866 7.889 8.420 8.956 10.131 1.001\rsd.res 7.221 0.420 6.500 6.924 7.186 7.486 8.137 1.010\rsd.site 10.263 1.703 7.202 9.180 10.187 11.240 13.917 1.002\rsigma 7.261 0.598 6.189 6.845 7.209 7.631 8.540 1.010\rsigma.Bq 8.514 1.064 6.557 7.776 8.454 9.189 10.801 1.001\rsigma.Bs 10.703 2.802 6.379 8.805 10.283 12.108 17.304 1.001\rdeviance 1019.366 17.429 987.783 1007.166 1018.196 1030.618 1056.340 1.010\rn.eff\ralpha[1] 3000\ralpha[2] 3000\ralpha[3] 2500\rsd.quad 3000\rsd.res 150\rsd.site 3000\rsigma 160\rsigma.Bq 3000\rsigma.Bs 3000\rdeviance 160\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 151.0 and DIC = 1170.4\rDIC is an estimate of expected predictive error (lower deviance is better).\rIf we use the JAGS matrix parameterisation model from above, the JAGS model is already complete (as we defined the sd components in that model already).\n\u0026gt; data.nest1.mcmc.listSD \u0026lt;- as.mcmc(data.nest.r2jags.m2)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~A, data.nest1)\r\u0026gt; coefs \u0026lt;- data.nest.r2jags.m2$BUGSoutput$sims.list[[\u0026#39;alpha\u0026#39;]]\r\u0026gt; fitted \u0026lt;- coefs %*% t(Xmat)\r\u0026gt; X.var \u0026lt;- aaply(fitted,1,function(x){var(x)})\r\u0026gt; Z.var \u0026lt;- data.nest.r2jags.m2$BUGSoutput$sims.list[[\u0026#39;sd.site\u0026#39;]]^2\r\u0026gt; R.var \u0026lt;- data.nest.r2jags.m2$BUGSoutput$sims.list[[\u0026#39;sd.res\u0026#39;]]^2\r\u0026gt; R2.marginal \u0026lt;- (X.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.marginal \u0026lt;- data.frame(Mean=mean(R2.marginal), Median=median(R2.marginal), HPDinterval(as.mcmc(R2.marginal)))\r\u0026gt; R2.conditional \u0026lt;- (X.var+Z.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.conditional \u0026lt;- data.frame(Mean=mean(R2.conditional),\r+ Median=median(R2.conditional), HPDinterval(as.mcmc(R2.conditional)))\r\u0026gt; R2.site \u0026lt;- (Z.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.site \u0026lt;- data.frame(Mean=mean(R2.site), Median=median(R2.site), HPDinterval(as.mcmc(R2.site)))\r\u0026gt; R2.res\u0026lt;-(R.var)/(X.var+Z.var+R.var)\r\u0026gt; R2.res \u0026lt;- data.frame(Mean=mean(R2.res), Median=median(R2.res), HPDinterval(as.mcmc(R2.res)))\r\u0026gt; \u0026gt; rbind(R2.site=R2.site, R2.marginal=R2.marginal, R2.res=R2.res, R2.conditional=R2.conditional)\rMean Median lower upper\rR2.site 0.2537842 0.2373232 0.1145934 0.4450797\rR2.marginal 0.6199972 0.6408875 0.4077973 0.7873383\rR2.res 0.1262186 0.1233096 0.0646023 0.1907540\rR2.conditional 0.8737814 0.8766904 0.8092460 0.9353977\r\r\rReferences\rGelman, Andrew, and others. 2006. “Prior Distributions for Variance Parameters in Hierarchical Models (Comment on Article by Browne and Draper).” Bayesian Analysis 1 (3): 515–34.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1581300794,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581300794,"objectID":"1e40228f571d277dad5ac75ca2071006","permalink":"/jags/nested-anova-jags/netsed-anova-jags/","publishdate":"2020-02-09T21:13:14-05:00","relpermalink":"/jags/nested-anova-jags/netsed-anova-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","mixed effects model","anova"],"title":"Nested Anova - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","autocorrelation","JAGS"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rUp until now (in the proceeding tutorials), the focus has been on models that adhere to specific assumptions about the underlying populations (and data). Indeed, both before and immediately after fitting these models, I have stressed the importance of evaluating and validating the proposed and fitted models to ensure reliability of the models. It is now worth us revisiting those fundamental assumptions as well as exploring the options that are available when the populations (data) do not conform. Let’s explore a simple linear regression model to see how each of the assumptions relate to the model.\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0, \\sigma^2).\\]\nThe above simple statistical model models the linear relationship of \\(y_i\\) against \\(x_i\\). The residuals (\\(\\epsilon\\)) are assumed to be normally distributed with a mean of zero and a constant (yet unknown) variance (\\(\\sigma\\), homogeneity of variance). The residuals (and thus observations) are also assumed to all be independent.\nHomogeneity of variance and independence are encapsulated within the single symbol for variance (\\(\\sigma^2\\)). In assuming equal variances and independence, we are actually making an assumption about the variance-covariance structure of the populations (and thus residuals). Specifically, we assume that all populations are equally varied and thus can be represented well by a single variance term (all diagonal values in a \\(N\\times N\\) covariance matrix are the same, \\(\\sigma^2\\)) and the covariances between each population are zero (off diagonals). In simple regression, each observation (data point) represents a single observation drawn (sampled) from an entire population of possible observations. The above covariance structure thus assumes that the covariance between each population (observation) is zero - that is, each observation is completely independent of each other observation. Whilst it is mathematically convenient when data conform to these conditions (normality, homogeneity of variance, independence and linearity), data often violate one or more of these assumptions. In the following, I want to discuss and explore the causes and options for dealing with non-compliance to each of these conditions. By gaining a better understanding of how the various model fitting engines perform their task, we are better equipped to accommodate aspects of the data that don’t otherwise conform to the simple regression assumptions. In this tutorial we specifically focus on the topic of heterogeneity of the variance.\nIn order that the estimated parameters represent the underlying populations in an unbiased manner, the residuals (and thus each each observation) must be independent. However, what if we were sampling a population over time and we were interested in investigating how changes in a response relate to changes in a predictor (such as rainfall). For any response that does not “reset” itself on a regular basis, the state of the population (the value of its response) at a given time is likely to be at least partly dependent on the state of the population at the sampling time before. We can further generalise the above into:\n\\[ y_i \\sim Dist(\\mu_i),\\]\nwhere \\(\\mu_i=\\boldsymbol X \\boldsymbol \\beta + \\boldsymbol Z \\boldsymbol \\gamma\\), with \\(\\boldsymbol X\\) and \\(\\boldsymbol \\beta\\) representing the fixed data structure and fixed effects, respectively, while with \\(\\boldsymbol Z\\) and \\(\\boldsymbol \\gamma\\) represent the varying data structure and varying effects, respectively. In simple regression, there are no “varying” effects, and thus:\n\\[ \\boldsymbol \\gamma \\sim MVN(\\boldsymbol 0, \\boldsymbol \\Sigma),\\]\nwhere \\(\\boldsymbol \\Sigma\\) is a variance-covariance matrix of the form\n\\[ \\boldsymbol \\Sigma = \\frac{\\sigma^2}{1-\\rho^2}\r\\begin{bmatrix}\r1 \u0026amp; \\rho^{\\phi_{1,2}} \u0026amp; \\ldots \u0026amp; \\rho^{\\phi_{1,n}} \\\\\r\\rho^{\\phi_{2,1}} \u0026amp; 1 \u0026amp; \\ldots \u0026amp; \\vdots\\\\\r\\vdots \u0026amp; \\ldots \u0026amp; 1 \u0026amp; \\vdots\\\\\r\\rho^{\\phi_{n,1}} \u0026amp; \\ldots \u0026amp; \\ldots \u0026amp; 1\r\\end{bmatrix}. \\]\nNotice that this introduces a very large number of additional parameters that require estimating: \\(\\sigma^2\\) (error variance), \\(\\rho\\) (base autocorrelation) and each of the individual covariances (\\(\\rho^{\\phi_{n,n}}\\)). Hence, there are always going to be more parameters to estimate than there are date avaiable to use to estimate these paramters. We typically make one of a number of alternative assumptions so as to make this task more manageable.\n\rWhen we assume that all residuals are independent (regular regression), i.e. \\(\\rho=0\\), \\(\\boldsymbol \\Sigma\\) is essentially equal to \\(\\sigma^2 \\boldsymbol I\\) and we simply use:\r\r\\[ \\boldsymbol \\gamma \\sim N( 0,\\sigma^2).\\]\n\rWe could assume there is a reasonably simple pattern of correlation that declines over time. The simplest of these is a first order autoregressive (AR1) structure in which exponent on the correlation declines linearly according to the time lag (\\(\\mid t - s\\mid\\)).\r\r\\[ \\boldsymbol \\Sigma = \\frac{\\sigma^2}{1-\\rho^2}\r\\begin{bmatrix}\r1 \u0026amp; \\rho \u0026amp; \\ldots \u0026amp; \\rho^{\\mid t-s \\mid} \\\\\r\\rho \u0026amp; 1 \u0026amp; \\ldots \u0026amp; \\vdots\\\\\r\\vdots \u0026amp; \\ldots \u0026amp; 1 \u0026amp; \\vdots\\\\\r\\rho^{\\mid t-s \\mid } \u0026amp; \\ldots \u0026amp; \\ldots \u0026amp; 1\r\\end{bmatrix}. \\]\nNote, in making this assumption, we are also assuming that the degree of correlation is dependent only on the lag and not on when the lag occurs (stationarity). That is all lag 1 residual pairs will have the same degree of correlation, all the lag \\(2\\) pairs will have the same correlation and so on.\n\r\rFirst order autocorrelation\rConsider an example, in which the number of individuals at time \\(2\\) will be partly dependent on the number of individuals present at time \\(1\\). Clearly then, the observations (and thus residuals) are not fully independent - there is an auto-regressive correlation dependency structure. We could accommodate this lack of independence by fitting a model that incorporates a AR1 variance-covariance structure. Alternatively, we fit the following model:\n\\[ y_{it} \\sim Dist(\\mu_{it}),\\]\nwhere\n\\[\\mu_{it}=\\boldsymbol X \\boldsymbol \\beta + \\rho \\epsilon_{i,t-1} + \\gamma_{it},\\]\nand where \\(\\gamma \\sim N(0, \\sigma^2)\\). In this version of the model, we are stating that the expected value of an observation is equal to the regular linear predictor plus the autocorrelation parameter (\\(\\rho\\)) multipled by the residual associated with the previous observation plus the regular independently distributed noise (\\(\\sigma^2\\)). Such a model is substantially faster to fit, although along with stationarity assumes in estimating the autocorrelation parameter, only the smallest lags are used. To see this in action, we will first generate some temporally auto-correlated data.\n\u0026gt; set.seed(126)\r\u0026gt; n = 50\r\u0026gt; a \u0026lt;- 20 #intercept\r\u0026gt; b \u0026lt;- 0.2 #slope\r\u0026gt; x \u0026lt;- round(runif(n, 1, n), 1) #values of the year covariate\r\u0026gt; year \u0026lt;- 1:n\r\u0026gt; sigma \u0026lt;- 20\r\u0026gt; rho \u0026lt;- 0.8\r\u0026gt; \u0026gt; library(nlme)\r\u0026gt; ## define a constructor for a first-order\r\u0026gt; ## correlation structure\r\u0026gt; ar1 \u0026lt;- corAR1(form = ~year, value = rho)\r\u0026gt; ## initialize this constructor against our data\r\u0026gt; AR1 \u0026lt;- Initialize(ar1, data = data.frame(year))\r\u0026gt; ## generate a correlation matrix\r\u0026gt; V \u0026lt;- corMatrix(AR1)\r\u0026gt; ## Cholesky factorization of V\r\u0026gt; Cv \u0026lt;- chol(V)\r\u0026gt; ## simulate AR1 errors\r\u0026gt; e \u0026lt;- t(Cv) %*% rnorm(n, 0, sigma) # cov(e) = V * sig^2\r\u0026gt; ## generate response\r\u0026gt; y \u0026lt;- a + b * x + e\r\u0026gt; data.temporalCor = data.frame(y = y, x = x, year = year)\r\u0026gt; write.table(data.temporalCor, file = \u0026quot;data.temporalCor.csv\u0026quot;,\r+ sep = \u0026quot;,\u0026quot;, quote = F, row.names = FALSE)\r\u0026gt; \u0026gt; pairs(data.temporalCor)\rWe will now proceed to analyse these data via both of the above techniques for JAGS:\n\rincorporating AR1 residual autocorrelation structure\n\rincorporating lagged residuals into the model\n\r\r\rIncorporating lagged residuals\rModel fitting\rWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Define the model.\n\u0026gt; modelString = \u0026quot; + model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ fit[i] \u0026lt;- inprod(beta[],X[i,])\r+ y[i] ~ dnorm(mu[i],tau.cor)\r+ }\r+ e[1] \u0026lt;- (y[1] - fit[1])\r+ mu[1] \u0026lt;- fit[1]\r+ for (i in 2:n) {\r+ e[i] \u0026lt;- (y[i] - fit[i]) #- phi*e[i-1]\r+ mu[i] \u0026lt;- fit[i] + phi * e[i-1]\r+ }\r+ #Priors\r+ phi ~ dunif(-1,1)\r+ for (i in 1:nX) {\r+ beta[i] ~ dnorm(0,1.0E-6)\r+ }\r+ sigma \u0026lt;- z/sqrt(chSq) # prior for sigma; cauchy = normal/sqrt(chi^2)\r+ z ~ dnorm(0, 0.04)I(0,)\r+ chSq ~ dgamma(0.5, 0.5) # chi^2 with 1 d.f.\r+ tau \u0026lt;- pow(sigma, -2)\r+ tau.cor \u0026lt;- tau #* (1- phi*phi)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;tempModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat = model.matrix(~x, data.temporalCor)\r\u0026gt; data.temporalCor.list \u0026lt;- with(data.temporalCor, list(y = y, X = Xmat,\r+ n = nrow(data.temporalCor), nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 5000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 10000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10000\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface.\n\u0026gt; data.temporalCor.r2jags \u0026lt;- jags(data = data.temporalCor.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;tempModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 50\rUnobserved stochastic nodes: 5\rTotal graph size: 413\rInitializing model\r\u0026gt; \u0026gt; print(data.temporalCor.r2jags)\rInference for Bugs model at \u0026quot;tempModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10000 iterations (first 5000 discarded)\rn.sims = 10000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 30.841 11.858 8.852 22.556 30.505 38.559 55.177 1.001 10000\rbeta[2] 0.225 0.100 0.028 0.159 0.225 0.292 0.422 1.001 3800\rphi 0.913 0.054 0.793 0.879 0.919 0.954 0.994 1.001 3400\rsigma 12.133 1.253 9.967 11.253 12.034 12.902 14.828 1.001 7300\rdeviance 391.602 2.641 388.354 389.656 390.985 392.927 398.180 1.001 9200\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.5 and DIC = 395.1\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\r\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.temporalCor.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; traplot(data.temporalCor.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; data.mcmc = as.mcmc(data.temporalCor.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3930 3746 1.05 beta[2] 2 3866 3746 1.03 deviance 2 3866 3746 1.03 phi 7 7397 3746 1.97 sigma 4 4636 3746 1.24 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 3 4062 3746 1.080 beta[2] 2 3620 3746 0.966 deviance 2 3803 3746 1.020 phi 6 6878 3746 1.840 sigma 4 4713 3746 1.260 \r\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] deviance phi sigma\rLag 0 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000\rLag 1 0.174857318 -0.006205038 0.164212015 0.398270011 0.166634323\rLag 5 0.017823932 0.002140092 -0.016470982 0.017851360 0.011892997\rLag 10 0.004107514 0.010910488 0.020001216 -0.005693854 0.007020861\rLag 50 0.002176470 0.016102607 0.008360988 0.002061169 -0.007663541\rAll diagnostics seem fine.\n\rModel validation\rWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by sigma.\n\\[ Res_i = Y_i - \\mu_i\\]\n\\[ Res_{i+1} = Res_{i+1} - \\rho Res_i\\]\n\\[ Res_i = \\frac{Res_i}{\\sigma} \\]\n\u0026gt; mcmc = data.temporalCor.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.temporalCor\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.temporalCor$y, \u0026quot;-\u0026quot;)\r\u0026gt; n = ncol(resid)\r\u0026gt; resid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \u0026quot;phi\u0026quot;])\r\u0026gt; resid = apply(resid, 2, median)/median(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\r+ geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;)\r\u0026gt; \u0026gt; plot(acf(resid, lag = 40))\rNo obvious autocorrelation or other issues with residuals remaining.\n\rParameter estimates\rExplore parameter estimates.\n\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.temporalCor.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 30.8 11.9 7.36 53.5 2 beta[2] 0.225 0.100 0.0321 0.425\r3 deviance 392. 2.64 388. 397. 4 phi 0.913 0.0537 0.813 1.000\r5 sigma 12.1 1.25 9.91 14.7 \r\r\rIncorporating AR1 residual autocorrelation structure\rModel fitting\rWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Define the model.\n\u0026gt; modelString2 = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ mu[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ y[1:n] ~ dmnorm(mu[1:n],Omega)\r+ for (i in 1:n) {\r+ for (j in 1:n) {\r+ Sigma[i,j] \u0026lt;- sigma2*(equals(i,j) + (1-equals(i,j))*pow(phi,abs(i-j))) + }\r+ }\r+ Omega \u0026lt;- inverse(Sigma)\r+ + #Priors\r+ phi ~ dunif(-1,1)\r+ for (i in 1:nX) {\r+ beta[i] ~ dnorm(0,1.0E-6)\r+ }\r+ sigma \u0026lt;- z/sqrt(chSq) # prior for sigma; cauchy = normal/sqrt(chi^2)\r+ z ~ dnorm(0, 0.04)I(0,)\r+ chSq ~ dgamma(0.5, 0.5) # chi^2 with 1 d.f.\r+ sigma2 = pow(sigma,2)\r+ #tau.cor \u0026lt;- tau #* (1- phi*phi)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;tempModel2.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat = model.matrix(~x, data.temporalCor)\r\u0026gt; data.temporalCor.list \u0026lt;- with(data.temporalCor, list(y = y, X = Xmat,\r+ n = nrow(data.temporalCor), nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 5000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 10000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10000\rNow run the JAGS code via the R2jags interface.\n\u0026gt; data.temporalCor2.r2jags \u0026lt;- jags(data = data.temporalCor.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;tempModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 1\rUnobserved stochastic nodes: 5\rTotal graph size: 5566\rInitializing model\r\u0026gt; \u0026gt; print(data.temporalCor2.r2jags)\rInference for Bugs model at \u0026quot;tempModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10000 iterations (first 5000 discarded)\rn.sims = 10000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 19.926 24.597 -19.141 9.722 18.990 29.365 64.348 1.014 10000\rbeta[2] 0.225 0.100 0.028 0.159 0.227 0.291 0.421 1.001 10000\rphi 0.890 0.055 0.773 0.854 0.895 0.930 0.980 1.011 160\rsigma 30.352 15.780 18.171 22.799 26.810 32.951 61.419 1.010 410\rdeviance 392.642 2.706 389.232 390.628 392.029 394.019 399.490 1.001 2900\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.7 and DIC = 396.3\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\r\u0026gt; denplot(data.temporalCor2.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; traplot(data.temporalCor2.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; data.mcmc = as.mcmc(data.temporalCor2.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 15 14982 3746 4.00 beta[2] 2 3866 3746 1.03 deviance 2 3995 3746 1.07 phi 9 9308 3746 2.48 sigma 8 10294 3746 2.75 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 4 4955 3746 1.320 beta[2] 2 3620 3746 0.966 deviance 2 3930 3746 1.050 phi 12 12162 3746 3.250 sigma 8 10644 3746 2.840 \r\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] deviance phi sigma\rLag 0 1.000000000 1.000000000 1.00000000 1.0000000 1.00000000\rLag 1 0.023745389 -0.007088969 0.19477040 0.8775299 0.95206712\rLag 5 0.019171996 0.008569178 0.08589717 0.5774327 0.80961727\rLag 10 -0.009155805 0.008682983 0.06468974 0.3677587 0.64495814\rLag 50 0.012167974 0.014954099 0.01686647 0.0317406 0.04466731\rAll diagnostics seem fine.\n\rModel validation\rWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by sigma.\n\\[ Res_i = Y_i - \\mu_i\\]\n\\[ Res_{i+1} = Res_{i+1} - \\rho Res_i\\]\n\\[ Res_i = \\frac{Res_i}{\\sigma} \\]\n\u0026gt; mcmc = data.temporalCor2.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.temporalCor\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.temporalCor$y, \u0026quot;-\u0026quot;)\r\u0026gt; n = ncol(resid)\r\u0026gt; resid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \u0026quot;phi\u0026quot;])\r\u0026gt; resid = apply(resid, 2, median)/median(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\r+ geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;)\r\u0026gt; \u0026gt; plot(acf(resid, lag = 40))\rNo obvious autocorrelation or other issues with residuals remaining\n\rParameter estimates\rExplore parameter estimates.\n\u0026gt; tidyMCMC(as.mcmc(data.temporalCor2.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 19.9 24.6 -16.6 66.3 2 beta[2] 0.225 0.0997 0.0313 0.423\r3 deviance 393. 2.71 389. 398. 4 phi 0.890 0.0546 0.780 0.984\r5 sigma 30.4 15.8 16.2 51.2 \r\r\rReferences\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1581214394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581214394,"objectID":"f6b45dba87b1b50584d3c435c238c60d","permalink":"/jags/autocorrelation-jags/autocorrelation-jags/","publishdate":"2020-02-08T21:13:14-05:00","relpermalink":"/jags/autocorrelation-jags/autocorrelation-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","autocorrelation"],"title":"Temporal Autocorrelation - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","autocorrelation","STAN"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rUp until now (in the proceeding tutorials), the focus has been on models that adhere to specific assumptions about the underlying populations (and data). Indeed, both before and immediately after fitting these models, I have stressed the importance of evaluating and validating the proposed and fitted models to ensure reliability of the models. It is now worth us revisiting those fundamental assumptions as well as exploring the options that are available when the populations (data) do not conform. Let’s explore a simple linear regression model to see how each of the assumptions relate to the model.\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0, \\sigma^2).\\]\nThe above simple statistical model models the linear relationship of \\(y_i\\) against \\(x_i\\). The residuals (\\(\\epsilon\\)) are assumed to be normally distributed with a mean of zero and a constant (yet unknown) variance (\\(\\sigma\\), homogeneity of variance). The residuals (and thus observations) are also assumed to all be independent.\nHomogeneity of variance and independence are encapsulated within the single symbol for variance (\\(\\sigma^2\\)). In assuming equal variances and independence, we are actually making an assumption about the variance-covariance structure of the populations (and thus residuals). Specifically, we assume that all populations are equally varied and thus can be represented well by a single variance term (all diagonal values in a \\(N\\times N\\) covariance matrix are the same, \\(\\sigma^2\\)) and the covariances between each population are zero (off diagonals). In simple regression, each observation (data point) represents a single observation drawn (sampled) from an entire population of possible observations. The above covariance structure thus assumes that the covariance between each population (observation) is zero - that is, each observation is completely independent of each other observation. Whilst it is mathematically convenient when data conform to these conditions (normality, homogeneity of variance, independence and linearity), data often violate one or more of these assumptions. In the following, I want to discuss and explore the causes and options for dealing with non-compliance to each of these conditions. By gaining a better understanding of how the various model fitting engines perform their task, we are better equipped to accommodate aspects of the data that don’t otherwise conform to the simple regression assumptions. In this tutorial we specifically focus on the topic of heterogeneity of the variance.\nIn order that the estimated parameters represent the underlying populations in an unbiased manner, the residuals (and thus each each observation) must be independent. However, what if we were sampling a population over time and we were interested in investigating how changes in a response relate to changes in a predictor (such as rainfall). For any response that does not “reset” itself on a regular basis, the state of the population (the value of its response) at a given time is likely to be at least partly dependent on the state of the population at the sampling time before. We can further generalise the above into:\n\\[ y_i \\sim Dist(\\mu_i),\\]\nwhere \\(\\mu_i=\\boldsymbol X \\boldsymbol \\beta + \\boldsymbol Z \\boldsymbol \\gamma\\), with \\(\\boldsymbol X\\) and \\(\\boldsymbol \\beta\\) representing the fixed data structure and fixed effects, respectively, while with \\(\\boldsymbol Z\\) and \\(\\boldsymbol \\gamma\\) represent the varying data structure and varying effects, respectively. In simple regression, there are no “varying” effects, and thus:\n\\[ \\boldsymbol \\gamma \\sim MVN(\\boldsymbol 0, \\boldsymbol \\Sigma),\\]\nwhere \\(\\boldsymbol \\Sigma\\) is a variance-covariance matrix of the form\n\\[ \\boldsymbol \\Sigma = \\frac{\\sigma^2}{1-\\rho^2}\r\\begin{bmatrix}\r1 \u0026amp; \\rho^{\\phi_{1,2}} \u0026amp; \\ldots \u0026amp; \\rho^{\\phi_{1,n}} \\\\\r\\rho^{\\phi_{2,1}} \u0026amp; 1 \u0026amp; \\ldots \u0026amp; \\vdots\\\\\r\\vdots \u0026amp; \\ldots \u0026amp; 1 \u0026amp; \\vdots\\\\\r\\rho^{\\phi_{n,1}} \u0026amp; \\ldots \u0026amp; \\ldots \u0026amp; 1\r\\end{bmatrix}. \\]\nNotice that this introduces a very large number of additional parameters that require estimating: \\(\\sigma^2\\) (error variance), \\(\\rho\\) (base autocorrelation) and each of the individual covariances (\\(\\rho^{\\phi_{n,n}}\\)). Hence, there are always going to be more parameters to estimate than there are date avaiable to use to estimate these paramters. We typically make one of a number of alternative assumptions so as to make this task more manageable.\n\rWhen we assume that all residuals are independent (regular regression), i.e. \\(\\rho=0\\), \\(\\boldsymbol \\Sigma\\) is essentially equal to \\(\\sigma^2 \\boldsymbol I\\) and we simply use:\r\r\\[ \\boldsymbol \\gamma \\sim N( 0,\\sigma^2).\\]\n\rWe could assume there is a reasonably simple pattern of correlation that declines over time. The simplest of these is a first order autoregressive (AR1) structure in which exponent on the correlation declines linearly according to the time lag (\\(\\mid t - s\\mid\\)).\r\r\\[ \\boldsymbol \\Sigma = \\frac{\\sigma^2}{1-\\rho^2}\r\\begin{bmatrix}\r1 \u0026amp; \\rho \u0026amp; \\ldots \u0026amp; \\rho^{\\mid t-s \\mid} \\\\\r\\rho \u0026amp; 1 \u0026amp; \\ldots \u0026amp; \\vdots\\\\\r\\vdots \u0026amp; \\ldots \u0026amp; 1 \u0026amp; \\vdots\\\\\r\\rho^{\\mid t-s \\mid } \u0026amp; \\ldots \u0026amp; \\ldots \u0026amp; 1\r\\end{bmatrix}. \\]\nNote, in making this assumption, we are also assuming that the degree of correlation is dependent only on the lag and not on when the lag occurs (stationarity). That is all lag 1 residual pairs will have the same degree of correlation, all the lag \\(2\\) pairs will have the same correlation and so on.\n\r\rFirst order autocorrelation\rConsider an example, in which the number of individuals at time \\(2\\) will be partly dependent on the number of individuals present at time \\(1\\). Clearly then, the observations (and thus residuals) are not fully independent - there is an auto-regressive correlation dependency structure. We could accommodate this lack of independence by fitting a model that incorporates a AR1 variance-covariance structure. Alternatively, we fit the following model:\n\\[ y_{it} \\sim Dist(\\mu_{it}),\\]\nwhere\n\\[\\mu_{it}=\\boldsymbol X \\boldsymbol \\beta + \\rho \\epsilon_{i,t-1} + \\gamma_{it},\\]\nand where \\(\\gamma \\sim N(0, \\sigma^2)\\). In this version of the model, we are stating that the expected value of an observation is equal to the regular linear predictor plus the autocorrelation parameter (\\(\\rho\\)) multipled by the residual associated with the previous observation plus the regular independently distributed noise (\\(\\sigma^2\\)). Such a model is substantially faster to fit, although along with stationarity assumes in estimating the autocorrelation parameter, only the smallest lags are used. To see this in action, we will first generate some temporally auto-correlated data.\n\u0026gt; set.seed(126)\r\u0026gt; n = 50\r\u0026gt; a \u0026lt;- 20 #intercept\r\u0026gt; b \u0026lt;- 0.2 #slope\r\u0026gt; x \u0026lt;- round(runif(n, 1, n), 1) #values of the year covariate\r\u0026gt; year \u0026lt;- 1:n\r\u0026gt; sigma \u0026lt;- 20\r\u0026gt; rho \u0026lt;- 0.8\r\u0026gt; \u0026gt; library(nlme)\r\u0026gt; ## define a constructor for a first-order\r\u0026gt; ## correlation structure\r\u0026gt; ar1 \u0026lt;- corAR1(form = ~year, value = rho)\r\u0026gt; ## initialize this constructor against our data\r\u0026gt; AR1 \u0026lt;- Initialize(ar1, data = data.frame(year))\r\u0026gt; ## generate a correlation matrix\r\u0026gt; V \u0026lt;- corMatrix(AR1)\r\u0026gt; ## Cholesky factorization of V\r\u0026gt; Cv \u0026lt;- chol(V)\r\u0026gt; ## simulate AR1 errors\r\u0026gt; e \u0026lt;- t(Cv) %*% rnorm(n, 0, sigma) # cov(e) = V * sig^2\r\u0026gt; ## generate response\r\u0026gt; y \u0026lt;- a + b * x + e\r\u0026gt; data.temporalCor = data.frame(y = y, x = x, year = year)\r\u0026gt; write.table(data.temporalCor, file = \u0026quot;data.temporalCor.csv\u0026quot;,\r+ sep = \u0026quot;,\u0026quot;, quote = F, row.names = FALSE)\r\u0026gt; \u0026gt; pairs(data.temporalCor)\rWe will now proceed to analyse these data via both of the above techniques for JAGS:\n\rincorporating AR1 residual autocorrelation structure\n\rincorporating lagged residuals into the model\n\r\r\rIncorporating lagged residuals\rModel fitting\rWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Define the model.\n\u0026gt; stanString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ vector [n] y;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ matrix[n,nX] X;\r+ }\r+ transformed data {\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ real\u0026lt;lower=-1,upper=1\u0026gt; phi;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ vector[n] epsilon;\r+ mu = X*beta;\r+ epsilon[1] = y[1] - mu[1];\r+ for (i in 2:n) {\r+ epsilon[i] = (y[i] - mu[i]);\r+ mu[i] = mu[i] + phi*epsilon[i-1];\r+ }\r+ }\r+ model {\r+ phi ~ uniform(-1,1);\r+ beta ~ normal(0,100);\r+ sigma ~ cauchy(0,5);\r+ y ~ normal(mu, sigma);\r+ }\r+ generated quantities {\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(stanString, con = \u0026quot;tempModel.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat = model.matrix(~x, data.temporalCor)\r\u0026gt; data.temporalCor.list \u0026lt;- with(data.temporalCor, list(y = y, X = Xmat,\r+ n = nrow(data.temporalCor), nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.temporalCor.rstan \u0026lt;- stan(data = data.temporalCor.list, file = \u0026quot;tempModel.stan\u0026quot;, chains = nChains, pars = params, iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;tempModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.087 seconds (Warm-up)\rChain 1: 0.052 seconds (Sampling)\rChain 1: 0.139 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;tempModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.084 seconds (Warm-up)\rChain 2: 0.055 seconds (Sampling)\rChain 2: 0.139 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.temporalCor.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\rInference for Stan model: tempModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 30.80 0.30 11.73 9.28 22.78 30.20 38.06 55.53 1518 1\rbeta[2] 0.22 0.00 0.10 0.02 0.16 0.22 0.29 0.43 1362 1\rsigma 12.06 0.03 1.20 10.04 11.22 11.96 12.83 14.61 1245 1\rphi 0.92 0.00 0.05 0.80 0.88 0.92 0.96 1.00 898 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 16:51:59 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\r\u0026gt; library(mcmcplots)\r\u0026gt; mcmc = As.mcmc.list(data.temporalCor.rstan)\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r[[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(mcmc)\rbeta[1] beta[2] sigma phi lp__\rLag 0 1.00000000 1.000000000 1.000000000 1.00000000 1.00000000\rLag 1 0.11945325 0.130376690 0.227794064 0.17925033 0.53885687\rLag 5 0.03437963 0.007224984 -0.042874656 0.07298004 0.09845135\rLag 10 0.03127466 0.025645224 0.006317540 0.01226778 -0.02012550\rLag 50 -0.05003287 0.024817286 -0.001190987 0.01445287 -0.02401952\r\u0026gt; stan_ac(data.temporalCor.rstan)\r\u0026gt; stan_rhat(data.temporalCor.rstan)\r\u0026gt; stan_ess(data.temporalCor.rstan)\rAll diagnostics seem fine.\n\rModel validation\rWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by sigma.\n\\[ Res_i = Y_i - \\mu_i\\]\n\\[ Res_{i+1} = Res_{i+1} - \\rho Res_i\\]\n\\[ Res_i = \\frac{Res_i}{\\sigma} \\]\n\u0026gt; mcmc = as.matrix(data.temporalCor.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.temporalCor$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.temporalCor$y, \u0026quot;-\u0026quot;)\r\u0026gt; n = ncol(resid)\r\u0026gt; resid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \u0026quot;phi\u0026quot;])\r\u0026gt; resid = apply(resid, 2, median)/median(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\r+ geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; plot(acf(resid, lag = 40))\r\u0026gt; \u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.temporalCor),\r+ fit[i, ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep),\r+ fill = \u0026quot;Model\u0026quot;), alpha = 0.5) + geom_density(data = data.temporalCor,\r+ aes(x = y, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + theme_classic()\rNo obvious autocorrelation or other issues with residuals remaining.\n\rParameter estimates\rExplore parameter estimates.\n\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.temporalCor.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;phi\u0026quot;, \u0026quot;sigma\u0026quot;),\r+ conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, rhat = TRUE,\r+ ess = TRUE)\r# A tibble: 4 x 7\rterm estimate std.error conf.low conf.high rhat ess\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 beta[1] 30.8 11.7 8.41 54.2 1.00 1518\r2 beta[2] 0.223 0.101 0.0145 0.417 1.000 1362\r3 phi 0.915 0.0519 0.825 1.000 1.00 898\r4 sigma 12.1 1.20 10.1 14.6 1.000 1245\r\r\rIncorporating AR1 residual autocorrelation structure\rModel fitting\rWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Define the model.\n\u0026gt; stanString = \u0026quot;\r+ functions { + matrix cov_matrix_ar1(real ar, real sigma, int nrows) { + matrix[nrows, nrows] mat; + vector[nrows - 1] gamma; + mat = diag_matrix(rep_vector(1, nrows)); + for (i in 2:nrows) { + gamma[i - 1] = pow(ar, i - 1); + for (j in 1:(i - 1)) { + mat[i, j] = gamma[i - j]; + mat[j, i] = gamma[i - j]; + } + } + return sigma^2 / (1 - ar^2) * mat; + }\r+ } + + data { + int\u0026lt;lower=1\u0026gt; n; // total number of observations + vector[n] y; // response variable\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ matrix[n,nX] X;\r+ } + transformed data {\r+ vector[n] se2 = rep_vector(0, n); + } + parameters { + vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma; // residual SD + real \u0026lt;lower=-1,upper=1\u0026gt; phi; // autoregressive effects + } + transformed parameters { + } + model {\r+ matrix[n, n] res_cov_matrix;\r+ matrix[n, n] Sigma; + vector[n] mu = X*beta;\r+ res_cov_matrix = cov_matrix_ar1(phi, sigma, n);\r+ Sigma = res_cov_matrix + diag_matrix(se2);\r+ Sigma = cholesky_decompose(Sigma); + + // priors including all constants\r+ beta ~ student_t(3,30,30);\r+ sigma ~ cauchy(0,5);\r+ y ~ multi_normal_cholesky(mu,Sigma);\r+ } + generated quantities { + }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(stanString, con = \u0026quot;tempModel2.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat = model.matrix(~x, data.temporalCor)\r\u0026gt; data.temporalCor.list \u0026lt;- with(data.temporalCor, list(y = y, X = Xmat,\r+ n = nrow(data.temporalCor), nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface.\n\u0026gt; data.temporalCor2.rstan \u0026lt;- stan(data = data.temporalCor.list, file = \u0026quot;tempModel2.stan\u0026quot;, chains = nChains, pars = params, iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;tempModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 2.143 seconds (Warm-up)\rChain 1: 1.194 seconds (Sampling)\rChain 1: 3.337 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;tempModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0.001 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 10 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 2.478 seconds (Warm-up)\rChain 2: 1.287 seconds (Sampling)\rChain 2: 3.765 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.temporalCor2.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\rInference for Stan model: tempModel2.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 21.73 0.53 16.53 -7.44 12.46 20.90 29.75 55.90 957 1\rbeta[2] 0.23 0.00 0.10 0.02 0.16 0.23 0.30 0.42 1523 1\rsigma 12.02 0.03 1.23 9.93 11.13 11.95 12.80 14.60 1552 1\rphi 0.89 0.00 0.06 0.77 0.86 0.90 0.93 0.99 781 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 16:52:55 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\r\u0026gt; mcmc = As.mcmc.list(data.temporalCor2.rstan)\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;phi\u0026quot;))\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r[[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(mcmc)\rbeta[1] beta[2] sigma phi lp__\rLag 0 1.000000000 1.000000000 1.000000000 1.000000000 1.000000000\rLag 1 0.248972079 0.105529288 0.061621949 0.168454454 0.557890281\rLag 5 -0.001409062 0.006290841 0.018746956 0.075009305 0.115634020\rLag 10 0.036198498 0.007579889 -0.001415388 0.013955579 -0.033295103\rLag 50 0.033443833 -0.040041892 -0.005562613 -0.004995361 0.004248614\r\u0026gt; stan_ac(data.temporalCor2.rstan)\r\u0026gt; stan_rhat(data.temporalCor2.rstan)\r\u0026gt; stan_ess(data.temporalCor2.rstan)\rAll diagnostics seem fine.\n\rModel validation\rWhenever we fit a model that incorporates changes to the variance-covariance structures, we need to explore modified standardized residuals. In this case, the raw residuals should be updated to reflect the autocorrelation (subtract residual from previous time weighted by the autocorrelation parameter) before standardising by sigma.\n\\[ Res_i = Y_i - \\mu_i\\]\n\\[ Res_{i+1} = Res_{i+1} - \\rho Res_i\\]\n\\[ Res_i = \\frac{Res_i}{\\sigma} \\]\n\u0026gt; mcmc = as.matrix(data.temporalCor2.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.temporalCor$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.temporalCor$y, \u0026quot;-\u0026quot;)\r\u0026gt; n = ncol(resid)\r\u0026gt; resid[, -1] = resid[, -1] - (resid[, -n] * mcmc[, \u0026quot;phi\u0026quot;])\r\u0026gt; resid = apply(resid, 2, median)/median(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.temporalCor$x)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(data = NULL, aes(y = resid, x = data.temporalCor$year)) +\r+ geom_point() + geom_line() + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; plot(acf(resid, lag = 40))\r\u0026gt; \u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.temporalCor),\r+ fit[i, ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep),\r+ fill = \u0026quot;Model\u0026quot;), alpha = 0.5) + geom_density(data = data.temporalCor,\r+ aes(x = y, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + theme_classic()\rNo obvious autocorrelation or other issues with residuals remaining.\n\rParameter estimates\rExplore parameter estimates.\n\u0026gt; tidyMCMC(data.temporalCor2.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;phi\u0026quot;, \u0026quot;sigma\u0026quot;),\r+ conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, rhat = TRUE,\r+ ess = TRUE)\r# A tibble: 4 x 7\rterm estimate std.error conf.low conf.high rhat ess\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 beta[1] 21.7 16.5 -8.48 54.2 1.00 957\r2 beta[2] 0.227 0.103 0.0405 0.439 1.00 1523\r3 phi 0.893 0.0566 0.790 0.995 0.999 781\r4 sigma 12.0 1.23 9.78 14.4 0.999 1552\r\r\rReferences\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\r\r\r","date":1581214394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581214394,"objectID":"edf045829f625881a266c84248d9bc8c","permalink":"/stan/autocorrelation-stan/autocorrelation-stan/","publishdate":"2020-02-08T21:13:14-05:00","relpermalink":"/stan/autocorrelation-stan/autocorrelation-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","autocorrelation"],"title":"Temporal Autocorrelation - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","heterogeneity","JAGS","heteroskedasticity"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rUp until now (in the proceeding tutorials), the focus has been on models that adhere to specific assumptions about the underlying populations (and data). Indeed, both before and immediately after fitting these models, I have stressed the importance of evaluating and validating the proposed and fitted models to ensure reliability of the models. It is now worth us revisiting those fundamental assumptions as well as exploring the options that are available when the populations (data) do not conform. Let’s explore a simple linear regression model to see how each of the assumptions relate to the model.\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0, \\sigma^2).\\]\nThe above simple statistical model models the linear relationship of \\(y_i\\) against \\(x_i\\). The residuals (\\(\\epsilon\\)) are assumed to be normally distributed with a mean of zero and a constant (yet unknown) variance (\\(\\sigma\\), homogeneity of variance). The residuals (and thus observations) are also assumed to all be independent.\nHomogeneity of variance and independence are encapsulated within the single symbol for variance (\\(\\sigma^2\\)). In assuming equal variances and independence, we are actually making an assumption about the variance-covariance structure of the populations (and thus residuals). Specifically, we assume that all populations are equally varied and thus can be represented well by a single variance term (all diagonal values in a \\(N\\times N\\) covariance matrix are the same, \\(\\sigma^2\\)) and the covariances between each population are zero (off diagonals). In simple regression, each observation (data point) represents a single observation drawn (sampled) from an entire population of possible observations. The above covariance structure thus assumes that the covariance between each population (observation) is zero - that is, each observation is completely independent of each other observation. Whilst it is mathematically convenient when data conform to these conditions (normality, homogeneity of variance, independence and linearity), data often violate one or more of these assumptions. In the following, I want to discuss and explore the causes and options for dealing with non-compliance to each of these conditions. By gaining a better understanding of how the various model fitting engines perform their task, we are better equipped to accommodate aspects of the data that don’t otherwise conform to the simple regression assumptions. In this tutorial we specifically focus on the topic of heterogeneity of the variance.\n\r\rDealing with heterogeneity\rThe validity and reliability of the above linear models are very much dependent on variance homogeneity. In particular, variances that increase (or decrease) with a change in expected values are substantial violations. Whilst non-normality can also be a source of heterogeneity and therefore normalising can address both issues, heterogeneity can also be independent of normality. Similarly, generalised linear models (that accommodate alternative residual distributions - such as Poisson, Binomial, Gamma, etc) can be useful for more appropriate modelling of both the distribution and variance of a model. However, for Gaussian (normal) models in which there is evidence of heterogeneity of variance, yet no evidence of non-normality, it is also possible to specifically model in an alternative variance structure. For example, we can elect to allow variance to increase proportionally to a covariate. To assist us in the following demonstration, we will generate another data set - one that has heteroskedasticity (unequal variance) by design. Rather than draw each residual (and thus observation) from a normal distribution with a constant standard deviation), we will draw the residuals from normal distributions whose variance is proportional to the \\(X\\) predictor.\n\u0026gt; set.seed(126)\r\u0026gt; n \u0026lt;- 16\r\u0026gt; a \u0026lt;- 40 #intercept\r\u0026gt; b \u0026lt;- 1.5 #slope\r\u0026gt; x \u0026lt;- 1:n #values of the year covariate\r\u0026gt; sigma \u0026lt;- 1.5 * x\r\u0026gt; sigma\r[1] 1.5 3.0 4.5 6.0 7.5 9.0 10.5 12.0 13.5 15.0 16.5 18.0 19.5 21.0 22.5\r[16] 24.0\r\u0026gt; \u0026gt; eps \u0026lt;- rnorm(n, mean = 0, sd = sigma) #residuals\r\u0026gt; y \u0026lt;- a + b * x + eps #response variable\r\u0026gt; # OR\r\u0026gt; y \u0026lt;- (model.matrix(~x) %*% c(a, b)) + eps\r\u0026gt; data.het \u0026lt;- data.frame(y = round(y, 1), x) #dataset\r\u0026gt; head(data.het) #print out the first six rows of the data set\ry x\r1 42.1 1\r2 44.2 2\r3 41.2 3\r4 51.7 4\r5 43.5 5\r6 48.3 6\r\u0026gt; \u0026gt; # scatterplot of y against x\r\u0026gt; library(car)\r\u0026gt; scatterplot(y ~ x, data.het)\r\u0026gt; \u0026gt; # regular simple linear regression\r\u0026gt; data.het.lm \u0026lt;- lm(y ~ x, data.het)\r\u0026gt; \u0026gt; # plot of standardised residuals\r\u0026gt; plot(rstandard(data.het.lm) ~ fitted(data.het.lm))\r\u0026gt; \u0026gt; # plot of standardized residuals against the predictor\r\u0026gt; plot(rstandard(data.het.lm) ~ x)\rThe above scatterplot suggests that variance may increase with increasing \\(X\\). The residual plot (using standardised residuals) suggests that mean and variance could be related - there is a hint of a wedge-shaped pattern. Importantly, the plot of standardised residuals against the predictor shows the same pattern as the residual plot implying that heterogeneity is likely to be due a relationship between variance \\(X\\). That is, an increase in \\(X\\) is associated with an increase in variance. In response to this, we could incorporate an alternative variance structure. The simple model we fit earlier assumed that the expected values were all drawn from normal distributions with the same level of precision \\(\\tau\\) and therefore variance. This assumption is often summarised as:\n\\[ \\boldsymbol V = \\sigma^2 \\times \\boldsymbol I,\\]\nwhere \\(\\boldsymbol I\\) is the \\(N \\times N\\) identity matrix (elements on the main diagonal are one and zero outside) which multipled by the constant value \\(\\sigma^2\\) produces the homoskedastic covariance matrix \\(\\boldsymbol V\\) (elements on the main diagonal are \\(\\sigma^2\\) and zero outside). If, instead, we consider an heteroskedastic covariance matrix then, for example, we could assume that the variance is proportional to the level of the covariate. This assumption can be summarised as:\n\\[ \\boldsymbol V = \\sigma^2 \\times X \\times \\boldsymbol I,\\]\nwhere the product of the identity matrix \\(\\boldsymbol I\\) and the covariate-specific values \\(\\sigma^2 \\times X\\) produces the heteroskedastic covariance matrix \\(\\boldsymbol V\\) (elements on the main diagonal are \\(\\sigma^2 \\times X\\) and zero outside). With a couple of small adjustments, we can modify the JAGS code in order to accommodate a variance structure in which variance is proportional to the predictor variable. Note that since JAGS works with precision (\\(\\tau=\\frac{1}{\\sigma^2}\\)), I have elected to express the predictor as \\(\\frac{1}{x}\\). This way the weightings are compatible with precision rather than variance. In previous tutorials, we have used a flat, uniform distribution \\([0,100]\\) for variance priors. Whilst this is a reasonable choice for a non-informative prior, Gelman and others (2006) suggest that half-cauchy priors are more appropriate when the number of groups is low.\n\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation weighted by \\(1\\) on the value of the covariate (\\(\\sigma \\times \\omega\\)). The expected values (\\(\\mu\\)) are themselves determined by the linear predictor (\\(\\beta_0 + \\beta_1x\\)). In this case, \\(\\beta_0\\) represents the mean of the first group and the set of \\(\\beta\\)’s represent the differences between each other group and the first group. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma \\times \\omega), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We note that we can also indirectly specify the prior on \\(\\sigma\\) by expressing the standard deviation as the ratio between two variable: \\(\\sigma=\\frac{z}{\\sqrt{\\chi}}\\). The numerator is a zero-truncated normally distributed variable \\(z \\sim N(0, 0.04) I(0,)\\), while the denominator is the square root of a variable distributed according to a Gamma distribution \\(\\chi \\sim \\text{Gamma}(0.5,0.5)\\) (equivalent to a \\(\\chi^2\\) distribution with \\(1\\) degrees of freedom).\nWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Note the following example as group means calculated as derived posteriors.\n\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau*(1/x[i]))\r+ mu[i] \u0026lt;- beta0+beta1*x[i]\r+ }\r+ + #Priors and derivatives\r+ beta0 ~ dnorm(0,1.0E-6)\r+ beta1 ~ dnorm(0,1.0E-6)\r+ + sigma \u0026lt;- z/sqrt(chSq) # prior for sigma; cauchy = normal/sqrt(chi^2)\r+ z ~ dnorm(0, 0.04)I(0,)\r+ chSq ~ dgamma(0.5, 0.5) # chi^2 with 1 d.f.\r+ tau \u0026lt;- pow(sigma, -2)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;heteroskModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; data.het.list \u0026lt;- with(data.het, list(y = y, x = x, n = nrow(data.het)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.het.r2jags \u0026lt;- jags(data = data.het.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;heteroskModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 16\rUnobserved stochastic nodes: 4\rTotal graph size: 111\rInitializing model\r\u0026gt; \u0026gt; print(data.het.r2jags)\rInference for Bugs model at \u0026quot;heteroskModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 41.492 2.571 36.510 39.844 41.466 43.160 46.599 1.001 15000\rbeta1 1.114 0.401 0.313 0.857 1.112 1.371 1.913 1.001 15000\rsigma 3.070 0.629 2.119 2.627 2.969 3.410 4.592 1.002 1300\rdeviance 110.901 2.744 107.742 108.871 110.200 112.216 117.874 1.002 2800\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.8 and DIC = 114.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\).\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.het.r2jags, parms = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;))\r\u0026gt; traplot(data.het.r2jags, parms = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters (such as \\(\\beta\\)s).\n\u0026gt; data.mcmc = as.mcmc(data.het.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta0 2 3938 3746 1.050 beta1 2 3729 3746 0.995 deviance 2 3770 3746 1.010 sigma 4 4643 3746 1.240 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta0 2 3853 3746 1.030 beta1 2 3895 3746 1.040 deviance 2 3729 3746 0.995 sigma 3 4346 3746 1.160 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta0 beta1 deviance sigma\rLag 0 1.000000000 1.0000000000 1.000000000 1.000000000\rLag 1 0.011777589 0.0071404620 0.229687388 0.247278554\rLag 5 0.006349593 0.0032513419 -0.000699578 0.011972761\rLag 10 -0.001248639 -0.0002634626 -0.010327446 -0.001271626\rLag 50 0.018019858 -0.0055775204 -0.013066989 0.010275604\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. For more complex models (those that contain multiple effects), it is also advisable to plot the residuals against each of the individual predictors. For sampling designs that involve sample collection over space or time, it is also a good idea to explore whether there are any temporal or spatial patterns in the residuals.\nThere are numerous situations (e.g. when applying specific variance-covariance structures to a model) where raw residuals do not reflect the interior workings of the model. Typically, this is because they do not take into account the variance-covariance matrix or assume a very simple variance-covariance matrix. Since the purpose of exploring residuals is to evaluate the model, for these cases, it is arguably better to draw conclusions based on standardized (or studentised) residuals. Unfortunately the definitions of standardised and studentised residuals appears to vary and the two terms get used interchangeably. I will adopt the following definitions:\n\rStandardised residuals. The raw residuals divided by the true standard deviation of the residuals (which of course is rarely known).\n\rStudentised residuals. The raw residuals divided by the standard deviation of the residuals. Note that externally studentised residuals are calculated by dividing the raw residuals by a unique standard deviation for each observation that is calculated from regressions having left each successive observation out.\n\rPearson residuals. The raw residuals divided by the standard deviation of the response variable.\n\r\rhe mark of a good model is being able to predict well. In an ideal world, we would have sufficiently large sample size as to permit us to hold a fraction (such as \\(25\\)%) back thereby allowing us to train the model on \\(75\\)% of the data and then see how well the model can predict the withheld \\(25\\)%. Unfortunately, such a luxury is still rare. The next best option is to see how well the model can predict the observed data. Models tend to struggle most with the extremes of trends and have particular issues when the extremes approach logical boundaries (such as zero for count data and standard deviations). We can use the fitted model to generate random predicted observations and then explore some properties of these compared to the actual observed data.\nRather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model. Residuals are not computed directly within JAGS. However, we can calculate them manually form the posteriors.\n\u0026gt; mcmc = data.het.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.het$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data.het$y - fit\r\u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThe above residual plot would make us believe that we had a homogeneity of variance issue (which we thought we were addressing by defining a model that allowed the variance to be proportional to the predictor). This is because we have plotted the raw residuals rather than residuals that have been standardized by the variances. The above plot is also what the residual plot would look like if we had not made any attempt to define a model in which the variance was related to the predictor. Whenever we fit a model that incorporates changes to the variance-covariance structures, we should explore standardised residuals. In this case, we should divide the residuals by sigma and then divide by the square-root of the weights.\n\\[ Res_i = \\frac{Y_i - \\mu_i}{\\sigma \\times \\sqrt{\\omega}}\\]\n\u0026gt; library(dplyr)\r\u0026gt; library(tidyr)\r\u0026gt; mcmc = data.het.r2jags$BUGSoutput$sims.matrix\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.het$y, \u0026quot;-\u0026quot;)\r\u0026gt; resid = apply(resid, 2, median)/(median(mcmc[, \u0026quot;sigma\u0026quot;]) * sqrt(data.het$x))\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; \u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThis is certainly an improvement. Nevertheless, there is still an indication of a relationship between mean and variance. We could attempt to further address this by refining \\(\\omega\\) in the Bayesian model. That is, rather than indicate that variance is proportional to \\(x\\), we could indicate that variance is proportional to \\(x^2\\) (as an example) - we will leave this as an exercise for the reader. Residuals against predictors.\n\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.het$x)) + theme_classic()\rLets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.het.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.het), fit[i, ],\r+ mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep), fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_density(data = data.het, aes(x = y, fill = \u0026quot;Obs\u0026quot;),\r+ alpha = 0.5) + theme_classic()\r\rParameter estimates\rFirst, we look at the results from the model.\n\u0026gt; print(data.het.r2jags)\rInference for Bugs model at \u0026quot;heteroskModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 41.492 2.571 36.510 39.844 41.466 43.160 46.599 1.001 15000\rbeta1 1.114 0.401 0.313 0.857 1.112 1.371 1.913 1.001 15000\rsigma 3.070 0.629 2.119 2.627 2.969 3.410 4.592 1.002 1300\rdeviance 110.901 2.744 107.742 108.871 110.200 112.216 117.874 1.002 2800\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.8 and DIC = 114.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.het.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta0 41.5 2.57 36.5 46.6 2 beta1 1.11 0.401 0.338 1.94\r3 deviance 111. 2.74 108. 116. 4 sigma 3.07 0.629 2.00 4.35\rConclusions\nA one unit increase in \\(x\\) is associated with a \\(1.11\\) change in \\(y\\). That is, \\(y\\) declines at a rate of \\(1.11\\) per unit increase in \\(x\\). The \\(95\\)% confidence interval for the slope does not overlap with \\(0\\) implying a significant effect of \\(x\\) on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.het.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta1\u0026quot;)])\r[1] 0.0092\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = data.het.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = seq(min(data.het$x, na.rm = TRUE), max(data.het$x,\r+ na.rm = TRUE), len = 1000))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data.het,\r+ aes(y = y, x = x), color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data.het\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data.het$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X\u0026quot;) +\r+ theme_classic()\r\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- data.het.r2jags$BUGSoutput$sims.matrix\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data.het$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.244 0.108 0.0309 0.440\r\u0026gt; \u0026gt; # for comparison with frequentist summary(lm(y ~ x, data.het))\r\rHeteroskedasticity with categorical predictors\rFor regression models that include a categorical variable (e.g. ANOVA), heterogeneity manifests as vastly different variances for different levels (treatment groups) of the categorical variable. Recall, that this is diagnosed from the relative size of boxplots. Whilst, the degree of group variability may not be related to the means of the groups, having wildly different variances does lead to an increase in standard errors and thus a lowering of power. In such cases, we would like to be able to indicate that the variances should be estimated separately for each group. That is the variance term is multiplied by a different number for each group. The appropriate matrix is referred to as an Identity matrix. Again, to assist in the explanation some fabricated ANOVA data - data that has heteroscadasticity by design - will be useful.\n\u0026gt; set.seed(126)\r\u0026gt; ngroups \u0026lt;- 5 #number of populations\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; pop.means \u0026lt;- c(40, 45, 55, 40, 30) #population mean length\r\u0026gt; sigma \u0026lt;- rep(c(6, 4, 2, 0.5, 1), each = nsample) #residual standard deviation\r\u0026gt; n \u0026lt;- ngroups * nsample #total sample size\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; x \u0026lt;- gl(ngroups, nsample, n, lab = LETTERS[1:5]) #factor\r\u0026gt; means \u0026lt;- rep(pop.means, rep(nsample, ngroups))\r\u0026gt; X \u0026lt;- model.matrix(~x - 1) #create a design matrix\r\u0026gt; y \u0026lt;- as.numeric(X %*% pop.means + eps)\r\u0026gt; data.het1 \u0026lt;- data.frame(y, x)\r\u0026gt; boxplot(y ~ x, data.het1)\r\u0026gt; \u0026gt; plot(lm(y ~ x, data.het1), which = 3)\rIt is clear that there is gross heteroskedasticity. The residuals are obviously more spread in some groups than others yet there is no real pattern with means (the residual plot does not show an obvious wedge). Note, for assessing homogeneity of variance, it is best to use the standardised residuals. It turns out that if we switch over to maximum (log) likelihood estimation methods, we can model in a within-group heteroskedasticity structure rather than just assume one very narrow form of variance structure. Lets take a step back and reflect on our simple ANOVA (regression) model that has five groups each with \\(10\\) observations:\n\\[ y_i = \\mu + \\alpha_i + \\epsilon, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon \\sim N(0, \\sigma^2). \\]\nThis is shorthand notation to indicate that the response variable is being modelled against a specific linear predictor and that the residuals follow a normal distribution with a certain variance (that is the same for each group). Rather than assume that the variance of each group is the same, we could relax this a little so as to permit different levels of variance per group:\n\\[ \\epsilon \\sim N(0, \\sigma^2_i).\\]\nTo achieve this, we actually multiply the variance matrix by a weighting matrix, where the weights associated with each group are determined by the inverse of the ratio of each group to the first (reference) group:\n\\[ \\epsilon \\sim N(0, \\sigma^2_i \\times \\omega).\\]\nSo returning to our five groups of \\(10\\) observations example, the weights would be determined as:\n\u0026gt; data.het1.sd \u0026lt;- with(data.het1, tapply(y, x, sd))\r\u0026gt; 1/(data.het1.sd[1]/data.het1.sd)\rA B C D E 1.0000000 0.6909012 0.4140893 0.1426207 0.3012881 \rThe weights determine the relative amount of each observation that goes into calculating variances. The basic premise is that those with lower variances are likely to be more precise and therefore should have greatest contribution to variance calculations.\nModel fitting\r\u0026gt; modelString2 = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau[x[i]])\r+ mu[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ + #Priors and derivatives\r+ for (i in 1:ngroups) {\r+ beta[i] ~ dnorm(0,1.0E-6)\r+ + sigma[i] \u0026lt;- z[i]/sqrt(chSq[i])\r+ z[i] ~ dnorm(0, 0.04)I(0,)\r+ chSq[i] ~ dgamma(0.5, 0.5)\r+ tau[i] \u0026lt;- pow(sigma[i], -2)\r+ }\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;heteroskModel2.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X = model.matrix(~x, data.het1)\r\u0026gt; data.het1.list \u0026lt;- with(data.het1, list(y = y, x = as.numeric(x), X = X,\r+ n = nrow(data.het1), ngroups = ncol(X)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.het1.r2jags \u0026lt;- jags(data = data.het1.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;heteroskModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 50\rUnobserved stochastic nodes: 15\rTotal graph size: 444\rInitializing model\r\u0026gt; \u0026gt; print(data.het1.r2jags)\rInference for Bugs model at \u0026quot;heteroskModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.282 1.227 37.861 39.518 40.278 41.044 42.731 1.001 11000\rbeta[2] 4.088 1.508 1.063 3.115 4.095 5.059 7.063 1.001 5000\rbeta[3] 14.553 1.336 11.874 13.714 14.566 15.402 17.177 1.001 5600\rbeta[4] -0.655 1.242 -3.118 -1.425 -0.656 0.118 1.804 1.001 11000\rbeta[5] -10.364 1.286 -12.875 -11.173 -10.353 -9.550 -7.830 1.001 12000\rsigma[1] 3.748 0.971 2.378 3.062 3.583 4.231 6.071 1.001 13000\rsigma[2] 2.647 0.729 1.640 2.143 2.504 2.995 4.461 1.001 5400\rsigma[3] 1.629 0.456 1.001 1.314 1.541 1.846 2.767 1.001 4000\rsigma[4] 0.570 0.169 0.346 0.454 0.537 0.647 1.001 1.001 3500\rsigma[5] 1.181 0.336 0.727 0.950 1.118 1.342 2.021 1.001 7100\rdeviance 182.822 5.288 174.824 178.961 182.076 185.810 195.061 1.001 11000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 14.0 and DIC = 196.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\r\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.het1.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(data.het1.r2jags, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots.\n\r\rModel validation\r\u0026gt; mcmc = data.het1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.het1$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data.het1$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThe above residual plot would make us believe that we had a homogeneity of variance issue (which we thought we were addressing by defining a model that allowed the variance to be proportional to the predictor). This is because we have plotted the raw residuals rather than residuals that have been standardized by the variances. The above plot is also what the residual plot would look like if we had not made any attempt to define a model in which the variance was related to the predictor. Whenever we fit a model that incorporates changes to the variance-covariance structures, we should explore standardized residuals. In this case, we should divide the residuals by the appropriate sigma for associated with that group (level of predictor).\n\\[ Res_{ij} = \\frac{Y_{ij} - \\mu_j}{\\sigma_j}\\]\n\u0026gt; mcmc = data.het1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; Xmat = model.matrix(~x, data.het1)\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.het1$y, \u0026quot;-\u0026quot;)\r\u0026gt; wch = grep(\u0026quot;sigma\u0026quot;, colnames(mcmc))\r\u0026gt; resid = apply(resid, 2, median)/rep(apply(mcmc[, wch], 2, median), table(data.het1$x))\r\u0026gt; # resid = apply(resid,2,median)/(median(mcmc[,\u0026#39;sigma\u0026#39;]) * sqrt(data.het1$x))\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThis is certainly an improvement. Nevertheless, there is still an indication of a relationship between mean and variance. We could attempt to further address this by refining \\(\\omega\\) in the Bayesian model. That is, rather than indicate that variance is proportional to \\(x\\), we could indicate that variance is proportional to \\(x^2\\) (as an example) - we will leave this as an exercise for the reader. Residuals against predictors.\n\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.het1$x)) + theme_classic()\rLets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.het1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data.het1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; wch = grep(\u0026quot;sigma\u0026quot;, colnames(mcmc))\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.het1), fit[i, ],\r+ mcmc[i, wch[as.numeric(data.het1$x[i])]]))\r\u0026gt; newdata = data.frame(x = data.het1$x, yRep) %\u0026gt;% gather(key = Sample, value = Value,\r+ -x)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = x, fill = \u0026quot;Model\u0026quot;), alpha = 0.5) +\r+ geom_violin(data = data.het1, aes(y = y, x = x, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) +\r+ geom_point(data = data.het1, aes(y = y, x = x), position = position_jitter(width = 0.1,\r+ height = 0), color = \u0026quot;black\u0026quot;) + theme_classic()\rParameter estimates\rFirst, we look at the results from the model.\n\u0026gt; print(data.het1.r2jags)\rInference for Bugs model at \u0026quot;heteroskModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.282 1.227 37.861 39.518 40.278 41.044 42.731 1.001 11000\rbeta[2] 4.088 1.508 1.063 3.115 4.095 5.059 7.063 1.001 5000\rbeta[3] 14.553 1.336 11.874 13.714 14.566 15.402 17.177 1.001 5600\rbeta[4] -0.655 1.242 -3.118 -1.425 -0.656 0.118 1.804 1.001 11000\rbeta[5] -10.364 1.286 -12.875 -11.173 -10.353 -9.550 -7.830 1.001 12000\rsigma[1] 3.748 0.971 2.378 3.062 3.583 4.231 6.071 1.001 13000\rsigma[2] 2.647 0.729 1.640 2.143 2.504 2.995 4.461 1.001 5400\rsigma[3] 1.629 0.456 1.001 1.314 1.541 1.846 2.767 1.001 4000\rsigma[4] 0.570 0.169 0.346 0.454 0.537 0.647 1.001 1.001 3500\rsigma[5] 1.181 0.336 0.727 0.950 1.118 1.342 2.021 1.001 7100\rdeviance 182.822 5.288 174.824 178.961 182.076 185.810 195.061 1.001 11000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 14.0 and DIC = 196.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; tidyMCMC(as.mcmc(data.het1.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 11 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 40.3 1.23 37.9 42.7 2 beta[2] 4.09 1.51 0.980 6.97 3 beta[3] 14.6 1.34 12.0 17.3 4 beta[4] -0.655 1.24 -3.15 1.76 5 beta[5] -10.4 1.29 -12.9 -7.86 6 deviance 183. 5.29 174. 194. 7 sigma[1] 3.75 0.971 2.23 5.72 8 sigma[2] 2.65 0.729 1.53 4.12 9 sigma[3] 1.63 0.456 0.906 2.54 10 sigma[4] 0.570 0.169 0.313 0.905\r11 sigma[5] 1.18 0.336 0.656 1.82 \rConclusions\n\rthe mean of the first group (A) is \\(40.3\\)\n\rthe mean of the second group (B) is \\(4.12\\) units greater than (A)\n\rthe mean of the third group (C) is \\(14.6\\) units greater than (A)\n\rthe mean of the forth group (D) is \\(-0.637\\) units greater (i.e. less) than (A)\n\rthe mean of the fifth group (E) is \\(-10.3\\) units greater (i.e. less) than (A)\n\r\rThe \\(95\\)% confidence interval for the effects of B, C and E do not overlap with \\(0\\) implying a significant difference between group A and groups B, C and E. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmc = data.het1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; for (i in grep(\u0026quot;beta\u0026quot;, colnames(mcmc), value = TRUE)) print(paste(i, mcmcpvalue(mcmc[,i])))\r[1] \u0026quot;beta[1] 0\u0026quot;\r[1] \u0026quot;beta[2] 0.0116\u0026quot;\r[1] \u0026quot;beta[3] 0\u0026quot;\r[1] \u0026quot;beta[4] 0.567133333333333\u0026quot;\r[1] \u0026quot;beta[5] 0\u0026quot;\r\u0026gt; mcmcpvalue(mcmc[, grep(\u0026quot;beta\u0026quot;, colnames(mcmc))])\r[1] 0\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\r\u0026gt; mcmc = data.het1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = levels(data.het1$x))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data.het1,\r+ aes(y = y, x = x), color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data.het1\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data.het1$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\r\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2006. “Prior Distributions for Variance Parameters in Hierarchical Models (Comment on Article by Browne and Draper).” Bayesian Analysis 1 (3): 515–34.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1581127994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581127994,"objectID":"c011c205dd76be6207cf502b38fae179","permalink":"/jags/heterogeneity-jags/heterogeneity-jags/","publishdate":"2020-02-07T21:13:14-05:00","relpermalink":"/jags/heterogeneity-jags/heterogeneity-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","heterogeneity","heteroskedasticity"],"title":"Variance Heterogeneity - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","heterogeneity","STAN","heteroskedasticity"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rUp until now (in the proceeding tutorials), the focus has been on models that adhere to specific assumptions about the underlying populations (and data). Indeed, both before and immediately after fitting these models, I have stressed the importance of evaluating and validating the proposed and fitted models to ensure reliability of the models. It is now worth us revisiting those fundamental assumptions as well as exploring the options that are available when the populations (data) do not conform. Let’s explore a simple linear regression model to see how each of the assumptions relate to the model.\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0, \\sigma^2).\\]\nThe above simple statistical model models the linear relationship of \\(y_i\\) against \\(x_i\\). The residuals (\\(\\epsilon\\)) are assumed to be normally distributed with a mean of zero and a constant (yet unknown) variance (\\(\\sigma\\), homogeneity of variance). The residuals (and thus observations) are also assumed to all be independent.\nHomogeneity of variance and independence are encapsulated within the single symbol for variance (\\(\\sigma^2\\)). In assuming equal variances and independence, we are actually making an assumption about the variance-covariance structure of the populations (and thus residuals). Specifically, we assume that all populations are equally varied and thus can be represented well by a single variance term (all diagonal values in a \\(N\\times N\\) covariance matrix are the same, \\(\\sigma^2\\)) and the covariances between each population are zero (off diagonals). In simple regression, each observation (data point) represents a single observation drawn (sampled) from an entire population of possible observations. The above covariance structure thus assumes that the covariance between each population (observation) is zero - that is, each observation is completely independent of each other observation. Whilst it is mathematically convenient when data conform to these conditions (normality, homogeneity of variance, independence and linearity), data often violate one or more of these assumptions. In the following, I want to discuss and explore the causes and options for dealing with non-compliance to each of these conditions. By gaining a better understanding of how the various model fitting engines perform their task, we are better equipped to accommodate aspects of the data that don’t otherwise conform to the simple regression assumptions. In this tutorial we specifically focus on the topic of heterogeneity of the variance.\n\r\rDealing with heterogeneity\rThe validity and reliability of the above linear models are very much dependent on variance homogeneity. In particular, variances that increase (or decrease) with a change in expected values are substantial violations. Whilst non-normality can also be a source of heterogeneity and therefore normalising can address both issues, heterogeneity can also be independent of normality. Similarly, generalised linear models (that accommodate alternative residual distributions - such as Poisson, Binomial, Gamma, etc) can be useful for more appropriate modelling of both the distribution and variance of a model. However, for Gaussian (normal) models in which there is evidence of heterogeneity of variance, yet no evidence of non-normality, it is also possible to specifically model in an alternative variance structure. For example, we can elect to allow variance to increase proportionally to a covariate. To assist us in the following demonstration, we will generate another data set - one that has heteroskedasticity (unequal variance) by design. Rather than draw each residual (and thus observation) from a normal distribution with a constant standard deviation), we will draw the residuals from normal distributions whose variance is proportional to the \\(X\\) predictor.\n\u0026gt; set.seed(126)\r\u0026gt; n \u0026lt;- 16\r\u0026gt; a \u0026lt;- 40 #intercept\r\u0026gt; b \u0026lt;- 1.5 #slope\r\u0026gt; x \u0026lt;- 1:n #values of the year covariate\r\u0026gt; sigma \u0026lt;- 1.5 * x\r\u0026gt; sigma\r[1] 1.5 3.0 4.5 6.0 7.5 9.0 10.5 12.0 13.5 15.0 16.5 18.0 19.5 21.0 22.5\r[16] 24.0\r\u0026gt; \u0026gt; eps \u0026lt;- rnorm(n, mean = 0, sd = sigma) #residuals\r\u0026gt; y \u0026lt;- a + b * x + eps #response variable\r\u0026gt; # OR\r\u0026gt; y \u0026lt;- (model.matrix(~x) %*% c(a, b)) + eps\r\u0026gt; data.het \u0026lt;- data.frame(y = round(y, 1), x) #dataset\r\u0026gt; head(data.het) #print out the first six rows of the data set\ry x\r1 42.1 1\r2 44.2 2\r3 41.2 3\r4 51.7 4\r5 43.5 5\r6 48.3 6\r\u0026gt; \u0026gt; # scatterplot of y against x\r\u0026gt; library(car)\r\u0026gt; scatterplot(y ~ x, data.het)\r\u0026gt; \u0026gt; # regular simple linear regression\r\u0026gt; data.het.lm \u0026lt;- lm(y ~ x, data.het)\r\u0026gt; \u0026gt; # plot of standardised residuals\r\u0026gt; plot(rstandard(data.het.lm) ~ fitted(data.het.lm))\r\u0026gt; \u0026gt; # plot of standardized residuals against the predictor\r\u0026gt; plot(rstandard(data.het.lm) ~ x)\rThe above scatterplot suggests that variance may increase with increasing \\(X\\). The residual plot (using standardised residuals) suggests that mean and variance could be related - there is a hint of a wedge-shaped pattern. Importantly, the plot of standardised residuals against the predictor shows the same pattern as the residual plot implying that heterogeneity is likely to be due a relationship between variance \\(X\\). That is, an increase in \\(X\\) is associated with an increase in variance. In response to this, we could incorporate an alternative variance structure. The simple model we fit earlier assumed that the expected values were all drawn from normal distributions with the same level of precision \\(\\tau\\) and therefore variance. This assumption is often summarised as:\n\\[ \\boldsymbol V = \\sigma^2 \\times \\boldsymbol I,\\]\nwhere \\(\\boldsymbol I\\) is the \\(N \\times N\\) identity matrix (elements on the main diagonal are one and zero outside) which multipled by the constant value \\(\\sigma^2\\) produces the homoskedastic covariance matrix \\(\\boldsymbol V\\) (elements on the main diagonal are \\(\\sigma^2\\) and zero outside). If, instead, we consider an heteroskedastic covariance matrix then, for example, we could assume that the variance is proportional to the level of the covariate. This assumption can be summarised as:\n\\[ \\boldsymbol V = \\sigma^2 \\times X \\times \\boldsymbol I,\\]\nwhere the product of the identity matrix \\(\\boldsymbol I\\) and the covariate-specific values \\(\\sigma^2 \\times X\\) produces the heteroskedastic covariance matrix \\(\\boldsymbol V\\) (elements on the main diagonal are \\(\\sigma^2 \\times X\\) and zero outside). With a couple of small adjustments, we can modify the JAGS code in order to accommodate a variance structure in which variance is proportional to the predictor variable. Note that since JAGS works with precision (\\(\\tau=\\frac{1}{\\sigma^2}\\)), I have elected to express the predictor as \\(\\frac{1}{x}\\). This way the weightings are compatible with precision rather than variance. In previous tutorials, we have used a flat, uniform distribution \\([0,100]\\) for variance priors. Whilst this is a reasonable choice for a non-informative prior, Gelman and others (2006) suggest that half-cauchy priors are more appropriate when the number of groups is low.\n\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation weighted by \\(1\\) on the value of the covariate (\\(\\sigma \\times \\omega\\)). The expected values (\\(\\mu\\)) are themselves determined by the linear predictor (\\(\\beta_0 + \\beta_1x\\)). In this case, \\(\\beta_0\\) represents the mean of the first group and the set of \\(\\beta\\)’s represent the differences between each other group and the first group. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma \\times \\omega), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We proceed to code the model into STAN\n\u0026gt; modelString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ vector [n] w;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma*w);\r+ + // Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma*w[i]); + }\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;heteroskModel.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~x, data.het)\r\u0026gt; data.het.list \u0026lt;- with(data.het, list(y = y, X = Xmat, w = sqrt(data.het$x),\r+ n = nrow(data.het), nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface. Note that the first time stan is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.het.rstan \u0026lt;- stan(data = data.het.list, file = \u0026quot;heteroskModel.stan\u0026quot;, chains = nChains, pars = params, iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;heteroskModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.058 seconds (Warm-up)\rChain 1: 0.077 seconds (Sampling)\rChain 1: 0.135 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;heteroskModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.057 seconds (Warm-up)\rChain 2: 0.079 seconds (Sampling)\rChain 2: 0.136 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.het.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: heteroskModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 41.43 0.09 2.57 36.19 39.83 41.49 43.09 46.48 855 1\rbeta[2] 1.13 0.01 0.41 0.31 0.87 1.13 1.39 1.98 806 1\rsigma 3.06 0.02 0.62 2.13 2.63 2.98 3.36 4.57 934 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 15:33:02 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots.\n\u0026gt; library(mcmcplots)\r\u0026gt; mcmc = As.mcmc.list(data.het.rstan)\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r[[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; stan_ac(data.het.rstan, pars = c(\u0026quot;beta\u0026quot;))\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\u0026gt; stan_rhat(data.het.rstan, pars = c(\u0026quot;beta\u0026quot;))\r\u0026gt; stan_ess(data.het.rstan, pars = c(\u0026quot;beta\u0026quot;))\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model. Residuals are not computed directly within rstan However, we can calculate them manually form the posteriors.\n\u0026gt; mcmc = as.matrix(data.het.rstan)[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.het$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data.het$y - fit\r\u0026gt; \u0026gt; library(ggplot2)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThe above residual plot would make us believe that we had a homogeneity of variance issue (which we thought we were addressing by defining a model that allowed the variance to be proportional to the predictor). This is because we have plotted the raw residuals rather than residuals that have been standardized by the variances. The above plot is also what the residual plot would look like if we had not made any attempt to define a model in which the variance was related to the predictor. Whenever we fit a model that incorporates changes to the variance-covariance structures, we should explore standardised residuals. In this case, we should divide the residuals by sigma and then divide by the square-root of the weights.\n\\[ Res_i = \\frac{Y_i - \\mu_i}{\\sigma \\times \\sqrt{\\omega}}\\]\n\u0026gt; library(dplyr)\r\u0026gt; library(tidyr)\r\u0026gt; mcmc = as.matrix(data.het.rstan)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = -1 * sweep(fit, 2, data.het$y, \u0026quot;-\u0026quot;)\r\u0026gt; resid = apply(resid, 2, median)/(median(mcmc[, \u0026quot;sigma\u0026quot;]) * sqrt(data.het$x))\r\u0026gt; fit = apply(fit, 2, median)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThis is certainly an improvement. Nevertheless, there is still an indication of a relationship between mean and variance. We could attempt to further address this by refining \\(\\omega\\) in the Bayesian model. That is, rather than indicate that variance is proportional to \\(x\\), we could indicate that variance is proportional to \\(x^2\\) (as an example) - we will leave this as an exercise for the reader. Residuals against predictors.\n\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.het$x)) + theme_classic()\rLets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.matrix(data.het.rstan)\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.het), fit[i, ],\r+ mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep), fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_density(data = data.het, aes(x = y, fill = \u0026quot;Obs\u0026quot;),\r+ alpha = 0.5) + theme_classic()\r\rParameter estimates\rFirst, we look at the results from the model.\n\u0026gt; print(data.het.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: heteroskModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 41.43 0.09 2.57 36.19 39.83 41.49 43.09 46.48 855 1\rbeta[2] 1.13 0.01 0.41 0.31 0.87 1.13 1.39 1.98 806 1\rsigma 3.06 0.02 0.62 2.13 2.63 2.98 3.36 4.57 934 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 15:33:02 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.het.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 41.4 2.57 36.6 46.8 2 beta[2] 1.13 0.410 0.277 1.92\r3 sigma 3.06 0.624 2.07 4.40\rConclusions\nA one unit increase in \\(x\\) is associated with a \\(1.11\\) change in \\(y\\). That is, \\(y\\) declines at a rate of \\(1.11\\) per unit increase in \\(x\\). The \\(95\\)% confidence interval for the slope does not overlap with \\(0\\) implying a significant effect of \\(x\\) on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.het.rstan)[, c(\u0026quot;beta[2]\u0026quot;)])\r[1] 0.0105\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = as.matrix(data.het.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = seq(min(data.het$x, na.rm = TRUE), max(data.het$x,\r+ na.rm = TRUE), len = 1000))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data.het,\r+ aes(y = y, x = x), color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data.het\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data.het$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X\u0026quot;) +\r+ theme_classic()\r\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.het.rstan)\r\u0026gt; Xmat = model.matrix(~x, data.het)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;,\u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data.het$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.248 0.109 0.0101 0.424\r\u0026gt; \u0026gt; # for comparison with frequentist summary(lm(y ~ x, data.het))\r\rHeteroskedasticity with categorical predictors\rFor regression models that include a categorical variable (e.g. ANOVA), heterogeneity manifests as vastly different variances for different levels (treatment groups) of the categorical variable. Recall, that this is diagnosed from the relative size of boxplots. Whilst, the degree of group variability may not be related to the means of the groups, having wildly different variances does lead to an increase in standard errors and thus a lowering of power. In such cases, we would like to be able to indicate that the variances should be estimated separately for each group. That is the variance term is multiplied by a different number for each group. The appropriate matrix is referred to as an Identity matrix. Again, to assist in the explanation some fabricated ANOVA data - data that has heteroscadasticity by design - will be useful.\n\u0026gt; set.seed(126)\r\u0026gt; ngroups \u0026lt;- 5 #number of populations\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; pop.means \u0026lt;- c(40, 45, 55, 40, 30) #population mean length\r\u0026gt; sigma \u0026lt;- rep(c(6, 4, 2, 0.5, 1), each = nsample) #residual standard deviation\r\u0026gt; n \u0026lt;- ngroups * nsample #total sample size\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; x \u0026lt;- gl(ngroups, nsample, n, lab = LETTERS[1:5]) #factor\r\u0026gt; means \u0026lt;- rep(pop.means, rep(nsample, ngroups))\r\u0026gt; X \u0026lt;- model.matrix(~x - 1) #create a design matrix\r\u0026gt; y \u0026lt;- as.numeric(X %*% pop.means + eps)\r\u0026gt; data.het1 \u0026lt;- data.frame(y, x)\r\u0026gt; boxplot(y ~ x, data.het1)\r\u0026gt; \u0026gt; plot(lm(y ~ x, data.het1), which = 3)\rIt is clear that there is gross heteroskedasticity. The residuals are obviously more spread in some groups than others yet there is no real pattern with means (the residual plot does not show an obvious wedge). Note, for assessing homogeneity of variance, it is best to use the standardised residuals. It turns out that if we switch over to maximum (log) likelihood estimation methods, we can model in a within-group heteroskedasticity structure rather than just assume one very narrow form of variance structure. Lets take a step back and reflect on our simple ANOVA (regression) model that has five groups each with \\(10\\) observations:\n\\[ y_i = \\mu + \\alpha_i + \\epsilon, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon \\sim N(0, \\sigma^2). \\]\nThis is shorthand notation to indicate that the response variable is being modelled against a specific linear predictor and that the residuals follow a normal distribution with a certain variance (that is the same for each group). Rather than assume that the variance of each group is the same, we could relax this a little so as to permit different levels of variance per group:\n\\[ \\epsilon \\sim N(0, \\sigma^2_i).\\]\nTo achieve this, we actually multiply the variance matrix by a weighting matrix, where the weights associated with each group are determined by the inverse of the ratio of each group to the first (reference) group:\n\\[ \\epsilon \\sim N(0, \\sigma^2_i \\times \\omega).\\]\nSo returning to our five groups of \\(10\\) observations example, the weights would be determined as:\n\u0026gt; data.het1.sd \u0026lt;- with(data.het1, tapply(y, x, sd))\r\u0026gt; 1/(data.het1.sd[1]/data.het1.sd)\rA B C D E 1.0000000 0.6909012 0.4140893 0.1426207 0.3012881 \rThe weights determine the relative amount of each observation that goes into calculating variances. The basic premise is that those with lower variances are likely to be more precise and therefore should have greatest contribution to variance calculations.\nModel fitting\r\u0026gt; modelString2 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ vector\u0026lt;lower=0\u0026gt;[nX] sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ vector\u0026lt;lower=0\u0026gt;[n] sig;\r+ + mu = X*beta;\r+ sig = X*sigma;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sig);\r+ + // Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sig[i]); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;heteroskModel2.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~x, data.het1)\r\u0026gt; data.het1.list \u0026lt;- with(data.het1, list(y = y, X = Xmat, n = nrow(data.het1),\r+ nX = ncol(Xmat)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow run the STAN code via the rstan interface. Note that the first time STAN is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.het1.rstan \u0026lt;- stan(data = data.het1.list, file = \u0026quot;heteroskModel2.stan\u0026quot;,\r+ chains = nChains, iter = numSavedSteps, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;heteroskModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 2000 [ 0%] (Warmup)\rChain 1: Iteration: 200 / 2000 [ 10%] (Warmup)\rChain 1: Iteration: 400 / 2000 [ 20%] (Warmup)\rChain 1: Iteration: 501 / 2000 [ 25%] (Sampling)\rChain 1: Iteration: 700 / 2000 [ 35%] (Sampling)\rChain 1: Iteration: 900 / 2000 [ 45%] (Sampling)\rChain 1: Iteration: 1100 / 2000 [ 55%] (Sampling)\rChain 1: Iteration: 1300 / 2000 [ 65%] (Sampling)\rChain 1: Iteration: 1500 / 2000 [ 75%] (Sampling)\rChain 1: Iteration: 1700 / 2000 [ 85%] (Sampling)\rChain 1: Iteration: 1900 / 2000 [ 95%] (Sampling)\rChain 1: Iteration: 2000 / 2000 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.127 seconds (Warm-up)\rChain 1: 0.275 seconds (Sampling)\rChain 1: 0.402 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;heteroskModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 2000 [ 0%] (Warmup)\rChain 2: Iteration: 200 / 2000 [ 10%] (Warmup)\rChain 2: Iteration: 400 / 2000 [ 20%] (Warmup)\rChain 2: Iteration: 501 / 2000 [ 25%] (Sampling)\rChain 2: Iteration: 700 / 2000 [ 35%] (Sampling)\rChain 2: Iteration: 900 / 2000 [ 45%] (Sampling)\rChain 2: Iteration: 1100 / 2000 [ 55%] (Sampling)\rChain 2: Iteration: 1300 / 2000 [ 65%] (Sampling)\rChain 2: Iteration: 1500 / 2000 [ 75%] (Sampling)\rChain 2: Iteration: 1700 / 2000 [ 85%] (Sampling)\rChain 2: Iteration: 1900 / 2000 [ 95%] (Sampling)\rChain 2: Iteration: 2000 / 2000 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.122 seconds (Warm-up)\rChain 2: 0.253 seconds (Sampling)\rChain 2: 0.375 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.het1.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: heteroskModel2.\r2 chains, each with iter=2000; warmup=500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.28 0.02 0.63 39.06 39.87 40.28 40.71 41.53 1429 1\rbeta[2] 4.10 0.03 1.14 1.82 3.35 4.10 4.86 6.33 1903 1\rbeta[3] 14.55 0.02 0.99 12.57 13.91 14.56 15.22 16.45 1810 1\rbeta[4] -0.66 0.02 0.95 -2.54 -1.29 -0.64 -0.01 1.17 1931 1\rbeta[5] -10.35 0.02 0.97 -12.32 -10.97 -10.32 -9.72 -8.51 1806 1\rsigma[1] 1.99 0.01 0.24 1.58 1.83 1.96 2.13 2.53 2072 1\rsigma[2] 0.89 0.01 0.72 0.05 0.37 0.72 1.22 2.68 3042 1\rsigma[3] 0.41 0.01 0.43 0.01 0.12 0.28 0.57 1.60 2468 1\rsigma[4] 0.30 0.01 0.33 0.01 0.08 0.20 0.39 1.18 2654 1\rsigma[5] 0.35 0.01 0.37 0.01 0.10 0.24 0.47 1.36 3076 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 15:33:49 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\r\u0026gt; library(mcmcplots)\r\u0026gt; mcmc\u0026lt;-As.mcmc.list(data.het1.rstan)\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots.\n\r\rModel validation\r\u0026gt; mcmc = as.matrix(data.het.rstan)[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.het$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data.het$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThe above residual plot would make us believe that we had a homogeneity of variance issue (which we thought we were addressing by defining a model that allowed the variance to be proportional to the predictor). This is because we have plotted the raw residuals rather than residuals that have been standardized by the variances. The above plot is also what the residual plot would look like if we had not made any attempt to define a model in which the variance was related to the predictor. Whenever we fit a model that incorporates changes to the variance-covariance structures, we should explore standardized residuals. In this case, we should divide the residuals by the appropriate sigma for associated with that group (level of predictor).\n\\[ Res_{ij} = \\frac{Y_{ij} - \\mu_j}{\\sigma_j}\\]\n\u0026gt; mcmc = as.matrix(data.het1.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data.het1$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data.het1$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rThis is certainly an improvement. Nevertheless, there is still an indication of a relationship between mean and variance. We could attempt to further address this by refining \\(\\omega\\) in the Bayesian model. That is, rather than indicate that variance is proportional to \\(x\\), we could indicate that variance is proportional to \\(x^2\\) (as an example) - we will leave this as an exercise for the reader. Residuals against predictors.\n\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data.het1$x)) + theme_classic()\rLets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.matrix(data.het1.rstan)\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data.het1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; wch = grep(\u0026quot;sigma\u0026quot;, colnames(mcmc))\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data.het1), fit[i, ],\r+ mcmc[i, wch[as.numeric(data.het1$x[i])]]))\r\u0026gt; newdata = data.frame(x = data.het1$x, yRep) %\u0026gt;% gather(key = Sample, value = Value,\r+ -x)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = x, fill = \u0026quot;Model\u0026quot;), alpha = 0.5) +\r+ geom_violin(data = data.het1, aes(y = y, x = x, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) +\r+ geom_point(data = data.het1, aes(y = y, x = x), position = position_jitter(width = 0.1,\r+ height = 0), color = \u0026quot;black\u0026quot;) + theme_classic()\rParameter estimates\rFirst, we look at the results from the model.\n\u0026gt; print(data.het1.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: heteroskModel2.\r2 chains, each with iter=2000; warmup=500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.28 0.02 0.63 39.06 39.87 40.28 40.71 41.53 1429 1\rbeta[2] 4.10 0.03 1.14 1.82 3.35 4.10 4.86 6.33 1903 1\rbeta[3] 14.55 0.02 0.99 12.57 13.91 14.56 15.22 16.45 1810 1\rbeta[4] -0.66 0.02 0.95 -2.54 -1.29 -0.64 -0.01 1.17 1931 1\rbeta[5] -10.35 0.02 0.97 -12.32 -10.97 -10.32 -9.72 -8.51 1806 1\rsigma[1] 1.99 0.01 0.24 1.58 1.83 1.96 2.13 2.53 2072 1\rsigma[2] 0.89 0.01 0.72 0.05 0.37 0.72 1.22 2.68 3042 1\rsigma[3] 0.41 0.01 0.43 0.01 0.12 0.28 0.57 1.60 2468 1\rsigma[4] 0.30 0.01 0.33 0.01 0.08 0.20 0.39 1.18 2654 1\rsigma[5] 0.35 0.01 0.37 0.01 0.10 0.24 0.47 1.36 3076 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 15:33:49 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; tidyMCMC(data.het1.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;,\r+ rhat = TRUE, ess = TRUE)\r# A tibble: 10 x 7\rterm estimate std.error conf.low conf.high rhat ess\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 beta[1] 40.3 0.629 39.1 41.5 1.00 1429\r2 beta[2] 4.10 1.14 1.82 6.33 1.00 1903\r3 beta[3] 14.6 0.985 12.7 16.5 1.00 1810\r4 beta[4] -0.663 0.953 -2.54 1.17 1.000 1931\r5 beta[5] -10.4 0.973 -12.3 -8.53 1.00 1806\r6 sigma[1] 1.99 0.242 1.56 2.50 1.00 2072\r7 sigma[2] 0.887 0.719 0.000922 2.30 1.000 3042\r8 sigma[3] 0.414 0.429 0.000139 1.29 1.000 2468\r9 sigma[4] 0.295 0.325 0.00000841 0.914 1.00 2654\r10 sigma[5] 0.350 0.369 0.000149 1.07 1.00 3076\rConclusions\n\rthe mean of the first group (A) is \\(40.3\\)\n\rthe mean of the second group (B) is \\(4.12\\) units greater than (A)\n\rthe mean of the third group (C) is \\(14.6\\) units greater than (A)\n\rthe mean of the forth group (D) is \\(-0.637\\) units greater (i.e. less) than (A)\n\rthe mean of the fifth group (E) is \\(-10.3\\) units greater (i.e. less) than (A)\n\r\rThe \\(95\\)% confidence interval for the effects of B, C and E do not overlap with \\(0\\) implying a significant difference between group A and groups B, C and E. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmc = as.matrix(data.het1.rstan)\r\u0026gt; for (i in grep(\u0026quot;beta\u0026quot;, colnames(mcmc), value = TRUE)) print(paste(i, mcmcpvalue(mcmc[,\r+ i])))\r[1] \u0026quot;beta[1] 0\u0026quot;\r[1] \u0026quot;beta[2] 0.001\u0026quot;\r[1] \u0026quot;beta[3] 0\u0026quot;\r[1] \u0026quot;beta[4] 0.487666666666667\u0026quot;\r[1] \u0026quot;beta[5] 0\u0026quot;\r\u0026gt; mcmcpvalue(mcmc[, grep(\u0026quot;beta\u0026quot;, colnames(mcmc))])\r[1] 0\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\r\u0026gt; mcmc = as.matrix(data.het1.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = levels(data.het1$x))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data.het1,\r+ aes(y = y, x = x), color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data.het1\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data.het1$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\r\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2006. “Prior Distributions for Variance Parameters in Hierarchical Models (Comment on Article by Browne and Draper).” Bayesian Analysis 1 (3): 515–34.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\r\r\r","date":1581127994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581127994,"objectID":"530b114f7e8d277341b7c1588ed6f39c","permalink":"/stan/heterogeneity-stan/heterogeneity-stan/","publishdate":"2020-02-07T21:13:14-05:00","relpermalink":"/stan/heterogeneity-stan/heterogeneity-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","heterogeneity","heteroskedasticity"],"title":"Variance Heterogeneity - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","anova","JAGS","factor analysis","factorial designs"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rFactorial designs are an extension of single factor ANOVA designs in which additional factors are added such that each level of one factor is applied to all levels of the other factor(s) and these combinations are replicated. For example, we might design an experiment in which the effects of temperature (high vs low) and fertiliser (added vs not added) on the growth rate of seedlings are investigated by growing seedlings under the different temperature and fertilizer combinations. In addition to investigating the impacts of the main factors, factorial designs allow us to investigate whether the effects of one factor are consistent across levels of another factor. For example, is the effect of temperature on growth rate the same for both fertilised and unfertilized seedlings and similarly, does the impact of fertiliser treatment depend on the temperature under which the seedlings are grown?\nArguably, these interactions give more sophisticated insights into the dynamics of the system we are investigating. Hence, we could add additional main effects, such as soil pH, amount of water, etc, along with all the two way (temp:fert, temp:pH, temp:water, etc), three-way (temp:fert:pH, temp:pH:water), four-way (and so on) interactions in order to explore how these various factors interact with one another to effect the response. However, the more interactions, the more complex the model becomes to specify, compute and interpret - not to mention the rate at which the number of required observations increases. Factorial designs can consist:\n\rentirely of crossed fixed factors (Model I ANOVA - most common) in which conclusions are restricted to the specific combinations of levels selected for the experiment.\n\rentirely of crossed random factors (Model II ANOVA).\n\ra mixture of crossed fixed and random factors (Model III ANOVA).\n\r\rThe latter are useful for investigating the generality of a main treatment effect (fixed) over broad spatial, temporal or clinical levels of organisation. That is whether the observed effects of temperature and/or fertiliser (for example) are observed across the entire genera or country.\n\rLinear model\rAs with single factor ANOVA, the linear model could be constructed as either effects or means parameterisation, although only effects parameterisation will be considered here. The linear models for two and three factor design are\n\\[ y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha\\beta)_{ij} + \\epsilon_{ijk},\\]\nand\n\\[ y_{ijkl} = \\mu + \\alpha_i + \\beta_j + \\gamma_k + (\\alpha\\beta)_{ij} + (\\alpha\\gamma)_{ik} + (\\beta\\gamma)_{jk} + (\\alpha\\beta\\gamma)_{ijk} + \\epsilon_{ijkl},\\]\nwhere \\(\\mu\\) is the overall mean, \\(\\alpha\\) is the effect of Factor A, \\(\\beta\\) is the effect of Factor B, \\(\\gamma\\) is the effect of Factor C and \\(\\epsilon\\) is the random unexplained or residual component. Note that although the linear models for Model I, Model II and Model III designs are identical, the interpretation of terms (and thus null hypothesis) differ. Recall from the tutorial on single factor ANOVA, that categorical variables in linear models are actually re-parameterised dummy codes - and thus the \\(\\alpha\\) term above, actually represents one or more dummy codes. Thus, if we actually had two levels of Factor A (A1 and A2) and three levels of Factor B (B1, B2, B3), then the fully parameterised linear model would be:\n\\[ y=\\beta_{A1B1}+\\beta_{A2B1−A1B1}+\\beta_{A1B2−A1B1}+\\beta_{A1B3−A1B1}+\\beta_{A2B2−A1B2−A2B1−A1B1}+\\beta_{A2B3−A1B3−A2B1−A1B1}.\\]\nThus, such a model would have six parameters to estimate (in addition to the variance).\n\rNull hypothesis\rThere are separate null hypothesis associated with each of the main effects and the interaction terms.\nModel 1 - fixed effects\rFactor A\n\r\\(H_0(A):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal. The mean of population \\(1\\) is equal to that of population \\(2\\) and so on, and thus all population means are equal to an overall mean. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the overall mean (\\(\\alpha_i=\\mu_i-\\mu\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1=\\alpha_2=\\ldots=\\alpha_i=0\\)\r\rThe effect of each group equals zero. If one or more of the \\(\\alpha_i\\) are different from zero (the response mean for this treatment differs from the overall response mean), the null hypothesis is rejected indicating that the treatment has been found to affect the response variable. Note, as with multiple regression models, these “effects” represent partial effects. In the above, the effect of Factor A is actually the effect of Factor A at the first level of the Factor(s).\nFactor B\n\r\\(H_0(B):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal - at the first level of Factor A. Equivalent interpretation to Factor A above.\nFactor AB: interaction\n\r\\(H_0(AB):\\mu_{ij}=\\mu_i+\\mu_j-\\mu\\)\r\rThe population group means are all equal. For any given combination of factor levels, the population group mean will be equal to the difference between the overall population mean and the simple additive effects of the individual factor group means. That is, the effects of the main treatment factors are purely additive and independent of one another. This is equivalent to \\(H_0(AB): \\alpha\\beta_{ij}=0\\), no interaction between Factor A and Factor B.\n\rModel 2 - random effects\rFactor A\n\r\\(H_0(A):\\sigma^2_{\\alpha}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of A.\nFactor B\n\r\\(H_0(B):\\sigma^2_{\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of B.\nFactor AB: interaction\n\r\\(H_0(AB):\\sigma^2_{\\alpha\\beta}=0\\)\r\rThere is no added variance due to all possible interactions between all possible levels of A and B.\n\rModel 3 - mixed effects\rFixed factor - e.g. A\n\r\\(H_0(A):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal. The mean of population \\(1\\) (pooled over all levels of the random factor) is equal to that of population \\(2\\) and so on, and thus all population means are equal to an overall mean pooling over all possible levels of the random factor. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the overall mean (\\(\\alpha_i=\\mu_i-\\mu\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1=\\alpha_2=\\ldots=\\alpha_i=0\\)\r\rNo effect of any level of this factor pooled over all possible levels of the random factor.\nRandom factor - e.g. B\n\r\\(H_0(B):\\sigma^2_{\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of B.\nFactor AB: interaction\nThe interaction of a fixed and random factor is always considered a random factor.\n\r\\(H_0(AB):\\sigma^2_{\\alpha\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible interactions between all possible levels of A and B.\n\r\rAnalysis of variance\rWhen fixed factorial designs are balanced, the total variance in the response variable can be sequentially partitioned into what is explained by each of the model terms (factors and their interactions) and what is left unexplained. For each of the specific null hypotheses, the overall unexplained variability is used as the denominator in F-ratio calculations, and when a null hypothesis is true, an F-ratio should follow an F distribution with an expected value less than \\(1\\). Random factors are added to provide greater generality of conclusions. That is, to enable us to make conclusions about the effect of one factor (such as whether or not fertiliser is added) over all possible levels (not just those sampled) of a random factor (such as all possible locations, seasons, varieties, etc). In order to expand our conclusions beyond the specific levels used in the design, the hypothesis tests (and thus F-ratios) must reflect this extra generality by being more conservative.\nThe appropriate F-ratios for fixed, random and mixed factorial designs are presented below. Generally, once the terms (factors and interactions) have been ordered into a hierarchy (single factors at the top, highest level interactions at the bottom and terms of same order given equivalent positions in the hierarchy), the denominator for any term is selected as the next appropriate random term (an interaction that includes the term to be tested) encountered lower in the hierarchy. Interaction terms that contain one or more random factors are considered themselves to be random terms, as is the overall residual term (as all observations are assumed to be random representations of the entire population(s)). Note, when designs include a mixture of fixed and random crossed effects, exact denominator degrees of freedoms for certain F-ratios are undefined and traditional approaches adopt rather inexact estimated approximate or “Quasi” F-ratios. Pooling of non-significant F-ratio denominator terms, in which lower random terms are added to the denominator (provided \\(\\alpha \u0026gt; 0.25\\)), may also be useful. For random factors within mixed models, selecting F-ratio denominators that are appropriate for the intended hypothesis tests is a particularly complex and controversial issue. Traditionally, there are two alternative approaches and whilst the statistical resumes of each are complicated, essentially they differ in whether or not the interaction term is constrained for the test of the random factor.\nThe constrained or restricted method (Model I), stipulates that for the calculation of a random factor F-ratio (which investigates the added variance added due to the random factor), the overall effect of the interaction is treated as zero. Consequently, the random factor is tested against the residual term. The unconstrained or unrestrained method (Model II) however, does not set the interaction effect to zero and therefore the interaction term is used as the random factor F-ratio denominator. This method assumes that the interaction terms for each level of the random factor are completely independent (correlations between the fixed factor must be consistent across all levels of the random factor). Some statisticians maintain that the independence of the interaction term is difficult to assess for clinical data and therefore, the restricted approach is more appropriate. However, others have suggested that the restricted method is only appropriate for balanced designs.\n\rQuasi F-ratios\rAn additional complication for three or more factor models that contain two or more random factors, is that there may not be a single appropriate interaction term to use as the denominator for many of the main effects F-ratios. For example, if Factors A and B are random and C is fixed, then there are two random interaction terms of equivalent level under Factor C (\\(A^\\prime \\times C\\) and \\(B^\\prime \\times C\\)). As a result, the value of the of the Mean Squares (MS) expected when the null hypothesis is true cannot be easily defined. The solutions for dealing with such situations (quasi F-ratios) involve adding (and subtracting) terms together to create approximate estimates of F-ratio denominators. Alternatively, for random factors, variance components with confidence intervals can be used. These solutions are sufficiently unsatisfying as to lead many statisticians to recommend that factorial designs with two or more random factors should avoided if possible. Arguably however, linear mixed effects models offer more appropriate solutions to the above issues as they are more robust for unbalanced designs, accommodate covariates and provide a more comprehensive treatment and overview of all the underlying data structures.\n\u0026gt; fact_anova_table\rdf MS A,B fixed A,B random A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; \u0026quot;(MS A)/(MS AB)\u0026quot; B \u0026quot;b-1\u0026quot; \u0026quot;MS B\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS AB)\u0026quot; AB \u0026quot;(b-1)(a-1)\u0026quot; \u0026quot;MS AB\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS AB)\u0026quot;\rRes \u0026quot;(n-1)ba\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; A fixed B random (model I) A fixed B random (model II)\rA \u0026quot;(MS A)/(MS AB)\u0026quot; \u0026quot;(MS A)/(MS AB)\u0026quot; B \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS AB)\u0026quot; AB \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; Res \u0026quot;\u0026quot; \u0026quot;\u0026quot; \rThe corresponding R syntax is given below.\n\u0026gt; #Type I SS (Balanced)\r\u0026gt; anova(lm(y ~ A * B, data))\r\u0026gt; \u0026gt; #Type II SS (Unbalanced)\r\u0026gt; Anova(lm(y ~ A * B, data), type = \u0026quot;II\u0026quot;)\r\u0026gt; \u0026gt; #Type III SS (Unbalanced)\r\u0026gt; Anova(lm(y ~ A * B, data), type = \u0026quot;III\u0026quot;)\r\u0026gt; \u0026gt; #Variance components\r\u0026gt; summary(lmer(y ~ 1 + (1 | A) + (1 | B) + (1 | A:B), data))\rNote that for fixed factor models, when null hypotheses of interactions are rejected, the null hypothesis of the individual constituent factors are unlikely to represent the true nature of the effects and thus are of little value. The nature of such interactions are further explored by fitting simpler linear models (containing at least one less factor) separately for each of the levels of the other removed factor(s). Such Main effects tests are based on a subset of the data, and therefore estimates of the overall residual (unexplained) variability are unlikely to be as precise as the estimates based on the global model. Consequently, F-ratios involving MSResid should use the estimate of MSResid from the global model rather than that based on the smaller, theoretically less precise subset of data. For random and mixed models, since the objective is to generalise the effect of one factor over and above any interactions with other factors, the main factor effects can be interpreted even in the presence of significant interactions. Nevertheless, it should be noted that when a significant interaction is present in a mixed model, the power of the main fixed effects will be reduced (since the amount of variability explained by the interaction term will be relatively high, and this term is used as the denominator for the F-ratio calculation).\n\rAssumptions\rHypothesis tests assume that the residuals are:\n\rnormally distributed. Boxplots using the appropriate scale of replication (reflecting the appropriate residuals/F-ratio denominator (see table above) should be used to explore normality. Scale transformations are often useful.\n\requally varied. Boxplots and plots of means against variance (using the appropriate scale of replication) should be used to explore the spread of values. Residual plots should reveal no patterns. Scale transformations are often useful.\n\rindependent of one another.\n\r\rPlanned and unplanned comparisons\nAs with single factor analysis of variance, planned and unplanned multiple comparisons (such as Tukey’s test) can be incorporated into or follow the linear model respectively so as to further investigate any patterns or trends within the main factors and/or the interactions. As with single factor analysis of variance, the contrasts must be defined prior to fitting the linear model, and no more than \\(p−1\\) (where \\(p\\) is the number of levels of the factor) contrasts can be defined for a factor.\nUnbalanced designs\nA factorial design can be thought of as a table made up of rows (representing the levels of one factor), columns (levels of another factor), and cells (the individual combinations of the set of factors). Whilst the middle left table does not have equal sample sizes in each cell, the sample sizes are in proportion and as such, does not present the issues discussed below for unbalanced designs.\nIn addition to impacting on normality and homogeneity of variance, unequal sample sizes in factorial designs have major implications for the partitioning of the total sums of squares into each of the model components. For balanced designs, the total sums of squares (SSTotal) is equal to the additive sums of squares of each of the components (including the residual). For example, in a two factor balanced design, SSTotal=SSA+SSB+SSAB+SSResid. This can be represented diagrammatically by a Venn Diagram in which each of the SS for the term components butt against one another and are surrounded by the SSResid. However, in unbalanced designs, the sums of squares will be non-orthogonal and the sum of the individual components does not add up to the total sums of squares. Diagrammatically, the SS of the terms intersect or are separated.\nIn regular sequential sums of squares (Type I SS), the sum of the individual sums of squares must be equal to the total sums of squares, the sums of squares of the last factor to be estimated will be calculated as the difference between the total sums of squares and what has already been accounted for by other components. Consequently, the order in which factors are specified in the model (and thus estimated) will alter their sums of squares and therefore their F-ratios. To overcome this problem, traditionally there are two other alternative methods of calculating sums of squares.\n\rType II (hierarchical) SS estimate the sums of squares of each term as the improvement it contributes upon addition of that term to a model of greater complexity and lower in the hierarchy (recall that the hierarchical structure descends from the simplest model down to the fully populated model). The SS for the interaction as well as the first factor to be estimated are the same as for Type I SS. Type II SS estimate the contribution of a factor over and above the contributions of other factors of equal or lower complexity but not above the contributions of the interaction terms or terms nested within the factor. However, these sums of squares are weighted by the sample sizes of each level and therefore are biased towards the trends produced by the groups (levels) that have higher sample sizes. As a result of the weightings, Type II SS actually test hypotheses about really quite complex combinations of factor levels. Rather than test a hypothesis that \\(\\mu_{High}=\\mu_{Medium}=\\mu_{Low}\\), Type II SS might be testing that \\(4\\times\\mu_{High}=1\\times\\mu_{Medium}=0.25\\times\\mu_{Low}\\).\n\rType III (marginal or orthogonal) SS estimate the sums of squares of each term as the improvement based on a comparison of models with and without the term and are unweighted by sample sizes. Type III SS essentially measure just the unique contribution of each factor over and above the contributions of the other factors and interactions. For unbalanced designs,Type III SS essentially test equivalent hypotheses to balanced Type I SS and are therefore arguably more appropriate for unbalanced factorial designs than Type II SS. Importantly, Type III SS are only interpretable if they are based on orthogonal contrasts (such as sum or helmert contrasts and not treatment contrasts).\n\r\rThe choice between Type II and III SS clearly depends on the nature of the question. For example, if we had measured the growth rate of seedlings subjected to two factors (temperature and fertiliser), Type II SS could address whether there was an effect of temperature across the level of fertiliser treatment, whereas Type III SS could assess whether there was an effect of temperature within each level of the fertiliser treatment.\nWhen an entire combination, or cell, is missing (perhaps due to unforeseen circumstances) it is not possible to test all the main effects and/or interactions. The bottom right table above depicts such as situation. One solution is to fit a large single factor ANOVA with as many levels as there are cells (this is known as a cell means model) and investigate various factor and interaction effects via specific contrasts (see the following tables). Difficulties in establishing appropriate error terms, makes missing cells in random and mixed factor designs substantially more complex.\n\r\rData generation\rImagine we has designed an experiment in which we had measured the response (\\(y\\)) under a combination of two different potential influences (Factor A: levels a1 and a2; and Factor B: levels b1, b2 and b3), each combination replicated \\(10\\) times (\\(n=10\\)). As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; nA \u0026lt;- 2 #number of levels of A\r\u0026gt; nB \u0026lt;- 3 #number of levels of B\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; A \u0026lt;- gl(nA, 1, nA, lab = paste(\u0026quot;a\u0026quot;, 1:nA, sep = \u0026quot;\u0026quot;))\r\u0026gt; B \u0026lt;- gl(nB, 1, nB, lab = paste(\u0026quot;b\u0026quot;, 1:nB, sep = \u0026quot;\u0026quot;))\r\u0026gt; data \u0026lt;- expand.grid(A = A, B = B, n = 1:nsample)\r\u0026gt; X \u0026lt;- model.matrix(~A * B, data = data)\r\u0026gt; eff \u0026lt;- c(40, 15, 5, 0, -15, 10)\r\u0026gt; sigma \u0026lt;- 3 #residual standard deviation\r\u0026gt; n \u0026lt;- nrow(data)\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; data$y \u0026lt;- as.numeric(X %*% eff + eps)\r\u0026gt; head(data) #print out the first six rows of the data set\rA B n y\r1 a1 b1 1 38.31857\r2 a2 b1 1 54.30947\r3 a1 b2 1 49.67612\r4 a2 b2 1 45.21153\r5 a1 b3 1 40.38786\r6 a2 b3 1 70.14519\r\u0026gt; \u0026gt; with(data, interaction.plot(A, B, y))\r\u0026gt; \u0026gt; ## ALTERNATIVELY, we could supply the population means and get the effect parameters from these. To\r\u0026gt; ## correspond to the model matrix, enter the population means in the order of: a1b1, a2b1, a1b1,\r\u0026gt; ## a2b2,a1b3,a2b3\r\u0026gt; pop.means \u0026lt;- as.matrix(c(40, 55, 45, 45, 40, 65), byrow = F)\r\u0026gt; ## Generate a minimum model matrix for the effects\r\u0026gt; XX \u0026lt;- model.matrix(~A * B, expand.grid(A = factor(1:2), B = factor(1:3)))\r\u0026gt; ## Use the solve() function to solve what are effectively simultaneous equations\r\u0026gt; (eff \u0026lt;- as.vector(solve(XX, pop.means)))\r[1] 40 15 5 0 -15 10\r\u0026gt; \u0026gt; data$y \u0026lt;- as.numeric(X %*% eff + eps)\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the treatment type. Does treatment type effect the response?.\nAssumptions\rThe assumptions are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages. Importantly, to be considered independent replicates, the replicates must be made at the same scale at which the treatment is applied. For example, if the experiment involves subjecting organisms housed in tanks to different water temperatures, then the unit of replication is the individual tanks not the individual organisms in the tanks. The individuals in a tank are strictly not independent with respect to the treatment.\n\rThe response variable (and thus the residuals) should be normally distributed for each sampled populations (combination of factors). Boxplots of each treatment combination are useful for diagnosing major issues with normality.\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately) for each combination of treatments. Again, boxplots are useful.\n\r\r\rExploratory data analysis\rNormality and Homogeneity of variance\n\u0026gt; boxplot(y ~ A * B, data)\r\u0026gt; \u0026gt; # OR via ggplot2\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = y, x = A, fill = B)) + geom_boxplot()\rConclusions\nthere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical. There is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the \\(y\\)-axis. Hence it there is no evidence of non-homogeneity\nObvious violations could be addressed either by:\n\rtransform the scale of the response variables (to address normality etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\r\r\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor (\\(\\boldsymbol X \\boldsymbol \\beta\\)). In this case, \\(\\boldsymbol \\beta\\) represents the intercept associated with the first combination of groups, as well as the (effects) differences between this intercept and each other group. \\(\\boldsymbol X\\) is the model matrix. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). Exploratory data analysis suggests that the intercept and effects could be drawn from similar distributions (with mean in the \\(10\\)’s and variances in the \\(100\\)’s). Whilst we might therefore be tempted to provide different priors for the intercept, compared to the effects, for a simple model such as this, it is unlikely to be necessary. However, for more complex models, where prior specification becomes more critical, separate priors would probably be necessary.\nWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Note the following example as group means calculated as derived posteriors.\n\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mean[i],tau)\r+ mean[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ #Priors\r+ for (i in 1:ngroups) {\r+ beta[i] ~ dnorm(0, 1.0E-6) + }\r+ sigma ~ dunif(0, 100)\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;fact_anovaModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X \u0026lt;- model.matrix(~A * B, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = X, n = nrow(data), ngroups = ncol(X)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;fact_anovaModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 60\rUnobserved stochastic nodes: 7\rTotal graph size: 502\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;fact_anovaModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.187 0.927 38.381 39.572 40.186 40.810 42.028 1.001 15000\rbeta[2] 14.739 1.297 12.177 13.875 14.741 15.611 17.281 1.001 15000\rbeta[3] 4.997 1.301 2.439 4.127 4.996 5.850 7.555 1.001 6200\rbeta[4] -0.335 1.302 -2.922 -1.201 -0.323 0.523 2.182 1.001 9300\rbeta[5] -14.551 1.831 -18.188 -15.752 -14.535 -13.331 -10.976 1.001 15000\rbeta[6] 11.081 1.823 7.514 9.859 11.073 12.288 14.680 1.001 15000\rsigma 2.909 0.286 2.410 2.707 2.886 3.092 3.525 1.001 3100\rdeviance 296.719 4.003 290.996 293.788 296.037 298.923 306.334 1.001 3000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 8.0 and DIC = 304.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\).\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters (such as \\(\\beta\\)s).\n\u0026gt; data.mcmc = as.mcmc(data.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3895 3746 1.040 beta[2] 2 3649 3746 0.974 beta[3] 2 3981 3746 1.060 beta[4] 2 3811 3746 1.020 beta[5] 2 3855 3746 1.030 beta[6] 2 3770 3746 1.010 deviance 2 3981 3746 1.060 sigma 4 5074 3746 1.350 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3729 3746 0.995 beta[2] 2 3853 3746 1.030 beta[3] 2 3649 3746 0.974 beta[4] 2 3770 3746 1.010 beta[5] 2 3853 3746 1.030 beta[6] 2 3770 3746 1.010 deviance 2 3649 3746 0.974 sigma 4 5366 3746 1.430 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] beta[3] beta[4] beta[5]\rLag 0 1.000000000 1.000000000 1.0000000000 1.000000000 1.000000000\rLag 1 -0.002519333 0.009718890 0.0097211169 0.004831644 0.013455394\rLag 5 -0.004466196 0.013453425 0.0012166509 -0.009459535 0.010837730\rLag 10 -0.006418970 -0.004825081 0.0002148708 -0.003297864 -0.004528907\rLag 50 0.004241571 0.010613172 -0.0056258926 -0.002886136 -0.003130607\rbeta[6] deviance sigma\rLag 0 1.000000000 1.000000000 1.000000000\rLag 1 0.004411377 0.194295905 0.335565370\rLag 5 0.004680461 0.011707557 0.003364317\rLag 10 -0.012377072 0.006873975 0.005557072\rLag 50 0.003484518 -0.008999031 -0.012155151\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. For more complex models (those that contain multiple effects), it is also advisable to plot the residuals against each of the individual predictors. For sampling designs that involve sample collection over space or time, it is also a good idea to explore whether there are any temporal or spatial patterns in the residuals.\nThere are numerous situations (e.g. when applying specific variance-covariance structures to a model) where raw residuals do not reflect the interior workings of the model. Typically, this is because they do not take into account the variance-covariance matrix or assume a very simple variance-covariance matrix. Since the purpose of exploring residuals is to evaluate the model, for these cases, it is arguably better to draw conclusions based on standardized (or studentised) residuals. Unfortunately the definitions of standardised and studentised residuals appears to vary and the two terms get used interchangeably. I will adopt the following definitions:\n\rStandardised residuals. The raw residuals divided by the true standard deviation of the residuals (which of course is rarely known).\n\rStudentised residuals. The raw residuals divided by the standard deviation of the residuals. Note that externally studentised residuals are calculated by dividing the raw residuals by a unique standard deviation for each observation that is calculated from regressions having left each successive observation out.\n\rPearson residuals. The raw residuals divided by the standard deviation of the response variable.\n\r\rhe mark of a good model is being able to predict well. In an ideal world, we would have sufficiently large sample size as to permit us to hold a fraction (such as \\(25\\)%) back thereby allowing us to train the model on \\(75\\)% of the data and then see how well the model can predict the withheld \\(25\\)%. Unfortunately, such a luxury is still rare. The next best option is to see how well the model can predict the observed data. Models tend to struggle most with the extremes of trends and have particular issues when the extremes approach logical boundaries (such as zero for count data and standard deviations). We can use the fitted model to generate random predicted observations and then explore some properties of these compared to the actual observed data.\nRather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model. Residuals are not computed directly within JAGS. However, we can calculate them manually form the posteriors.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; wch\r[1] 1 2 3 4 5 6\r\u0026gt; \u0026gt; head(mcmc)\rbeta[1] beta[2] beta[3] beta[4] beta[5] beta[6] deviance\r[1,] 41.07993 14.73872 4.532543 -1.58279310 -14.91723 11.28780 292.8658\r[2,] 40.30651 13.02455 4.475566 -0.86754574 -12.02942 13.36371 295.1239\r[3,] 40.42144 14.71551 5.149725 0.09616707 -14.80497 10.82830 290.7322\r[4,] 39.79269 16.35682 5.776724 -0.53251753 -17.64694 10.59484 295.1674\r[5,] 39.40269 14.69470 5.237430 -0.29022676 -14.12951 12.81751 293.3136\r[6,] 41.27115 12.58706 5.908648 -2.34899624 -13.31913 13.79862 302.0972\rsigma\r[1,] 3.032059\r[2,] 2.467221\r[3,] 2.874167\r[4,] 2.561227\r[5,] 2.841503\r[6,] 3.403891\r\u0026gt; \u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(dplyr)\r\u0026gt; library(tidyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; print(coefs)\rbeta[1] beta[2] beta[3] beta[4] beta[5] beta[6] 40.1859804 14.7407405 4.9960673 -0.3233121 -14.5348136 11.0732139 \u0026gt; \u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; #generate a model matrix\r\u0026gt; Xmat = model.matrix(~A*B, data)\r\u0026gt; ##get median parameter estimates\r\u0026gt; coefs = mcmc[,wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,], mcmc[i, \u0026#39;sigma\u0026#39;]))\r\u0026gt; newdata = data.frame(A=data$A, B=data$B, yRep) %\u0026gt;% gather(key=Sample, value=Value,-A,-B)\r\u0026gt; ggplot(newdata) +\r+ geom_violin(aes(y=Value, x=A, fill=\u0026#39;Model\u0026#39;), alpha=0.5)+\r+ geom_violin(data=data, aes(y=y,x=A,fill=\u0026#39;Obs\u0026#39;), alpha=0.5) +\r+ geom_point(data=data, aes(y=y, x=A), position=position_jitter(width=0.1,height=0),\r+ color=\u0026#39;black\u0026#39;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) +\r+ geom_violin(aes(y=Value, x=B, fill=\u0026#39;Model\u0026#39;, group=B, color=A), alpha=0.5)+\r+ geom_point(data=data, aes(y=y, x=B, group=B,color=A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;fact_anovaModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.187 0.927 38.381 39.572 40.186 40.810 42.028 1.001 15000\rbeta[2] 14.739 1.297 12.177 13.875 14.741 15.611 17.281 1.001 15000\rbeta[3] 4.997 1.301 2.439 4.127 4.996 5.850 7.555 1.001 6200\rbeta[4] -0.335 1.302 -2.922 -1.201 -0.323 0.523 2.182 1.001 9300\rbeta[5] -14.551 1.831 -18.188 -15.752 -14.535 -13.331 -10.976 1.001 15000\rbeta[6] 11.081 1.823 7.514 9.859 11.073 12.288 14.680 1.001 15000\rsigma 2.909 0.286 2.410 2.707 2.886 3.092 3.525 1.001 3100\rdeviance 296.719 4.003 290.996 293.788 296.037 298.923 306.334 1.001 3000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 8.0 and DIC = 304.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 8 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 40.2 0.927 38.4 42.0 2 beta[2] 14.7 1.30 12.2 17.3 3 beta[3] 5.00 1.30 2.43 7.55\r4 beta[4] -0.335 1.30 -2.89 2.21\r5 beta[5] -14.6 1.83 -18.2 -11.0 6 beta[6] 11.1 1.82 7.57 14.7 7 deviance 297. 4.00 290. 304. 8 sigma 2.91 0.286 2.37 3.47\rConclusions\n\rThe intercept represents the mean of the first combination Aa1:Bb1 is \\(40.2\\)\n\rAa2:Bb1 is \\(14.7\\) units greater than Aa1:Bb1\n\rAa1:Bb2 is \\(5\\) units greater Aa1:Bb1\n\rAa1:Bb3 is \\(-0.335\\) units greater Aa1:Bb1\n\rAa2:Bb2 is \\(-14.6\\) units greater than the difference between (Aa1:Bb2 + Aa2:Bb1) and (2*Aa1:Bb1)\n\rAa2:Bb3 is \\(11.1\\) units greater than the difference between (Aa1:Bb3 + Aa2:Bb1) and (2*Aa1:Bb1)\n\r\rThe \\(95\\)% credibility interval for both interactive effects (Aa2:Bb2 and Aa2:Bb3) do not contain \\(0\\), implying significant interactions between A and B. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[3]\u0026quot;])\r[1] 0.0004666667\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[4]\u0026quot;])\r[1] 0.7912667\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[5]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[6]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta[5]\u0026quot;, \u0026quot;beta[6]\u0026quot;)])\r[1] 0\rThere is evidence of an interaction between A and B.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(A=levels(data$A), B=levels(data$B))\r\u0026gt; Xmat = model.matrix(~A*B,newdata)\r\u0026gt; coefs = mcmc[,wch]\r\u0026gt; fit=coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int=TRUE, conf.method=\u0026#39;HPDinterval\u0026#39;))\r\u0026gt; newdata\rA B estimate std.error conf.low conf.high\r1 a1 b1 40.18727 0.9270982 38.38136 42.02744\r2 a2 b1 54.92636 0.9160115 53.12047 56.67452\r3 a1 b2 45.18473 0.9196740 43.37733 46.98224\r4 a2 b2 45.37262 0.9197287 43.61538 47.19883\r5 a1 b3 39.85206 0.9156380 38.11053 41.70144\r6 a2 b3 65.67189 0.9209489 63.84038 67.47931\r\u0026gt; \u0026gt; ggplot(newdata, aes(y=estimate, x=B, fill=A)) +\r+ geom_blank() +\r+ geom_line(aes(x=as.numeric(B), linetype=A)) +\r+ geom_linerange(aes(ymin=conf.low, ymax=conf.high))+\r+ geom_point(aes(shape=A), size=3)+\r+ scale_y_continuous(\u0026#39;Y\u0026#39;)+\r+ scale_x_discrete(\u0026#39;B\u0026#39;)+\r+ scale_shape_manual(\u0026#39;A\u0026#39;,values=c(21,16))+\r+ scale_fill_manual(\u0026#39;A\u0026#39;,values=c(\u0026#39;white\u0026#39;,\u0026#39;black\u0026#39;))+\r+ scale_linetype_manual(\u0026#39;A\u0026#39;,values=c(\u0026#39;solid\u0026#39;,\u0026#39;dashed\u0026#39;))+\r+ theme_classic() +\r+ theme(legend.justification=c(0,1), legend.position=c(0.05,1),\r+ axis.title.y=element_text(vjust=2, size=rel(1.25)),\r+ axis.title.x=element_text(vjust=-2, size=rel(1.25)),\r+ plot.margin=unit(c(0.5,0.5,2,2), \u0026#39;lines\u0026#39;),\r+ legend.key.size=unit(1,\u0026#39;cm\u0026#39;)) + theme_classic()\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 10.4 0.917 8.65 12.3 2 sd.B 3.06 0.640 1.79 4.28\r3 sd.AB 10.4 0.734 9.04 11.9 4 sd.resid 2.84 0.0836 2.72 3.00\r# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 39.1 1.95 35.2 42.8\r2 sd.B 11.4 1.90 7.60 15.0\r3 sd.AB 39.0 0.947 37.0 40.8\r4 sd.resid 10.6 0.822 9.30 12.3\rApproximately \\(39\\)% of the total finite population standard deviation is due to the interaction between factor A and factor B.\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; Xmat = model.matrix(~A * B, data)\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.913 0.00817 0.897 0.925\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ A * B, data))\rCall:\rlm(formula = y ~ A * B, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.5694 -1.8517 -0.0589 1.7120 6.5966 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.1940 0.8980 44.760 \u0026lt; 2e-16 ***\rAa2 14.7163 1.2700 11.588 2.88e-16 ***\rBb2 4.9823 1.2700 3.923 0.000249 ***\rBb3 -0.3464 1.2700 -0.273 0.786077 Aa2:Bb2 -14.5093 1.7960 -8.079 7.37e-11 ***\rAa2:Bb3 11.1056 1.7960 6.184 8.65e-08 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 2.84 on 54 degrees of freedom\rMultiple R-squared: 0.92, Adjusted R-squared: 0.9125 F-statistic: 124.1 on 5 and 54 DF, p-value: \u0026lt; 2.2e-16\r\rDealing with interactions\rIn the presence of interations, conclusions about the main effects are overly simplistic at best and completely inaccurate at worst. Therefore, in the presense of interactions we should attempt to tease the analysis appart a little. In the current working example, we have identified that there is a significant interaction between Factor A and Factor B. Our exploration of the regression coefficients, indicated that the pattern between b1, b2 and b3 might differ between a1 and a2. Similarly, if we consider the coefficients from the perspective of Factor A, we can see that the patterns between a1 and a2 are similar for b1 and b3, yet very different for b2.\nAt this point, we can then split the two-factor model up into a series of single-factor models, either:\n\rexamining the effects of Factor B separately for each level of Factor A (two single-factor models) or\n\rexamining the effects of Factor A separately for each level of Factor B (three single-factor models)\n\r\rHowever, rather than subset the data and fit isolated smaller models, it is arguably better to treat these explorations as contrasts. As such we could either:\n\rapply specific contrasts to the already fit model\n\rdefine the specific contrasts and use them to refit the model\n\r\rWe will do the former of these options since we have already fit the global model. For this demonstration, we will explore the effect of factor A at each level of factor B. I will illustrate two ways to perform these contrasts on an already fit model:\nBy generating the posteriors of the cell means (means of each factor combination) and then manually compare the appropriate columns for specific levels of factor B.\r\r\u0026gt; mcmc \u0026lt;- data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = levels(data$B))\r\u0026gt; Xmat = model.matrix(~A * B, data = newdata)\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; head(fit)\r1 2 3 4 5 6\r[1,] 41.07993 55.81865 45.61247 45.43397 39.49714 65.52366\r[2,] 40.30651 53.33106 44.78207 45.77720 39.43896 65.82722\r[3,] 40.42144 55.13695 45.57116 45.48170 40.51761 66.06142\r[4,] 39.79269 56.14951 45.56942 44.27930 39.26017 66.21183\r[5,] 39.40269 54.09738 44.64012 45.20530 39.11246 66.62467\r[6,] 41.27115 53.85821 47.17980 46.44773 38.92215 65.30783\r\u0026gt; \u0026gt; ## we want to compare columns 2-1, 4-3 and 6-5\r\u0026gt; comps = fit[, c(2, 4, 6)] - fit[, c(1, 3, 5)]\r\u0026gt; tidyMCMC(comps, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 14.7 1.30 12.2 17.3 2 4 0.188 1.30 -2.30 2.83\r3 6 25.8 1.30 23.2 28.4 \rBy generating the posteriors of the cell means (means of each factor combination) and then manually compare the appropriate columns for specific levels of factor B.\r\r\u0026gt; mcmc \u0026lt;- data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = levels(data$B))\r\u0026gt; Xmat = model.matrix(~A * B, data = newdata)\r\u0026gt; contr = attr(Xmat, \u0026quot;contrasts\u0026quot;)\r\u0026gt; newdata.a1 = model.frame(~A * B, expand.grid(A = levels(data$A)[1], B = levels(data$B)),\r+ xlev = list(A = levels(data$A), B = levels(data$B)))\r\u0026gt; Xmat.a1 = model.matrix(~A * B, data = newdata.a1, contrasts = contr)\r\u0026gt; newdata.a2 = model.frame(~A * B, expand.grid(A = levels(data$A)[2], B = levels(data$B)),\r+ xlev = list(A = levels(data$A), B = levels(data$B)))\r\u0026gt; Xmat.a2 = model.matrix(~A * B, data = newdata.a2, contrasts = contr)\r\u0026gt; Xmat = Xmat.a2 - Xmat.a1\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 3 x 4\restimate std.error conf.low conf.high\r\u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 14.7 1.30 12.2 17.3 2 0.188 1.30 -2.30 2.83\r3 25.8 1.30 23.2 28.4 \r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1581041594,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581041594,"objectID":"22906ea3c5761961dbee854640bc0d04","permalink":"/jags/factorial-anova-jags/factorial-anova-jags/","publishdate":"2020-02-06T21:13:14-05:00","relpermalink":"/jags/factorial-anova-jags/factorial-anova-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","anova","factor analysis","factorial designs"],"title":"Factorial Analysis of Variance - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","anova","STAN","factor analysis","factorial designs"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rFactorial designs are an extension of single factor ANOVA designs in which additional factors are added such that each level of one factor is applied to all levels of the other factor(s) and these combinations are replicated. For example, we might design an experiment in which the effects of temperature (high vs low) and fertiliser (added vs not added) on the growth rate of seedlings are investigated by growing seedlings under the different temperature and fertilizer combinations. In addition to investigating the impacts of the main factors, factorial designs allow us to investigate whether the effects of one factor are consistent across levels of another factor. For example, is the effect of temperature on growth rate the same for both fertilised and unfertilized seedlings and similarly, does the impact of fertiliser treatment depend on the temperature under which the seedlings are grown?\nArguably, these interactions give more sophisticated insights into the dynamics of the system we are investigating. Hence, we could add additional main effects, such as soil pH, amount of water, etc, along with all the two way (temp:fert, temp:pH, temp:water, etc), three-way (temp:fert:pH, temp:pH:water), four-way (and so on) interactions in order to explore how these various factors interact with one another to effect the response. However, the more interactions, the more complex the model becomes to specify, compute and interpret - not to mention the rate at which the number of required observations increases. Factorial designs can consist:\n\rentirely of crossed fixed factors (Model I ANOVA - most common) in which conclusions are restricted to the specific combinations of levels selected for the experiment.\n\rentirely of crossed random factors (Model II ANOVA).\n\ra mixture of crossed fixed and random factors (Model III ANOVA).\n\r\rThe latter are useful for investigating the generality of a main treatment effect (fixed) over broad spatial, temporal or clinical levels of organisation. That is whether the observed effects of temperature and/or fertiliser (for example) are observed across the entire genera or country.\n\rLinear model\rAs with single factor ANOVA, the linear model could be constructed as either effects or means parameterisation, although only effects parameterisation will be considered here. The linear models for two and three factor design are\n\\[ y_{ijk} = \\mu + \\alpha_i + \\beta_j + (\\alpha\\beta)_{ij} + \\epsilon_{ijk},\\]\nand\n\\[ y_{ijkl} = \\mu + \\alpha_i + \\beta_j + \\gamma_k + (\\alpha\\beta)_{ij} + (\\alpha\\gamma)_{ik} + (\\beta\\gamma)_{jk} + (\\alpha\\beta\\gamma)_{ijk} + \\epsilon_{ijkl},\\]\nwhere \\(\\mu\\) is the overall mean, \\(\\alpha\\) is the effect of Factor A, \\(\\beta\\) is the effect of Factor B, \\(\\gamma\\) is the effect of Factor C and \\(\\epsilon\\) is the random unexplained or residual component. Note that although the linear models for Model I, Model II and Model III designs are identical, the interpretation of terms (and thus null hypothesis) differ. Recall from the tutorial on single factor ANOVA, that categorical variables in linear models are actually re-parameterised dummy codes - and thus the \\(\\alpha\\) term above, actually represents one or more dummy codes. Thus, if we actually had two levels of Factor A (A1 and A2) and three levels of Factor B (B1, B2, B3), then the fully parameterised linear model would be:\n\\[ y=\\beta_{A1B1}+\\beta_{A2B1−A1B1}+\\beta_{A1B2−A1B1}+\\beta_{A1B3−A1B1}+\\beta_{A2B2−A1B2−A2B1−A1B1}+\\beta_{A2B3−A1B3−A2B1−A1B1}.\\]\nThus, such a model would have six parameters to estimate (in addition to the variance).\n\rNull hypothesis\rThere are separate null hypothesis associated with each of the main effects and the interaction terms.\nModel 1 - fixed effects\rFactor A\n\r\\(H_0(A):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal. The mean of population \\(1\\) is equal to that of population \\(2\\) and so on, and thus all population means are equal to an overall mean. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the overall mean (\\(\\alpha_i=\\mu_i-\\mu\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1=\\alpha_2=\\ldots=\\alpha_i=0\\)\r\rThe effect of each group equals zero. If one or more of the \\(\\alpha_i\\) are different from zero (the response mean for this treatment differs from the overall response mean), the null hypothesis is rejected indicating that the treatment has been found to affect the response variable. Note, as with multiple regression models, these “effects” represent partial effects. In the above, the effect of Factor A is actually the effect of Factor A at the first level of the Factor(s).\nFactor B\n\r\\(H_0(B):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal - at the first level of Factor A. Equivalent interpretation to Factor A above.\nFactor AB: interaction\n\r\\(H_0(AB):\\mu_{ij}=\\mu_i+\\mu_j-\\mu\\)\r\rThe population group means are all equal. For any given combination of factor levels, the population group mean will be equal to the difference between the overall population mean and the simple additive effects of the individual factor group means. That is, the effects of the main treatment factors are purely additive and independent of one another. This is equivalent to \\(H_0(AB): \\alpha\\beta_{ij}=0\\), no interaction between Factor A and Factor B.\n\rModel 2 - random effects\rFactor A\n\r\\(H_0(A):\\sigma^2_{\\alpha}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of A.\nFactor B\n\r\\(H_0(B):\\sigma^2_{\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of B.\nFactor AB: interaction\n\r\\(H_0(AB):\\sigma^2_{\\alpha\\beta}=0\\)\r\rThere is no added variance due to all possible interactions between all possible levels of A and B.\n\rModel 3 - mixed effects\rFixed factor - e.g. A\n\r\\(H_0(A):\\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\)\r\rThe population group means are all equal. The mean of population \\(1\\) (pooled over all levels of the random factor) is equal to that of population \\(2\\) and so on, and thus all population means are equal to an overall mean pooling over all possible levels of the random factor. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the overall mean (\\(\\alpha_i=\\mu_i-\\mu\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1=\\alpha_2=\\ldots=\\alpha_i=0\\)\r\rNo effect of any level of this factor pooled over all possible levels of the random factor.\nRandom factor - e.g. B\n\r\\(H_0(B):\\sigma^2_{\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible levels of B.\nFactor AB: interaction\nThe interaction of a fixed and random factor is always considered a random factor.\n\r\\(H_0(AB):\\sigma^2_{\\alpha\\beta}=0\\)\r\rThe population variance equals zero. There is no added variance due to all possible interactions between all possible levels of A and B.\n\r\rAnalysis of variance\rWhen fixed factorial designs are balanced, the total variance in the response variable can be sequentially partitioned into what is explained by each of the model terms (factors and their interactions) and what is left unexplained. For each of the specific null hypotheses, the overall unexplained variability is used as the denominator in F-ratio calculations, and when a null hypothesis is true, an F-ratio should follow an F distribution with an expected value less than \\(1\\). Random factors are added to provide greater generality of conclusions. That is, to enable us to make conclusions about the effect of one factor (such as whether or not fertiliser is added) over all possible levels (not just those sampled) of a random factor (such as all possible locations, seasons, varieties, etc). In order to expand our conclusions beyond the specific levels used in the design, the hypothesis tests (and thus F-ratios) must reflect this extra generality by being more conservative.\nThe appropriate F-ratios for fixed, random and mixed factorial designs are presented below. Generally, once the terms (factors and interactions) have been ordered into a hierarchy (single factors at the top, highest level interactions at the bottom and terms of same order given equivalent positions in the hierarchy), the denominator for any term is selected as the next appropriate random term (an interaction that includes the term to be tested) encountered lower in the hierarchy. Interaction terms that contain one or more random factors are considered themselves to be random terms, as is the overall residual term (as all observations are assumed to be random representations of the entire population(s)). Note, when designs include a mixture of fixed and random crossed effects, exact denominator degrees of freedoms for certain F-ratios are undefined and traditional approaches adopt rather inexact estimated approximate or “Quasi” F-ratios. Pooling of non-significant F-ratio denominator terms, in which lower random terms are added to the denominator (provided \\(\\alpha \u0026gt; 0.25\\)), may also be useful. For random factors within mixed models, selecting F-ratio denominators that are appropriate for the intended hypothesis tests is a particularly complex and controversial issue. Traditionally, there are two alternative approaches and whilst the statistical resumes of each are complicated, essentially they differ in whether or not the interaction term is constrained for the test of the random factor.\nThe constrained or restricted method (Model I), stipulates that for the calculation of a random factor F-ratio (which investigates the added variance added due to the random factor), the overall effect of the interaction is treated as zero. Consequently, the random factor is tested against the residual term. The unconstrained or unrestrained method (Model II) however, does not set the interaction effect to zero and therefore the interaction term is used as the random factor F-ratio denominator. This method assumes that the interaction terms for each level of the random factor are completely independent (correlations between the fixed factor must be consistent across all levels of the random factor). Some statisticians maintain that the independence of the interaction term is difficult to assess for clinical data and therefore, the restricted approach is more appropriate. However, others have suggested that the restricted method is only appropriate for balanced designs.\n\rQuasi F-ratios\rAn additional complication for three or more factor models that contain two or more random factors, is that there may not be a single appropriate interaction term to use as the denominator for many of the main effects F-ratios. For example, if Factors A and B are random and C is fixed, then there are two random interaction terms of equivalent level under Factor C (\\(A^\\prime \\times C\\) and \\(B^\\prime \\times C\\)). As a result, the value of the of the Mean Squares (MS) expected when the null hypothesis is true cannot be easily defined. The solutions for dealing with such situations (quasi F-ratios) involve adding (and subtracting) terms together to create approximate estimates of F-ratio denominators. Alternatively, for random factors, variance components with confidence intervals can be used. These solutions are sufficiently unsatisfying as to lead many statisticians to recommend that factorial designs with two or more random factors should avoided if possible. Arguably however, linear mixed effects models offer more appropriate solutions to the above issues as they are more robust for unbalanced designs, accommodate covariates and provide a more comprehensive treatment and overview of all the underlying data structures.\n\u0026gt; fact_anova_table\rdf MS A,B fixed A,B random A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; \u0026quot;(MS A)/(MS AB)\u0026quot; B \u0026quot;b-1\u0026quot; \u0026quot;MS B\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS AB)\u0026quot; AB \u0026quot;(b-1)(a-1)\u0026quot; \u0026quot;MS AB\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS AB)\u0026quot;\rRes \u0026quot;(n-1)ba\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; A fixed B random (model I) A fixed B random (model II)\rA \u0026quot;(MS A)/(MS AB)\u0026quot; \u0026quot;(MS A)/(MS AB)\u0026quot; B \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS AB)\u0026quot; AB \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; Res \u0026quot;\u0026quot; \u0026quot;\u0026quot; \rThe corresponding R syntax is given below.\n\u0026gt; #Type I SS (Balanced)\r\u0026gt; anova(lm(y ~ A * B, data))\r\u0026gt; \u0026gt; #Type II SS (Unbalanced)\r\u0026gt; Anova(lm(y ~ A * B, data), type = \u0026quot;II\u0026quot;)\r\u0026gt; \u0026gt; #Type III SS (Unbalanced)\r\u0026gt; Anova(lm(y ~ A * B, data), type = \u0026quot;III\u0026quot;)\r\u0026gt; \u0026gt; #Variance components\r\u0026gt; summary(lmer(y ~ 1 + (1 | A) + (1 | B) + (1 | A:B), data))\rNote that for fixed factor models, when null hypotheses of interactions are rejected, the null hypothesis of the individual constituent factors are unlikely to represent the true nature of the effects and thus are of little value. The nature of such interactions are further explored by fitting simpler linear models (containing at least one less factor) separately for each of the levels of the other removed factor(s). Such Main effects tests are based on a subset of the data, and therefore estimates of the overall residual (unexplained) variability are unlikely to be as precise as the estimates based on the global model. Consequently, F-ratios involving MSResid should use the estimate of MSResid from the global model rather than that based on the smaller, theoretically less precise subset of data. For random and mixed models, since the objective is to generalise the effect of one factor over and above any interactions with other factors, the main factor effects can be interpreted even in the presence of significant interactions. Nevertheless, it should be noted that when a significant interaction is present in a mixed model, the power of the main fixed effects will be reduced (since the amount of variability explained by the interaction term will be relatively high, and this term is used as the denominator for the F-ratio calculation).\n\rAssumptions\rHypothesis tests assume that the residuals are:\n\rnormally distributed. Boxplots using the appropriate scale of replication (reflecting the appropriate residuals/F-ratio denominator (see table above) should be used to explore normality. Scale transformations are often useful.\n\requally varied. Boxplots and plots of means against variance (using the appropriate scale of replication) should be used to explore the spread of values. Residual plots should reveal no patterns. Scale transformations are often useful.\n\rindependent of one another.\n\r\rPlanned and unplanned comparisons\nAs with single factor analysis of variance, planned and unplanned multiple comparisons (such as Tukey’s test) can be incorporated into or follow the linear model respectively so as to further investigate any patterns or trends within the main factors and/or the interactions. As with single factor analysis of variance, the contrasts must be defined prior to fitting the linear model, and no more than \\(p−1\\) (where \\(p\\) is the number of levels of the factor) contrasts can be defined for a factor.\nUnbalanced designs\nA factorial design can be thought of as a table made up of rows (representing the levels of one factor), columns (levels of another factor), and cells (the individual combinations of the set of factors). Whilst the middle left table does not have equal sample sizes in each cell, the sample sizes are in proportion and as such, does not present the issues discussed below for unbalanced designs.\nIn addition to impacting on normality and homogeneity of variance, unequal sample sizes in factorial designs have major implications for the partitioning of the total sums of squares into each of the model components. For balanced designs, the total sums of squares (SSTotal) is equal to the additive sums of squares of each of the components (including the residual). For example, in a two factor balanced design, SSTotal=SSA+SSB+SSAB+SSResid. This can be represented diagrammatically by a Venn Diagram in which each of the SS for the term components butt against one another and are surrounded by the SSResid. However, in unbalanced designs, the sums of squares will be non-orthogonal and the sum of the individual components does not add up to the total sums of squares. Diagrammatically, the SS of the terms intersect or are separated.\nIn regular sequential sums of squares (Type I SS), the sum of the individual sums of squares must be equal to the total sums of squares, the sums of squares of the last factor to be estimated will be calculated as the difference between the total sums of squares and what has already been accounted for by other components. Consequently, the order in which factors are specified in the model (and thus estimated) will alter their sums of squares and therefore their F-ratios. To overcome this problem, traditionally there are two other alternative methods of calculating sums of squares.\n\rType II (hierarchical) SS estimate the sums of squares of each term as the improvement it contributes upon addition of that term to a model of greater complexity and lower in the hierarchy (recall that the hierarchical structure descends from the simplest model down to the fully populated model). The SS for the interaction as well as the first factor to be estimated are the same as for Type I SS. Type II SS estimate the contribution of a factor over and above the contributions of other factors of equal or lower complexity but not above the contributions of the interaction terms or terms nested within the factor. However, these sums of squares are weighted by the sample sizes of each level and therefore are biased towards the trends produced by the groups (levels) that have higher sample sizes. As a result of the weightings, Type II SS actually test hypotheses about really quite complex combinations of factor levels. Rather than test a hypothesis that \\(\\mu_{High}=\\mu_{Medium}=\\mu_{Low}\\), Type II SS might be testing that \\(4\\times\\mu_{High}=1\\times\\mu_{Medium}=0.25\\times\\mu_{Low}\\).\n\rType III (marginal or orthogonal) SS estimate the sums of squares of each term as the improvement based on a comparison of models with and without the term and are unweighted by sample sizes. Type III SS essentially measure just the unique contribution of each factor over and above the contributions of the other factors and interactions. For unbalanced designs,Type III SS essentially test equivalent hypotheses to balanced Type I SS and are therefore arguably more appropriate for unbalanced factorial designs than Type II SS. Importantly, Type III SS are only interpretable if they are based on orthogonal contrasts (such as sum or helmert contrasts and not treatment contrasts).\n\r\rThe choice between Type II and III SS clearly depends on the nature of the question. For example, if we had measured the growth rate of seedlings subjected to two factors (temperature and fertiliser), Type II SS could address whether there was an effect of temperature across the level of fertiliser treatment, whereas Type III SS could assess whether there was an effect of temperature within each level of the fertiliser treatment.\nWhen an entire combination, or cell, is missing (perhaps due to unforeseen circumstances) it is not possible to test all the main effects and/or interactions. The bottom right table above depicts such as situation. One solution is to fit a large single factor ANOVA with as many levels as there are cells (this is known as a cell means model) and investigate various factor and interaction effects via specific contrasts (see the following tables). Difficulties in establishing appropriate error terms, makes missing cells in random and mixed factor designs substantially more complex.\n\r\rData generation\rImagine we has designed an experiment in which we had measured the response (\\(y\\)) under a combination of two different potential influences (Factor A: levels a1 and a2; and Factor B: levels b1, b2 and b3), each combination replicated \\(10\\) times (\\(n=10\\)). As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; nA \u0026lt;- 2 #number of levels of A\r\u0026gt; nB \u0026lt;- 3 #number of levels of B\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; A \u0026lt;- gl(nA, 1, nA, lab = paste(\u0026quot;a\u0026quot;, 1:nA, sep = \u0026quot;\u0026quot;))\r\u0026gt; B \u0026lt;- gl(nB, 1, nB, lab = paste(\u0026quot;b\u0026quot;, 1:nB, sep = \u0026quot;\u0026quot;))\r\u0026gt; data \u0026lt;- expand.grid(A = A, B = B, n = 1:nsample)\r\u0026gt; X \u0026lt;- model.matrix(~A * B, data = data)\r\u0026gt; eff \u0026lt;- c(40, 15, 5, 0, -15, 10)\r\u0026gt; sigma \u0026lt;- 3 #residual standard deviation\r\u0026gt; n \u0026lt;- nrow(data)\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; data$y \u0026lt;- as.numeric(X %*% eff + eps)\r\u0026gt; head(data) #print out the first six rows of the data set\rA B n y\r1 a1 b1 1 38.31857\r2 a2 b1 1 54.30947\r3 a1 b2 1 49.67612\r4 a2 b2 1 45.21153\r5 a1 b3 1 40.38786\r6 a2 b3 1 70.14519\r\u0026gt; \u0026gt; with(data, interaction.plot(A, B, y))\r\u0026gt; \u0026gt; ## ALTERNATIVELY, we could supply the population means and get the effect parameters from these. To\r\u0026gt; ## correspond to the model matrix, enter the population means in the order of: a1b1, a2b1, a1b1,\r\u0026gt; ## a2b2,a1b3,a2b3\r\u0026gt; pop.means \u0026lt;- as.matrix(c(40, 55, 45, 45, 40, 65), byrow = F)\r\u0026gt; ## Generate a minimum model matrix for the effects\r\u0026gt; XX \u0026lt;- model.matrix(~A * B, expand.grid(A = factor(1:2), B = factor(1:3)))\r\u0026gt; ## Use the solve() function to solve what are effectively simultaneous equations\r\u0026gt; (eff \u0026lt;- as.vector(solve(XX, pop.means)))\r[1] 40 15 5 0 -15 10\r\u0026gt; \u0026gt; data$y \u0026lt;- as.numeric(X %*% eff + eps)\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the treatment type. Does treatment type effect the response?.\nAssumptions\rThe assumptions are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages. Importantly, to be considered independent replicates, the replicates must be made at the same scale at which the treatment is applied. For example, if the experiment involves subjecting organisms housed in tanks to different water temperatures, then the unit of replication is the individual tanks not the individual organisms in the tanks. The individuals in a tank are strictly not independent with respect to the treatment.\n\rThe response variable (and thus the residuals) should be normally distributed for each sampled populations (combination of factors). Boxplots of each treatment combination are useful for diagnosing major issues with normality.\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately) for each combination of treatments. Again, boxplots are useful.\n\r\r\rExploratory data analysis\rNormality and Homogeneity of variance\n\u0026gt; boxplot(y ~ A * B, data)\r\u0026gt; \u0026gt; # OR via ggplot2\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = y, x = A, fill = B)) + geom_boxplot()\rConclusions\nthere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical. There is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the \\(y\\)-axis. Hence it there is no evidence of non-homogeneity\nObvious violations could be addressed either by:\n\rtransform the scale of the response variables (to address normality etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\r\r\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor (\\(\\boldsymbol X \\boldsymbol \\beta\\)). In this case, \\(\\boldsymbol \\beta\\) represents the intercept associated with the first combination of groups, as well as the (effects) differences between this intercept and each other group. \\(\\boldsymbol X\\) is the model matrix. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). Exploratory data analysis suggests that the intercept and effects could be drawn from similar distributions (with mean in the \\(10\\)’s and variances in the \\(100\\)’s). Whilst we might therefore be tempted to provide different priors for the intercept, compared to the effects, for a simple model such as this, it is unlikely to be necessary. However, for more complex models, where prior specification becomes more critical, separate priors would probably be necessary. We proceed to code the model into STAN.\n\u0026gt; modelString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma);\r+ + // Priors\r+ beta ~ normal(0,100);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;fact_anovaModel.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~A * B, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = Xmat, nX = ncol(Xmat), n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface. Note that the first time stan is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.rstan \u0026lt;- stan(data = data.list, file = \u0026quot;fact_anovaModel.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;fact_anovaModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.064 seconds (Warm-up)\rChain 1: 0.085 seconds (Sampling)\rChain 1: 0.149 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;fact_anovaModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.07 seconds (Warm-up)\rChain 2: 0.087 seconds (Sampling)\rChain 2: 0.157 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: fact_anovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.19 0.03 0.90 38.43 39.57 40.17 40.81 41.99 710 1.00\rbeta[2] 14.71 0.05 1.33 12.05 13.83 14.71 15.56 17.39 655 1.01\rbeta[3] 4.99 0.04 1.29 2.42 4.11 5.03 5.88 7.35 845 1.00\rbeta[4] -0.35 0.04 1.29 -2.80 -1.22 -0.37 0.53 2.15 907 1.00\rbeta[5] -14.51 0.07 1.86 -18.22 -15.78 -14.49 -13.21 -10.84 772 1.00\rbeta[6] 11.12 0.07 1.85 7.41 9.93 11.15 12.42 14.68 791 1.01\rsigma 2.89 0.01 0.28 2.41 2.70 2.88 3.07 3.48 1521 1.00\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:32:34 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, dimnames(s)$parameters)\r\u0026gt; s = s[, , wch]\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r$`1`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r$`2`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; stan_ac(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\u0026gt; stan_rhat(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\r\u0026gt; stan_ess(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model. Residuals are not computed directly within rstan However, we can calculate them manually form the posteriors.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(dplyr)\r\u0026gt; library(tidyr)\r\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; print(coefs)\rbeta[1] beta[2] beta[3] beta[4] beta[5] beta[6] 40.1693379 14.7128347 5.0341367 -0.3693605 -14.4877785 11.1514524 \u0026gt; \u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A * B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, wch], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\\\\[\u0026quot;, colnames(mcmc))\r\u0026gt; #generate a model matrix\r\u0026gt; Xmat = model.matrix(~A*B, data)\r\u0026gt; ##get median parameter estimates\r\u0026gt; coefs = mcmc[,wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,], mcmc[i, \u0026#39;sigma\u0026#39;]))\r\u0026gt; newdata = data.frame(A=data$A, B=data$B, yRep) %\u0026gt;% gather(key=Sample, value=Value,-A,-B)\r\u0026gt; ggplot(newdata) +\r+ geom_violin(aes(y=Value, x=A, fill=\u0026#39;Model\u0026#39;), alpha=0.5)+\r+ geom_violin(data=data, aes(y=y,x=A,fill=\u0026#39;Obs\u0026#39;), alpha=0.5) +\r+ geom_point(data=data, aes(y=y, x=A), position=position_jitter(width=0.1,height=0),\r+ color=\u0026#39;black\u0026#39;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) +\r+ geom_violin(aes(y=Value, x=B, fill=\u0026#39;Model\u0026#39;, group=B, color=A), alpha=0.5)+\r+ geom_point(data=data, aes(y=y, x=B, group=B,color=A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: fact_anovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.19 0.03 0.90 38.43 39.57 40.17 40.81 41.99 710 1.00\rbeta[2] 14.71 0.05 1.33 12.05 13.83 14.71 15.56 17.39 655 1.01\rbeta[3] 4.99 0.04 1.29 2.42 4.11 5.03 5.88 7.35 845 1.00\rbeta[4] -0.35 0.04 1.29 -2.80 -1.22 -0.37 0.53 2.15 907 1.00\rbeta[5] -14.51 0.07 1.86 -18.22 -15.78 -14.49 -13.21 -10.84 772 1.00\rbeta[6] 11.12 0.07 1.85 7.41 9.93 11.15 12.42 14.68 791 1.01\rsigma 2.89 0.01 0.28 2.41 2.70 2.88 3.07 3.48 1521 1.00\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:32:34 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 7 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 40.2 0.905 38.5 42.0 2 beta[2] 14.7 1.33 12.2 17.5 3 beta[3] 4.99 1.29 2.35 7.29\r4 beta[4] -0.349 1.29 -2.78 2.16\r5 beta[5] -14.5 1.86 -18.4 -11.1 6 beta[6] 11.1 1.85 7.40 14.7 7 sigma 2.89 0.279 2.38 3.43\rConclusions\n\rThe intercept represents the mean of the first combination Aa1:Bb1 is \\(40.2\\)\n\rAa2:Bb1 is \\(14.7\\) units greater than Aa1:Bb1\n\rAa1:Bb2 is \\(5\\) units greater Aa1:Bb1\n\rAa1:Bb3 is \\(-0.335\\) units greater Aa1:Bb1\n\rAa2:Bb2 is \\(-14.6\\) units greater than the difference between (Aa1:Bb2 + Aa2:Bb1) and (2*Aa1:Bb1)\n\rAa2:Bb3 is \\(11.1\\) units greater than the difference between (Aa1:Bb3 + Aa2:Bb1) and (2*Aa1:Bb1)\n\r\rThe \\(95\\)% credibility interval for both interactive effects (Aa2:Bb2 and Aa2:Bb3) do not contain \\(0\\), implying significant interactions between A and B. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[2]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[3]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[4]\u0026quot;])\r[1] 0.777\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[5]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[6]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, c(\u0026quot;beta[5]\u0026quot;, \u0026quot;beta[6]\u0026quot;)])\r[1] 0\rThere is evidence of an interaction between A and B. In a Bayesian context, we can compare models using the leave-one-out cross-validation statistics. Leave-one-out (LOO) cross-validation explores how well a series of models can predict withheld values Vehtari, Gelman, and Gabry (2017). The LOO Information Criterion (LOOIC) is analogous to the AIC except that the LOOIC takes priors into consideration, does not assume that the posterior distribution is drawn from a multivariate normal and integrates over parameter uncertainty so as to yield a distribution of looic rather than just a point estimate. The LOOIC does however assume that all observations are equally influential (it does not matter which observations are left out). This assumption can be examined via the Pareto \\(k\\) estimate (values greater than \\(0.5\\) or more conservatively \\(0.75\\) are considered overly influential). We can compute LOOIC if we store the loglikelihood from our STAN model, which can then be extracted to compute the information criterion using the package loo.\n\u0026gt; library(loo)\r\u0026gt; (full = loo(extract_log_lik(data.rstan)))\rComputed from 2000 by 60 log-likelihood matrix\rEstimate SE\relpd_loo -151.8 5.2\rp_loo 6.3 1.1\rlooic 303.5 10.5\r------\rMonte Carlo SE of elpd_loo is 0.1.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; # now fit a model without main factor\r\u0026gt; modelString2 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma);\r+ + // Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString2, con = \u0026quot;fact_anovaModel2.stan\u0026quot;)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = Xmat, n = nrow(data), nX = ncol(Xmat)))\r\u0026gt; data.rstan.red \u0026lt;- stan(data = data.list, file = \u0026quot;fact_anovaModel2.stan\u0026quot;, chains = nChains,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;fact_anovaModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.061 seconds (Warm-up)\rChain 1: 0.068 seconds (Sampling)\rChain 1: 0.129 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;fact_anovaModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.064 seconds (Warm-up)\rChain 2: 0.062 seconds (Sampling)\rChain 2: 0.126 seconds (Total)\rChain 2: \u0026gt; \u0026gt; (reduced = loo(extract_log_lik(data.rstan.red)))\rComputed from 2000 by 60 log-likelihood matrix\rEstimate SE\relpd_loo -196.6 3.9\rp_loo 4.4 0.5\rlooic 393.2 7.7\r------\rMonte Carlo SE of elpd_loo is 0.1.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; par(mfrow = 1:2, mar = c(5, 3.8, 1, 0) + 0.1, las = 3)\r\u0026gt; plot(full, label_points = TRUE)\r\u0026gt; plot(reduced, label_points = TRUE)\rthe expected out-of-sample predictive accuracy is substantially lower for the model that includes the interaction (full model).\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(A=levels(data$A), B=levels(data$B))\r\u0026gt; Xmat = model.matrix(~A*B,newdata)\r\u0026gt; coefs = mcmc[,wch]\r\u0026gt; fit=coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int=TRUE, conf.method=\u0026#39;HPDinterval\u0026#39;))\r\u0026gt; newdata\rA B estimate std.error conf.low conf.high\r1 a1 b1 40.18899 0.9047706 38.49347 42.01653\r2 a2 b1 54.89674 0.9051450 53.09543 56.61192\r3 a1 b2 45.17758 0.9211897 43.52976 47.13596\r4 a2 b2 45.37979 0.8898798 43.70321 47.20260\r5 a1 b3 39.84017 0.9091679 38.15775 41.68992\r6 a2 b3 65.67259 0.9105872 63.89731 67.49493\r\u0026gt; \u0026gt; ggplot(newdata, aes(y=estimate, x=B, fill=A)) +\r+ geom_blank() +\r+ geom_line(aes(x=as.numeric(B), linetype=A)) +\r+ geom_linerange(aes(ymin=conf.low, ymax=conf.high))+\r+ geom_point(aes(shape=A), size=3)+\r+ scale_y_continuous(\u0026#39;Y\u0026#39;)+\r+ scale_x_discrete(\u0026#39;B\u0026#39;)+\r+ scale_shape_manual(\u0026#39;A\u0026#39;,values=c(21,16))+\r+ scale_fill_manual(\u0026#39;A\u0026#39;,values=c(\u0026#39;white\u0026#39;,\u0026#39;black\u0026#39;))+\r+ scale_linetype_manual(\u0026#39;A\u0026#39;,values=c(\u0026#39;solid\u0026#39;,\u0026#39;dashed\u0026#39;))+\r+ theme_classic() +\r+ theme(legend.justification=c(0,1), legend.position=c(0.05,1),\r+ axis.title.y=element_text(vjust=2, size=rel(1.25)),\r+ axis.title.x=element_text(vjust=-2, size=rel(1.25)),\r+ plot.margin=unit(c(0.5,0.5,2,2), \u0026#39;lines\u0026#39;),\r+ legend.key.size=unit(1,\u0026#39;cm\u0026#39;)) + theme_classic()\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 10.4 0.942 8.64 12.4 2 sd.B 3.06 0.634 1.81 4.25\r3 sd.AB 10.4 0.734 9.02 11.9 4 sd.resid 2.84 0.0811 2.72 3.00\r# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 39.1 1.94 35.0 42.6\r2 sd.B 11.5 1.90 7.70 15.1\r3 sd.AB 39.0 0.946 37.2 41.0\r4 sd.resid 10.6 0.862 9.37 12.5\rApproximately \\(39\\)% of the total finite population standard deviation is due to the interaction between factor A and factor B.\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; Xmat = model.matrix(~A * B, data)\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.913 0.00814 0.898 0.925\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ A * B, data))\rCall:\rlm(formula = y ~ A * B, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.5694 -1.8517 -0.0589 1.7120 6.5966 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.1940 0.8980 44.760 \u0026lt; 2e-16 ***\rAa2 14.7163 1.2700 11.588 2.88e-16 ***\rBb2 4.9823 1.2700 3.923 0.000249 ***\rBb3 -0.3464 1.2700 -0.273 0.786077 Aa2:Bb2 -14.5093 1.7960 -8.079 7.37e-11 ***\rAa2:Bb3 11.1056 1.7960 6.184 8.65e-08 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 2.84 on 54 degrees of freedom\rMultiple R-squared: 0.92, Adjusted R-squared: 0.9125 F-statistic: 124.1 on 5 and 54 DF, p-value: \u0026lt; 2.2e-16\r\rDealing with interactions\rIn the presence of interations, conclusions about the main effects are overly simplistic at best and completely inaccurate at worst. Therefore, in the presense of interactions we should attempt to tease the analysis appart a little. In the current working example, we have identified that there is a significant interaction between Factor A and Factor B. Our exploration of the regression coefficients, indicated that the pattern between b1, b2 and b3 might differ between a1 and a2. Similarly, if we consider the coefficients from the perspective of Factor A, we can see that the patterns between a1 and a2 are similar for b1 and b3, yet very different for b2.\nAt this point, we can then split the two-factor model up into a series of single-factor models, either:\n\rexamining the effects of Factor B separately for each level of Factor A (two single-factor models) or\n\rexamining the effects of Factor A separately for each level of Factor B (three single-factor models)\n\r\rHowever, rather than subset the data and fit isolated smaller models, it is arguably better to treat these explorations as contrasts. As such we could either:\n\rapply specific contrasts to the already fit model\n\rdefine the specific contrasts and use them to refit the model\n\r\rWe will do the former of these options since we have already fit the global model. For this demonstration, we will explore the effect of factor A at each level of factor B. I will illustrate two ways to perform these contrasts on an already fit model:\nBy generating the posteriors of the cell means (means of each factor combination) and then manually compare the appropriate columns for specific levels of factor B.\r\r\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = levels(data$B))\r\u0026gt; Xmat = model.matrix(~A * B, data = newdata)\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; head(fit)\riterations 1 2 3 4 5 6\r[1,] 39.69752 55.00221 44.75174 45.00506 40.68290 66.39012\r[2,] 38.09011 54.98489 46.07381 45.40083 40.12613 65.72993\r[3,] 38.43453 55.88735 45.44974 44.95014 39.88235 65.69477\r[4,] 40.62015 55.15234 45.25819 45.63459 39.89825 65.41017\r[5,] 41.36307 54.24942 45.07712 46.12218 39.55757 64.96870\r[6,] 41.36075 54.50463 45.34008 44.16493 38.64767 66.31968\r\u0026gt; \u0026gt; ## we want to compare columns 2-1, 4-3 and 6-5\r\u0026gt; comps = fit[, c(2, 4, 6)] - fit[, c(1, 3, 5)]\r\u0026gt; tidyMCMC(comps, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 14.7 1.33 12.2 17.5 2 4 0.202 1.29 -2.37 2.74\r3 6 25.8 1.26 23.4 28.3 \rBy generating the posteriors of the cell means (means of each factor combination) and then manually compare the appropriate columns for specific levels of factor B.\r\r\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; wch = grep(\u0026quot;^beta\u0026quot;, colnames(mcmc))\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = levels(data$B))\r\u0026gt; Xmat = model.matrix(~A * B, data = newdata)\r\u0026gt; contr = attr(Xmat, \u0026quot;contrasts\u0026quot;)\r\u0026gt; newdata.a1 = model.frame(~A * B, expand.grid(A = levels(data$A)[1], B = levels(data$B)),\r+ xlev = list(A = levels(data$A), B = levels(data$B)))\r\u0026gt; Xmat.a1 = model.matrix(~A * B, data = newdata.a1, contrasts = contr)\r\u0026gt; newdata.a2 = model.frame(~A * B, expand.grid(A = levels(data$A)[2], B = levels(data$B)),\r+ xlev = list(A = levels(data$A), B = levels(data$B)))\r\u0026gt; Xmat.a2 = model.matrix(~A * B, data = newdata.a2, contrasts = contr)\r\u0026gt; Xmat = Xmat.a2 - Xmat.a1\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 3 x 4\restimate std.error conf.low conf.high\r\u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 14.7 1.33 12.2 17.5 2 0.202 1.29 -2.37 2.74\r3 25.8 1.26 23.4 28.3 \r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\rVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and Waic.” Statistics and Computing 27 (5): 1413–32.\n\r\r\r","date":1581041594,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1581041594,"objectID":"f89993ceecb10d06e4663fd090d8251d","permalink":"/stan/factorial-anova-stan/factorial-anova-stan/","publishdate":"2020-02-06T21:13:14-05:00","relpermalink":"/stan/factorial-anova-stan/factorial-anova-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","anova","factor analysis","factorial designs"],"title":"Factorial Analysis of Variance - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","ancova","JAGS","factor analysis"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rPrevious tutorials have concentrated on designs for either continuous (Regression) or categorical (ANOVA) predictor variables. Analysis of covariance (ANCOVA) models are essentially ANOVA models that incorporate one or more continuous and categorical variables (covariates). Although the relationship between a response variable and a covariate may itself be of substantial clinical interest, typically covariate(s) are incorporated to reduce the amount of unexplained variability in the model and thereby increase the power of any treatment effects.\nIn ANCOVA, a reduction in unexplained variability is achieved by adjusting the response (to each treatment) according to slight differences in the covariate means as well as accounting for any underlying trends between the response and covariate(s). To do so, the extent to which the within treatment group small differences in covariate means between groups and treatment groups are essentially compared via differences in their \\(y\\)-intercepts. The total variation is thereafter partitioned into explained (using the deviations between the overall trend and trends approximated for each of the treatment groups) and unexplained components (using the deviations between the observations and the approximated within group trends). In this way, ANCOVA can be visualized as a regular ANOVA in which the group and overall means are replaced by group and overall trendlines. Importantly, it should be apparent that ANCOVA is only appropriate when each of the within group trends have the same slope and are thus parallel to one another and the overall trend. Furthermore, ANCOVA is not appropriate when the resulting adjustments must be extrapolated from a linear relationship outside the measured range of the covariate.\nAs an example, an experiment might be set up to investigate the energetic impacts of sexual vs parthenogenetic (egg development without fertilization) reproduction on leaf insect food consumption. To do so, researchers could measure the daily food intake of individual adult female leaf insects from female only (parthenogenetic) and mixed (sexual) populations. Unfortunately, the available individual leaf insects varied substantially in body size which was expected to increase the variability of daily food intake of treatment groups. Consequently, the researchers also measured the body mass of the individuals as a covariate, thereby providing a means by which daily food consumption could be standardized for body mass. ANCOVA attempts to reduce unexplained variability by standardising the response to the treatment by the effects of the specific covariate condition. Thus ANCOVA provides a means of exercising some statistical control over the variability when it is either not possible or not desirable to exercise experimental control (such as blocking or using otherwise homogeneous observations).\n\rNull hypothesis\rFactor A: the main treatment effect\n\r\\(H_0(A):\\mu_1(adj)=\\mu_2(adj)=\\ldots=\\mu_i(adj)=\\mu(adj)\\)\r\rThe adjusted population group means are all equal. The mean of population \\(1\\) adjusted for the covariate is equal to that of population \\(2\\) adjusted for the covariate and so on, and thus all population means adjusted for the covariate are equal to an overall adjusted mean. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group adjusted mean and the overall adjusted mean (\\(\\alpha_i(adj)=\\mu_i(adj)−\\mu(adj)\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1(adj)=\\alpha_2(adj)=\\ldots=\\alpha_i(adj)=0\\)\r\rThe effect of each group equals zero. If one or more of the \\(\\alpha_i(adj)\\) are different from zero (the response mean for this treatment differs from the overall response mean), the null hypothesis is not true, indicating that the treatment does affect the response variable.\nFactor B: the covariate effect\n\r\\(H_0(B):\\beta_1(pooled)=0\\)\r\rThe pooled population slope equals zero. Note, that this null hypothesis is rarely of much interest. It is precisely because of this nuisance relationship that ANCOVA designs are applied.\n\rLinear models\rOne or more covariates can be incorporated into single factor, nested, factorial and partly nested designs in order to reduce the unexplained variation. Fundamentally, the covariate(s) are purely used to adjust the response values prior to the regular analysis. The difficulty is in determining the appropriate adjustments. Following is a list of the appropriate linear models and adjusted response calculations for a range of ANCOVA designs. Note that these linear models do not include interactions involving the covariates as these are assumed to be zero. The inclusion of these interaction terms is a useful means of testing the homogeneity of slopes assumption.\n\rSingle categorical and single covariate\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\beta(x_{ij}-\\bar{x}) + \\epsilon_{ij}\\)\n\rAdjustments: \\(y_{ij(adj)}=y_{ij} - b(x_{ij} - \\bar{x})\\)\n\r\rSingle categorical and two covariates\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\beta_{YX}(x_{ij}-\\bar{x}) + \\beta_{YZ}(z_{ij}-\\bar{z}) + \\epsilon_{ij}\\)\n\rAdjustments: \\(y_{ij(adj)}=y_{ij} - b_{YX}(x_{ij} - \\bar{x}) - b_{YZ}(z_{ij} - \\bar{z})\\)\n\r\rFactorial designs\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\gamma_j + (\\alpha\\gamma)_{ij}+ \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijk}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijk} - b(x_{ijk} - \\bar{x})\\)\n\r\rNested designs\n\rLinear model: \\(y_{ijk}=\\mu + \\alpha_i + \\gamma_{j(i)} + \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijk}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijk} - b(x_{ijk} - \\bar{x})\\)\n\r\rPartly nested designs\n\rLinear model: \\(y_{ijkl}=\\mu + \\alpha_i + \\gamma_{j(i)} + \\delta_k + (\\alpha\\delta)_{ik} + (\\gamma\\delta)_{j(i)k} + \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijkl}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijkl} - b_{between}(x_{i} - \\bar{x}) - b_{within}(x_{ijk} - \\bar{x}_i)\\)\n\r\r\r\rAnalysis of variance\rIn ANCOVA, the total variability of the response variable is sequentially partitioned into components explained by each of the model terms, starting with the covariate and is therefore equivalent to performing a regular analysis of variance on the response variables that have been adjusted for the covariate. The appropriate unexplained residuals and therefore the appropriate F-ratios for each factor differ according to the different null hypotheses associated with different linear models as well as combinations of fixed and random factors in the model (see the following tables). Note that since the covariate levels measured are typically different for each group, ANCOVA designs are inherently non-orthogonal (unbalanced). Consequently, sequential (Type I sums of squares) should not be used. For very simple Ancova designs that incorporate a single categorical and single covariate, Type I sums of squares can be used provided the covariate appears in the linear model first (and thus is partitioned out last) as we are typically not interested in estimating this effect.\n\u0026gt; ancova_table\rdf MS F-ratio (A\u0026amp;B fixed) F-ratio (B fixed) Factor A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; Factor B \u0026quot;1\u0026quot; \u0026quot;MS B\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; Factor AB \u0026quot;a-1\u0026quot; \u0026quot;MS AB\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot;\rResidual \u0026quot;(n-2)a\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \rThe corresponding R syntax is given below.\n\u0026gt; anova(lm(DV ~ B * A, dataset))\r\u0026gt; # OR\r\u0026gt; anova(aov(DV ~ B * A, dataset))\r\u0026gt; # OR (make sure not using treatment contrasts)\r\u0026gt; Anova(lm(DV ~ B * A, dataset), type = \u0026quot;III\u0026quot;)\r\rAssumptions\rAs ANCOVA designs are essentially regular ANOVA designs that are first adjusted (centered) for the covariate(s), ANCOVA designs inherit all of the underlying assumptions of the appropriate ANOVA design. Specifically, hypothesis tests assume that:\n\rThe appropriate residuals are normally distributed. Boxplots using the appropriate scale of replication (reflecting the appropriate residuals/F-ratio denominator, see the above tables) should be used to explore normality. Scale transformations are often useful.\n\rThe appropriate residuals are equally varied. Boxplots and plots of means against variance (using the appropriate scale of replication) should be used to explore the spread of values. Residual plots should reveal no patterns. Scale transformations are often useful.\n\rThe appropriate residuals are independent of one another.\n\rThe relationship between the response variable and the covariate should be linear. Linearity can be explored using scatterplots and residual plots should reveal no patterns.\n\rFor repeated measures and other designs in which treatment levels within blocks can not be be randomly ordered, the variance/covariance matrix is assumed to display sphericity.\n\rFor designs that utilise blocking, it is assumed that there are no block by within block interactions.\n\r\rHomogeneity of Slopes\nIn addition to the above assumptions, ANCOVA designs also assume that slopes of relationships between the response variable and the covariate(s) are the same for each treatment level (group). That is, all the trends are parallel. If the individual slopes deviate substantially from each other (and thus the overall slope), then adjustments made to each of the observations are nonsensical. This situation is analogous to an interaction between two or more factors. In ANCOVA, interactions involving the covariate suggest that the nature of the relationship between the response and the covariate differs between the levels of the categorical treatment. More importantly, they also indicate that whether or not there is an effect of the treatment depends on what range of the covariate you are focussed on. Clearly then, it is not possible to make conclusions about the main effects of treatments in the presence of such interactions. The assumption of homogeneity of slopes can be examined via interaction plots or more formally, by testing hypotheses about the interactions between categorical variables and the covariate(s). There are three broad approaches for dealing with ANCOVA designs with heterogeneous slopes and selection depends on the primary focus of the study.\nWhen the primary objective of the analysis is to investigate the effects of categorical treatments, it is possible to adopt an approach similar to that taken when exploring interactions in multiple regression. The effect of treatments can be examined at specific values of the covariate (such as the mean and \\(\\pm\\) one standard deviation). This approach is really only useful at revealing broad shifts in patterns over the range of the covariate and if the selected values of the covariate do not have some inherent clinical meaning (selected arbitrarily), then the outcomes can be of only limited clinical interest.\n\rAlternatively, the Johnson-Neyman technique (or Wilxon modification thereof) procedure indicates the ranges of the covariate over which the individual regression lines of pairs of treatment groups overlap or cross. Although less powerful than the previous approach, the Wilcox(J-N) procedure has the advantage of revealing the important range (ranges for which the groups are different and not different) of the covariate rather than being constrained by specific levels selected.\n\rUse contrast treatments to split up the interaction term into its constituent contrasts for each level of the treatment. Essentially this compares each of the treatment level slopes to the slope from the “control” group and is useful if the primary focus is on the relationships between the response and the covariate.\n\r\rSimilar covariate ranges\nAdjustments made to the response means in an attempt to statistically account for differences in the covariate involve predicting mean response values along displaced linear relationships between the overall response and covariate variables. The degree of trend displacement for any given group is essentially calculated by multiplying the overall regression slope by the degree of difference between the overall covariate mean and the mean of the covariate for that group. However, when the ranges of the covariate within each of the groups differ substantially from one another, these adjustments are effectively extrapolations and therefore of unknown reliability. If a simple ANOVA of the covariate modelled against the categorical factor indicates that the covariate means differ significantly between groups, it may be necessary to either remove extreme observations or reconsider the analysis.\nRobust ANCOVA\nANCOVA based on rank transformed data can be useful for accommodating data with numerous problematic outliers. Nevertheless, problems about the difficulties of detecting interactions from rank transformed data, obviously have implications for inferential tests of homogeneity of slopes. Randomisation tests that maintain response0covariate pairs and repeatedly randomise these observations amongst the levels of the treatments can also be useful, particularly when there is doubt over the independence of observations. Both planned and unplanned comparisons follow those of other ANOVA chapters without any real additional complications. Notably, recent implementations of the Tukey’s test (within R) accommodate unbalanced designs and thus negate the need for some of the more complicated and specialised techniques that have been highlighted in past texts.\n\r\rData generation\rConsider an experimental design aimed at exploring the effects of a categorical variable with three levels (Group A, Group B and Group C) on a response. From previous studies, we know that the response is influenced by another variable (covariate). Unfortunately, it was not possible to ensure that all sampling units were the same degree of the covariate. Therefore, in an attempt to account for this anticipated extra source of variability, we measured the level of the covariate for each sampling unit. Actually, in allocating treatments to the various treatment groups, we tried to ensure a similar mean and range of the covariate within each group.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 10\r\u0026gt; p \u0026lt;- 3\r\u0026gt; A.eff \u0026lt;- c(40, -15, -20)\r\u0026gt; beta \u0026lt;- -0.45\r\u0026gt; sigma \u0026lt;- 4\r\u0026gt; B \u0026lt;- rnorm(n * p, 0, 15)\r\u0026gt; A \u0026lt;- gl(p, n, lab = paste(\u0026quot;Group\u0026quot;, LETTERS[1:3]))\r\u0026gt; mm \u0026lt;- model.matrix(~A + B)\r\u0026gt; data \u0026lt;- data.frame(A = A, B = B, Y = as.numeric(c(A.eff, beta) %*% t(mm)) + rnorm(n * p, 0, 4))\r\u0026gt; data$B \u0026lt;- data$B + 20\r\u0026gt; head(data)\rA B Y\r1 Group A 11.59287 45.48907\r2 Group A 16.54734 40.37341\r3 Group A 43.38062 33.05922\r4 Group A 21.05763 43.03660\r5 Group A 21.93932 42.41363\r6 Group A 45.72597 31.17787\rExploratory data analysis\r\u0026gt; library(car)\r\u0026gt; scatterplot(Y ~ B | A, data = data)\r\u0026gt; \u0026gt; boxplot(Y ~ A, data)\r\u0026gt; \u0026gt; # OR via ggplot\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = Y, x = B, group = A)) + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;)\r\u0026gt; \u0026gt; ggplot(data, aes(y = Y, x = A)) + geom_boxplot()\rConclusions\nThere is no evidence of obvious non-normality. The assumption of linearity seems reasonable. The variability of the three groups seems approximately equal. The slopes (\\(Y\\) vs B trends) appear broadly similar for each treatment group.\nWe can explore inferential evidence of unequal slopes by examining estimated effects of the interaction between the categorical variable and the covariate. Note, pay no attention to the main effects - only the interaction. Even though I intend to illustrate Bayesian analyses here, for such a simple model, it is considerably simpler to use traditional OLS for testing for the presence of an interaction.\n\u0026gt; anova(lm(Y ~ B * A, data = data))\rAnalysis of Variance Table\rResponse: Y\rDf Sum Sq Mean Sq F value Pr(\u0026gt;F) B 1 989.99 989.99 92.6782 1.027e-09 ***\rA 2 2320.05 1160.02 108.5956 9.423e-13 ***\rB:A 2 51.36 25.68 2.4041 0.1118 Residuals 24 256.37 10.68 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rThere is very little evidence to suggest that the assumption of equal slopes will be inappropriate.\n\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor (\\(\\boldsymbol X \\boldsymbol \\beta\\)). In this case, \\(\\boldsymbol \\beta\\) represents the vector of \\(\\beta\\)’s - the intercept associated with the first group, the (effects) differences between this intercept and the intercepts for each other group as well as the slope associated with the continuous covariate. \\(\\boldsymbol X\\) is the model matrix. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). Note, exploratory data analysis suggests that while the intercept (intercept of Group A) and categorical predictor effects (differences between intercepts of each of the Group and Group A’s intercept) could be drawn from a similar distribution (with mean in the \\(10\\)’s and variances in the \\(100\\)’s), the slope (effect associated with Group A linear relationship) is likely to be an order of magnitude less. We might therefore be tempted to provide different priors for the intercept, categorical effects and slope effect. For a simple model such as this, it is unlikely to be necessary. However, for more complex models, where prior specification becomes more critical, separate priors would probably be necessary.\nWe proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Note the following example as group means calculated as derived posteriors.\n\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mean[i],tau)\r+ mean[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ #Priors\r+ for (i in 1:ngroups) {\r+ beta[i] ~ dnorm(0, 1.0E-6) + }\r+ sigma ~ dunif(0, 100)\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;ancovaModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X \u0026lt;- model.matrix(~A + B, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = Y, X = X, n = nrow(data), ngroups = ncol(X)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;ancovaModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 30\rUnobserved stochastic nodes: 5\rTotal graph size: 224\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;ancovaModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 51.001 1.529 47.977 50.009 50.995 52.016 53.980 1.001 15000\rbeta[2] -16.254 1.623 -19.455 -17.342 -16.259 -15.170 -13.090 1.001 10000\rbeta[3] -20.656 1.667 -23.941 -21.752 -20.672 -19.566 -17.330 1.001 15000\rbeta[4] -0.484 0.048 -0.577 -0.516 -0.484 -0.453 -0.389 1.001 15000\rsigma 3.607 0.526 2.740 3.236 3.546 3.912 4.793 1.001 7400\rdeviance 160.601 3.509 155.859 158.002 159.905 162.478 169.218 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 6.2 and DIC = 166.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\).\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters (such as \\(\\beta\\)s).\n\u0026gt; data.mcmc = as.mcmc(data.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3689 3746 0.985 beta[2] 2 3938 3746 1.050 beta[3] 2 3853 3746 1.030 beta[4] 2 3811 3746 1.020 deviance 2 3895 3746 1.040 sigma 5 5552 3746 1.480 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3770 3746 1.010 beta[2] 2 3729 3746 0.995 beta[3] 2 3811 3746 1.020 beta[4] 2 3895 3746 1.040 deviance 2 3855 3746 1.030 sigma 4 5247 3746 1.400 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] beta[3] beta[4] deviance\rLag 0 1.000000000 1.000000000 1.000000000 1.0000000000 1.000000000\rLag 1 0.017910611 -0.003186598 0.009149022 0.0039919666 0.266991768\rLag 5 -0.004399550 -0.002747041 -0.001891657 -0.0213261543 0.005499734\rLag 10 -0.001972741 0.005855050 -0.004887402 0.0186597337 -0.008683579\rLag 50 -0.002269863 0.015348324 -0.001446494 -0.0004828212 -0.010725173\rsigma\rLag 0 1.000000000\rLag 1 0.382742913\rLag 5 0.007377659\rLag 10 -0.001255836\rLag 50 0.003892668\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. For more complex models (those that contain multiple effects), it is also advisable to plot the residuals against each of the individual predictors. For sampling designs that involve sample collection over space or time, it is also a good idea to explore whether there are any temporal or spatial patterns in the residuals.\nThere are numerous situations (e.g. when applying specific variance-covariance structures to a model) where raw residuals do not reflect the interior workings of the model. Typically, this is because they do not take into account the variance-covariance matrix or assume a very simple variance-covariance matrix. Since the purpose of exploring residuals is to evaluate the model, for these cases, it is arguably better to draw conclusions based on standardized (or studentised) residuals. Unfortunately the definitions of standardised and studentised residuals appears to vary and the two terms get used interchangeably. I will adopt the following definitions:\n\rStandardised residuals. The raw residuals divided by the true standard deviation of the residuals (which of course is rarely known).\n\rStudentised residuals. The raw residuals divided by the standard deviation of the residuals. Note that externally studentised residuals are calculated by dividing the raw residuals by a unique standard deviation for each observation that is calculated from regressions having left each successive observation out.\n\rPearson residuals. The raw residuals divided by the standard deviation of the response variable.\n\r\rhe mark of a good model is being able to predict well. In an ideal world, we would have sufficiently large sample size as to permit us to hold a fraction (such as \\(25\\)%) back thereby allowing us to train the model on \\(75\\)% of the data and then see how well the model can predict the withheld \\(25\\)%. Unfortunately, such a luxury is still rare. The next best option is to see how well the model can predict the observed data. Models tend to struggle most with the extremes of trends and have particular issues when the extremes approach logical boundaries (such as zero for count data and standard deviations). We can use the fitted model to generate random predicted observations and then explore some properties of these compared to the actual observed data.\nRather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model. Residuals are not computed directly within JAGS. However, we can calculate them manually form the posteriors.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~A + B, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:4]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata = data.frame(A = data$A, B = data$B, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -A, -B)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = A, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data, aes(y = Y, x = A,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data, aes(y = Y,\r+ x = A), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = B, fill = \u0026quot;Model\u0026quot;,\r+ group = B, color = A), alpha = 0.5) + geom_point(data = data,\r+ aes(y = Y, x = B, group = B, color = A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;ancovaModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 51.001 1.529 47.977 50.009 50.995 52.016 53.980 1.001 15000\rbeta[2] -16.254 1.623 -19.455 -17.342 -16.259 -15.170 -13.090 1.001 10000\rbeta[3] -20.656 1.667 -23.941 -21.752 -20.672 -19.566 -17.330 1.001 15000\rbeta[4] -0.484 0.048 -0.577 -0.516 -0.484 -0.453 -0.389 1.001 15000\rsigma 3.607 0.526 2.740 3.236 3.546 3.912 4.793 1.001 7400\rdeviance 160.601 3.509 155.859 158.002 159.905 162.478 169.218 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 6.2 and DIC = 166.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 6 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 51.0 1.53 48.0 53.9 2 beta[2] -16.3 1.62 -19.5 -13.1 3 beta[3] -20.7 1.67 -23.9 -17.3 4 beta[4] -0.484 0.0478 -0.577 -0.389\r5 deviance 161. 3.51 155. 167. 6 sigma 3.61 0.526 2.69 4.70 \rConclusions\n\rThe intercept of the first group (Group A) is \\(51\\).\n\rThe mean of the second group (Group B) is \\(-16.3\\) units greater than (A).\n\rThe mean of the third group (Group C) is \\(-20.7\\) units greater than (A).\n\rA one unit increase in B in Group A is associated with a \\(-0.484\\) units increase in \\(Y\\).\n\r\rThe \\(95\\)% confidence interval for the effects of Group B, Group C and the partial slope associated with B do not overlapp with 0 implying a significant difference between group A and groups B, C and a significant negative relationship with B. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[4]\u0026quot;]) # effect of (slope = 0)\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, 2:4]) # effect of (model)\r[1] 0\rThere is evidence that the reponse differs between the groups.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = seq(min(data$B), max(data$B),\r+ len = 100))\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = B, fill = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~A + B, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$Y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = B, fill = A)) + geom_point(data = rdata,\r+ aes(y = partial.resid, x = B, color = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\r\rPosteriors\rIn frequentist statistics, when we have more than two groups, we are typically not only interested in whether there is evidence for an overall “effect” of a factor - we are also interested in how various groups compare to one another. To explore these trends, we either compare each group to each other in a pairwise manner (controlling for family-wise Type I error rates) or we explore an independent subset of the possible comparisons. Although these alternate approaches can adequately address a specific research agenda, often they impose severe limitations and compromises on the scope and breadth of questions that can be asked of your data. The reason for these limitations is that in a frequentist framework, any single hypothesis carries with it a (nominally) \\(5\\)% chance of a false rejection (since it is based on long-run frequency). Thus, performing multiple tests are likely to compound this error rate. The point is, that each comparison is compared to its own probability distribution (and each carries a \\(5\\)% error rate). By contrast, in Bayesian statistics, all comparisons (contrasts) are drawn from the one (hopefully stable and convergent) posterior distribution and this posterior is invariant to the type and number of comparisons drawn. Hence, the theory clearly indicates that having generated our posterior distribution, we can then query this distribution in any way that we wish thereby allowing us to explore all of our research questions simultaneously.\nBayesian “contrasts” can be performed either:\n\rwithin the Bayesian sampling model or\n\rconstruct them from the returned MCMC samples (they are drawn from the posteriors)\n\r\rOnly the latter will be demonstrated as it provides a consistent approach across all routines. In order to allow direct comparison to the frequentist equivalents, I will explore the same set of planned and Tukey’s test comparisons described here. For the “planned comparison” we defined two contrasts: 1) group B vs group C; and 2) group A vs the average of groups B and C. Of course each of these could be explored at multiple values of B, however, since we fit an additive model (which assumes that the slopes are homogeneous), the contrasts will be constant throughout the domain of B.\nLets start by comparing each group to each other group in a pairwise manner. Arguably the most elegant way to do this is to generate a Tukey’s contrast matrix. This is a model matrix specific to comparing each group to each other group. Again, since the lines are parallel, it does not really matter what level of B we estimate these efffects at - so lets use the mean B.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:4]\r\u0026gt; newdata \u0026lt;- data.frame(A = levels(data$A), B = mean(data$B))\r\u0026gt; # A Tukeys contrast matrix\r\u0026gt; library(multcomp)\r\u0026gt; tuk.mat \u0026lt;- contrMat(n = table(newdata$A), type = \u0026quot;Tukey\u0026quot;)\r\u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data = newdata)\r\u0026gt; pairwise.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; pairwise.mat\r(Intercept) AGroup B AGroup C B\rGroup B - Group A 0 1 0 0\rGroup C - Group A 0 0 1 0\rGroup C - Group B 0 -1 1 0\r\u0026gt; \u0026gt; mcmc_areas(coefs %*% t(pairwise.mat))\r\u0026gt; \u0026gt; (comps = tidyMCMC(coefs %*% t(pairwise.mat), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 Group B - Group A -16.3 1.62 -19.5 -13.1 2 Group C - Group A -20.7 1.67 -23.9 -17.3 3 Group C - Group B -4.40 1.69 -7.68 -1.04\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rWith a couple of modifications, we could also express this as percentage changes. A percentage change represents the change (difference between groups) divided by one of the groups (determined by which group you want to express the percentage change to). Hence, we generate an additional mcmc matrix that represents the cell means for the divisor group (group we want to express change relative to). Since the tuk.mat defines comparisons as \\(-1\\) and \\(1\\) pairs, if we simply replace all the \\(-1\\) with \\(0\\), the eventual matrix multiplication will result in estimates of the divisor cell means instread of the difference. We can then divide the original mcmc matrix above with this new divisor mcmc matrix to yeild a mcmc matrix of percentage change.\n\u0026gt; # Modify the tuk.mat to replace -1 with 0. This will allow us to get a\r\u0026gt; # mcmc matrix of ..\r\u0026gt; tuk.mat[tuk.mat == -1] = 0\r\u0026gt; comp.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; comp.mat\r(Intercept) AGroup B AGroup C B\rGroup B - Group A 1 1 0 19.29344\rGroup C - Group A 1 0 1 19.29344\rGroup C - Group B 1 0 1 19.29344\r\u0026gt; \u0026gt; comp.mcmc = 100 * (coefs %*% t(pairwise.mat))/coefs %*% t(comp.mat)\r\u0026gt; (comps = tidyMCMC(comp.mcmc, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 Group B - Group A -64.3 8.74 -82.4 -48.0 2 Group C - Group A -99.0 12.6 -124. -74.8 3 Group C - Group B -21.4 9.02 -39.2 -4.13\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size (%)\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rAnd now for the specific planned comparisons (Group B vs Group C as well as Group A vs the average of Groups B and C). This is achieved by generating our own contrast matrix (defining the contributions of each group to each contrast).\n\u0026gt; c.mat = rbind(c(0, 1, -1), c(1/2, -1/3, -1/3))\r\u0026gt; c.mat\r[,1] [,2] [,3]\r[1,] 0.0 1.0000000 -1.0000000\r[2,] 0.5 -0.3333333 -0.3333333\r\u0026gt; \u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:4]\r\u0026gt; newdata \u0026lt;- data.frame(A = levels(data$A), B = mean(data$B))\r\u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data = newdata)\r\u0026gt; c.mat = c.mat %*% Xmat\r\u0026gt; c.mat\r(Intercept) AGroup B AGroup C B\r[1,] 0.0000000 1.0000000 -1.0000000 0.000000\r[2,] -0.1666667 -0.3333333 -0.3333333 -3.215574\r\u0026gt; \u0026gt; (comps = tidyMCMC(as.mcmc(coefs %*% t(c.mat)), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 4.40 1.69 1.04 7.68\r2 var2 5.36 0.790 3.80 6.93\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n beta[1] beta[2] beta[3] beta[4] deviance sigma\r[1,] 49.12140 -12.79223 -18.26477 -0.4972722 161.2762 3.888826\r[2,] 51.03351 -16.80051 -20.03944 -0.4767683 156.2198 2.958015\r[3,] 51.55756 -16.80292 -20.00531 -0.4479209 161.2724 3.984268\r[4,] 50.15508 -15.15637 -21.01837 -0.4787121 158.5376 3.943798\r[5,] 52.94683 -17.04043 -22.95279 -0.5209229 157.8834 3.194266\r[6,] 52.16920 -17.91313 -23.53270 -0.4678091 159.4251 3.239537\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 3.12 1.18 0.739 5.41\r2 sd.B 7.12 0.703 5.73 8.49\r3 sd.resid 3.46 0.169 3.26 3.79\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 22.9 6.62 8.09 34.1\r2 sd.B 52.3 4.54 43.1 61.2\r3 sd.resid 24.9 3.22 20.8 31.9\rApproximately \\(22.9\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; Xmat = model.matrix(~A + B, data)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$Y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.905 0.0148 0.877 0.922\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(Y ~ A + B, data))\rCall:\rlm(formula = Y ~ A + B, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.4381 -2.2244 -0.6829 2.1732 8.6607 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 51.00608 1.44814 35.22 \u0026lt; 2e-16 ***\rAGroup B -16.25472 1.54125 -10.55 6.92e-11 ***\rAGroup C -20.65596 1.57544 -13.11 5.74e-13 ***\rB -0.48399 0.04526 -10.69 5.14e-11 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 3.44 on 26 degrees of freedom\rMultiple R-squared: 0.9149, Adjusted R-squared: 0.9051 F-statistic: 93.22 on 3 and 26 DF, p-value: 4.901e-14\r\rDealing with heterogeneous slopes\rGenerate the data with heterogeneous slope effects.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 10\r\u0026gt; p \u0026lt;- 3\r\u0026gt; A.eff \u0026lt;- c(40, -15, -20)\r\u0026gt; beta \u0026lt;- c(-0.45, -0.1, 0.5)\r\u0026gt; sigma \u0026lt;- 4\r\u0026gt; B \u0026lt;- rnorm(n * p, 0, 15)\r\u0026gt; A \u0026lt;- gl(p, n, lab = paste(\u0026quot;Group\u0026quot;, LETTERS[1:3]))\r\u0026gt; mm \u0026lt;- model.matrix(~A * B)\r\u0026gt; data1 \u0026lt;- data.frame(A = A, B = B, Y = as.numeric(c(A.eff, beta) %*% t(mm)) + rnorm(n * p, 0, 4))\r\u0026gt; data1$B \u0026lt;- data1$B + 20\r\u0026gt; head(data1)\rA B Y\r1 Group A 11.59287 45.48907\r2 Group A 16.54734 40.37341\r3 Group A 43.38062 33.05922\r4 Group A 21.05763 43.03660\r5 Group A 21.93932 42.41363\r6 Group A 45.72597 31.17787\rExploratory data analysis\r\u0026gt; scatterplot(Y ~ B | A, data = data1)\r\u0026gt; \u0026gt; boxplot(Y ~ A, data1)\r\u0026gt; \u0026gt; # OR via ggplot\r\u0026gt; ggplot(data1, aes(y = Y, x = B, group = A)) + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;)\r\u0026gt; \u0026gt; ggplot(data1, aes(y = Y, x = A)) + geom_boxplot()\rThe slopes (\\(Y\\) vs B trends) do appear to differ between treatment groups - in particular, Group C seems to portray a different trend to Groups A and B.\n\u0026gt; anova(lm(Y ~ B * A, data = data1))\rAnalysis of Variance Table\rResponse: Y\rDf Sum Sq Mean Sq F value Pr(\u0026gt;F) B 1 442.02 442.02 41.380 1.187e-06 ***\rA 2 2760.60 1380.30 129.217 1.418e-13 ***\rB:A 2 285.75 142.87 13.375 0.0001251 ***\rResiduals 24 256.37 10.68 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rThere is strong evidence to suggest that the assumption of equal slopes is violated.\n\rFitting the model\r\u0026gt; modelString2 = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mean[i],tau)\r+ mean[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ #Priors\r+ for (i in 1:ngroups) {\r+ beta[i] ~ dnorm(0, 1.0E-6) + }\r+ sigma ~ dunif(0, 100)\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;ancovaModel2.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X \u0026lt;- model.matrix(~A * B, data1)\r\u0026gt; data1.list \u0026lt;- with(data1, list(y = Y, X = X, n = nrow(data1), ngroups = ncol(X)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model).\n\u0026gt; data1.r2jags \u0026lt;- jags(data = data1.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;ancovaModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 30\rUnobserved stochastic nodes: 7\rTotal graph size: 286\rInitializing model\r\u0026gt; \u0026gt; print(data1.r2jags)\rInference for Bugs model at \u0026quot;ancovaModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 48.194 2.035 44.200 46.864 48.200 49.531 52.217 1.001 15000\rbeta[2] -10.562 2.884 -16.240 -12.453 -10.586 -8.688 -4.814 1.001 8100\rbeta[3] -26.538 2.568 -31.636 -28.207 -26.525 -24.858 -21.431 1.001 15000\rbeta[4] -0.351 0.082 -0.512 -0.404 -0.351 -0.297 -0.188 1.001 15000\rbeta[5] -0.271 0.110 -0.491 -0.344 -0.270 -0.198 -0.055 1.001 15000\rbeta[6] 0.270 0.117 0.039 0.194 0.270 0.346 0.500 1.001 15000\rsigma 3.454 0.535 2.601 3.074 3.396 3.757 4.689 1.002 1800\rdeviance 157.761 4.417 151.465 154.544 156.990 160.166 168.119 1.001 3000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 9.8 and DIC = 167.5\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\r\u0026gt; denplot(data1.r2jags, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(data1.r2jags, parms = c(\u0026quot;beta\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters (such as \\(\\beta\\)s).\n\u0026gt; data1.mcmc = as.mcmc(data1.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data1.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3853 3746 1.030 beta[2] 2 3689 3746 0.985 beta[3] 2 3895 3746 1.040 beta[4] 2 3649 3746 0.974 beta[5] 2 3918 3746 1.050 beta[6] 2 3770 3746 1.010 deviance 2 3938 3746 1.050 sigma 4 5018 3746 1.340 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3853 3746 1.030 beta[2] 2 3570 3746 0.953 beta[3] 2 3811 3746 1.020 beta[4] 2 3770 3746 1.010 beta[5] 2 3770 3746 1.010 beta[6] 2 3895 3746 1.040 deviance 2 3981 3746 1.060 sigma 4 5131 3746 1.370 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data1.mcmc)\rbeta[1] beta[2] beta[3] beta[4] beta[5]\rLag 0 1.000000000 1.000000000 1.000000000 1.000000000 1.0000000000\rLag 1 -0.002520665 -0.007698073 0.001992162 0.000509790 -0.0005326877\rLag 5 0.001007950 0.009095032 0.001511518 -0.006890623 0.0025773251\rLag 10 -0.011280919 0.007907450 0.005969613 -0.006999313 0.0040454668\rLag 50 -0.012861369 -0.019813696 0.002604518 -0.008791380 -0.0136623372\rbeta[6] deviance sigma\rLag 0 1.000000000 1.000000000 1.0000000000\rLag 1 0.004381248 0.332075434 0.4518687724\rLag 5 -0.001182603 0.032092130 0.0351574955\rLag 10 -0.004191097 0.003338842 0.0005457235\rLag 50 0.002636154 -0.005426687 0.0039447210\r\rModel validation\r\u0026gt; mcmc = data1.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = data1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; mcmc = data1.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = newdata1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; newdata1 = newdata1 %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata1) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata1) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = data1.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = data1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data1 = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data1.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~A * B, data1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:6]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data1), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata1 = data.frame(A = data1$A, B = data1$B, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -A, -B)\r\u0026gt; ggplot(newdata1) + geom_violin(aes(y = Value, x = A, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data1, aes(y = Y, x = A,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data1, aes(y = Y,\r+ x = A), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata1) + geom_violin(aes(y = Value, x = B, fill = \u0026quot;Model\u0026quot;,\r+ group = B, color = A), alpha = 0.5) + geom_point(data = data1,\r+ aes(y = Y, x = B, group = B, color = A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; mcmc_intervals(data1.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(data1.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rFirst, we look at the results from the additive model.\n\u0026gt; print(data1.r2jags)\rInference for Bugs model at \u0026quot;ancovaModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 48.194 2.035 44.200 46.864 48.200 49.531 52.217 1.001 15000\rbeta[2] -10.562 2.884 -16.240 -12.453 -10.586 -8.688 -4.814 1.001 8100\rbeta[3] -26.538 2.568 -31.636 -28.207 -26.525 -24.858 -21.431 1.001 15000\rbeta[4] -0.351 0.082 -0.512 -0.404 -0.351 -0.297 -0.188 1.001 15000\rbeta[5] -0.271 0.110 -0.491 -0.344 -0.270 -0.198 -0.055 1.001 15000\rbeta[6] 0.270 0.117 0.039 0.194 0.270 0.346 0.500 1.001 15000\rsigma 3.454 0.535 2.601 3.074 3.396 3.757 4.689 1.002 1800\rdeviance 157.761 4.417 151.465 154.544 156.990 160.166 168.119 1.001 3000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 9.8 and DIC = 167.5\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; tidyMCMC(as.mcmc(data1.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 8 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 48.2 2.03 44.2 52.2 2 beta[2] -10.6 2.88 -16.3 -4.94 3 beta[3] -26.5 2.57 -31.6 -21.4 4 beta[4] -0.351 0.0816 -0.510 -0.187 5 beta[5] -0.271 0.110 -0.491 -0.0541\r6 beta[6] 0.270 0.117 0.0436 0.503 7 deviance 158. 4.42 151. 167. 8 sigma 3.45 0.535 2.51 4.50 \rConclusions\n\rThe intercept of the first group (Group A) is \\(48.2\\).\n\rThe mean of the second group (Group B) is \\(-10.6\\) units greater than (A).\n\rThe mean of the third group (Group C) is \\(-26.5\\) units greater than (A).\n\rA one unit increase in B in Group A is associated with a \\(-0.351\\) units increase in \\(Y\\).\n\rdifference in slope between Group B and Group A \\(-0.270\\).\n\rdifference in slope between Group C and Group A \\(0.270\\).\n\r\rThe \\(95\\)% confidence interval for the effects of Group B, Group C and the partial slope associated with B do not overlapp with \\(0\\) implying a significant difference between group A and groups B, C (at the mean level of predictor B) and a significant negative relationship with B (for Group A). The slope associated with Group B was not found to be significantly different from that associated with Group A, however, the slope associated with Group C was found to be significantly less negative than the slope associated with Group A. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A = 0)\r[1] 0.0009333333\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[4]\u0026quot;]) # effect of (slope = 0)\r[1] 0.0003333333\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[5]\u0026quot;]) # effect of (slopeB - slopeA = 0)\r[1] 0.0152\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[6]\u0026quot;]) # effect of (slopeC - slopeA = 0)\r[1] 0.0232\r\u0026gt; mcmcpvalue(data1.r2jags$BUGSoutput$sims.matrix[, 2:6]) # effect of (model)\r[1] 0\rThere is evidence that the reponse differs between the groups.\n\rGraphical summaries\r\u0026gt; mcmc = data1.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata1 = expand.grid(A = levels(data1$A), B = seq(min(data1$B), max(data1$B),\r+ len = 100))\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;, \u0026quot;beta[5]\u0026quot;,\r+ \u0026quot;beta[6]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata1 = newdata1 %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata1, aes(y = estimate, x = B, fill = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata1 = rdata1 = data1\r\u0026gt; fMat = rMat = model.matrix(~A * B, fdata1)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data1$Y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata1 = rdata1 %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata1, aes(y = estimate, x = B, fill = A)) + geom_point(data = rdata1,\r+ aes(y = partial.resid, x = B, color = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\r\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1580955194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580955194,"objectID":"7a08fb2f38941abbc899e41074989ac1","permalink":"/jags/ancova-jags/ancova-jags/","publishdate":"2020-02-05T21:13:14-05:00","relpermalink":"/jags/ancova-jags/ancova-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","ancova","factor analysis"],"title":"Analysis of Covariance - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","ancova","STAN","factor analysis"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rPrevious tutorials have concentrated on designs for either continuous (Regression) or categorical (ANOVA) predictor variables. Analysis of covariance (ANCOVA) models are essentially ANOVA models that incorporate one or more continuous and categorical variables (covariates). Although the relationship between a response variable and a covariate may itself be of substantial clinical interest, typically covariate(s) are incorporated to reduce the amount of unexplained variability in the model and thereby increase the power of any treatment effects.\nIn ANCOVA, a reduction in unexplained variability is achieved by adjusting the response (to each treatment) according to slight differences in the covariate means as well as accounting for any underlying trends between the response and covariate(s). To do so, the extent to which the within treatment group small differences in covariate means between groups and treatment groups are essentially compared via differences in their \\(y\\)-intercepts. The total variation is thereafter partitioned into explained (using the deviations between the overall trend and trends approximated for each of the treatment groups) and unexplained components (using the deviations between the observations and the approximated within group trends). In this way, ANCOVA can be visualized as a regular ANOVA in which the group and overall means are replaced by group and overall trendlines. Importantly, it should be apparent that ANCOVA is only appropriate when each of the within group trends have the same slope and are thus parallel to one another and the overall trend. Furthermore, ANCOVA is not appropriate when the resulting adjustments must be extrapolated from a linear relationship outside the measured range of the covariate.\nAs an example, an experiment might be set up to investigate the energetic impacts of sexual vs parthenogenetic (egg development without fertilization) reproduction on leaf insect food consumption. To do so, researchers could measure the daily food intake of individual adult female leaf insects from female only (parthenogenetic) and mixed (sexual) populations. Unfortunately, the available individual leaf insects varied substantially in body size which was expected to increase the variability of daily food intake of treatment groups. Consequently, the researchers also measured the body mass of the individuals as a covariate, thereby providing a means by which daily food consumption could be standardized for body mass. ANCOVA attempts to reduce unexplained variability by standardising the response to the treatment by the effects of the specific covariate condition. Thus ANCOVA provides a means of exercising some statistical control over the variability when it is either not possible or not desirable to exercise experimental control (such as blocking or using otherwise homogeneous observations).\n\rNull hypothesis\rFactor A: the main treatment effect\n\r\\(H_0(A):\\mu_1(adj)=\\mu_2(adj)=\\ldots=\\mu_i(adj)=\\mu(adj)\\)\r\rThe adjusted population group means are all equal. The mean of population \\(1\\) adjusted for the covariate is equal to that of population \\(2\\) adjusted for the covariate and so on, and thus all population means adjusted for the covariate are equal to an overall adjusted mean. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group adjusted mean and the overall adjusted mean (\\(\\alpha_i(adj)=\\mu_i(adj)−\\mu(adj)\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0(A):\\alpha_1(adj)=\\alpha_2(adj)=\\ldots=\\alpha_i(adj)=0\\)\r\rThe effect of each group equals zero. If one or more of the \\(\\alpha_i(adj)\\) are different from zero (the response mean for this treatment differs from the overall response mean), the null hypothesis is not true, indicating that the treatment does affect the response variable.\nFactor B: the covariate effect\n\r\\(H_0(B):\\beta_1(pooled)=0\\)\r\rThe pooled population slope equals zero. Note, that this null hypothesis is rarely of much interest. It is precisely because of this nuisance relationship that ANCOVA designs are applied.\n\rLinear models\rOne or more covariates can be incorporated into single factor, nested, factorial and partly nested designs in order to reduce the unexplained variation. Fundamentally, the covariate(s) are purely used to adjust the response values prior to the regular analysis. The difficulty is in determining the appropriate adjustments. Following is a list of the appropriate linear models and adjusted response calculations for a range of ANCOVA designs. Note that these linear models do not include interactions involving the covariates as these are assumed to be zero. The inclusion of these interaction terms is a useful means of testing the homogeneity of slopes assumption.\n\rSingle categorical and single covariate\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\beta(x_{ij}-\\bar{x}) + \\epsilon_{ij}\\)\n\rAdjustments: \\(y_{ij(adj)}=y_{ij} - b(x_{ij} - \\bar{x})\\)\n\r\rSingle categorical and two covariates\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\beta_{YX}(x_{ij}-\\bar{x}) + \\beta_{YZ}(z_{ij}-\\bar{z}) + \\epsilon_{ij}\\)\n\rAdjustments: \\(y_{ij(adj)}=y_{ij} - b_{YX}(x_{ij} - \\bar{x}) - b_{YZ}(z_{ij} - \\bar{z})\\)\n\r\rFactorial designs\n\rLinear model: \\(y_{ij}=\\mu + \\alpha_i + \\gamma_j + (\\alpha\\gamma)_{ij}+ \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijk}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijk} - b(x_{ijk} - \\bar{x})\\)\n\r\rNested designs\n\rLinear model: \\(y_{ijk}=\\mu + \\alpha_i + \\gamma_{j(i)} + \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijk}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijk} - b(x_{ijk} - \\bar{x})\\)\n\r\rPartly nested designs\n\rLinear model: \\(y_{ijkl}=\\mu + \\alpha_i + \\gamma_{j(i)} + \\delta_k + (\\alpha\\delta)_{ik} + (\\gamma\\delta)_{j(i)k} + \\beta(x_{ijk}-\\bar{x}) + \\epsilon_{ijkl}\\)\n\rAdjustments: \\(y_{ijk(adj)}=y_{ijkl} - b_{between}(x_{i} - \\bar{x}) - b_{within}(x_{ijk} - \\bar{x}_i)\\)\n\r\r\r\rAnalysis of variance\rIn ANCOVA, the total variability of the response variable is sequentially partitioned into components explained by each of the model terms, starting with the covariate and is therefore equivalent to performing a regular analysis of variance on the response variables that have been adjusted for the covariate. The appropriate unexplained residuals and therefore the appropriate F-ratios for each factor differ according to the different null hypotheses associated with different linear models as well as combinations of fixed and random factors in the model (see the following tables). Note that since the covariate levels measured are typically different for each group, ANCOVA designs are inherently non-orthogonal (unbalanced). Consequently, sequential (Type I sums of squares) should not be used. For very simple Ancova designs that incorporate a single categorical and single covariate, Type I sums of squares can be used provided the covariate appears in the linear model first (and thus is partitioned out last) as we are typically not interested in estimating this effect.\n\u0026gt; ancova_table\rdf MS F-ratio (A\u0026amp;B fixed) F-ratio (B fixed) Factor A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot; Factor B \u0026quot;1\u0026quot; \u0026quot;MS B\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; \u0026quot;(MS B)/(MS res)\u0026quot; Factor AB \u0026quot;a-1\u0026quot; \u0026quot;MS AB\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot; \u0026quot;(MS AB)/(MS res)\u0026quot;\rResidual \u0026quot;(n-2)a\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \rThe corresponding R syntax is given below.\n\u0026gt; anova(lm(DV ~ B * A, dataset))\r\u0026gt; # OR\r\u0026gt; anova(aov(DV ~ B * A, dataset))\r\u0026gt; # OR (make sure not using treatment contrasts)\r\u0026gt; Anova(lm(DV ~ B * A, dataset), type = \u0026quot;III\u0026quot;)\r\rAssumptions\rAs ANCOVA designs are essentially regular ANOVA designs that are first adjusted (centered) for the covariate(s), ANCOVA designs inherit all of the underlying assumptions of the appropriate ANOVA design. Specifically, hypothesis tests assume that:\n\rThe appropriate residuals are normally distributed. Boxplots using the appropriate scale of replication (reflecting the appropriate residuals/F-ratio denominator, see the above tables) should be used to explore normality. Scale transformations are often useful.\n\rThe appropriate residuals are equally varied. Boxplots and plots of means against variance (using the appropriate scale of replication) should be used to explore the spread of values. Residual plots should reveal no patterns. Scale transformations are often useful.\n\rThe appropriate residuals are independent of one another.\n\rThe relationship between the response variable and the covariate should be linear. Linearity can be explored using scatterplots and residual plots should reveal no patterns.\n\rFor repeated measures and other designs in which treatment levels within blocks can not be be randomly ordered, the variance/covariance matrix is assumed to display sphericity.\n\rFor designs that utilise blocking, it is assumed that there are no block by within block interactions.\n\r\rHomogeneity of Slopes\nIn addition to the above assumptions, ANCOVA designs also assume that slopes of relationships between the response variable and the covariate(s) are the same for each treatment level (group). That is, all the trends are parallel. If the individual slopes deviate substantially from each other (and thus the overall slope), then adjustments made to each of the observations are nonsensical. This situation is analogous to an interaction between two or more factors. In ANCOVA, interactions involving the covariate suggest that the nature of the relationship between the response and the covariate differs between the levels of the categorical treatment. More importantly, they also indicate that whether or not there is an effect of the treatment depends on what range of the covariate you are focussed on. Clearly then, it is not possible to make conclusions about the main effects of treatments in the presence of such interactions. The assumption of homogeneity of slopes can be examined via interaction plots or more formally, by testing hypotheses about the interactions between categorical variables and the covariate(s). There are three broad approaches for dealing with ANCOVA designs with heterogeneous slopes and selection depends on the primary focus of the study.\nWhen the primary objective of the analysis is to investigate the effects of categorical treatments, it is possible to adopt an approach similar to that taken when exploring interactions in multiple regression. The effect of treatments can be examined at specific values of the covariate (such as the mean and \\(\\pm\\) one standard deviation). This approach is really only useful at revealing broad shifts in patterns over the range of the covariate and if the selected values of the covariate do not have some inherent clinical meaning (selected arbitrarily), then the outcomes can be of only limited clinical interest.\n\rAlternatively, the Johnson-Neyman technique (or Wilxon modification thereof) procedure indicates the ranges of the covariate over which the individual regression lines of pairs of treatment groups overlap or cross. Although less powerful than the previous approach, the Wilcox(J-N) procedure has the advantage of revealing the important range (ranges for which the groups are different and not different) of the covariate rather than being constrained by specific levels selected.\n\rUse contrast treatments to split up the interaction term into its constituent contrasts for each level of the treatment. Essentially this compares each of the treatment level slopes to the slope from the “control” group and is useful if the primary focus is on the relationships between the response and the covariate.\n\r\rSimilar covariate ranges\nAdjustments made to the response means in an attempt to statistically account for differences in the covariate involve predicting mean response values along displaced linear relationships between the overall response and covariate variables. The degree of trend displacement for any given group is essentially calculated by multiplying the overall regression slope by the degree of difference between the overall covariate mean and the mean of the covariate for that group. However, when the ranges of the covariate within each of the groups differ substantially from one another, these adjustments are effectively extrapolations and therefore of unknown reliability. If a simple ANOVA of the covariate modelled against the categorical factor indicates that the covariate means differ significantly between groups, it may be necessary to either remove extreme observations or reconsider the analysis.\nRobust ANCOVA\nANCOVA based on rank transformed data can be useful for accommodating data with numerous problematic outliers. Nevertheless, problems about the difficulties of detecting interactions from rank transformed data, obviously have implications for inferential tests of homogeneity of slopes. Randomisation tests that maintain response0covariate pairs and repeatedly randomise these observations amongst the levels of the treatments can also be useful, particularly when there is doubt over the independence of observations. Both planned and unplanned comparisons follow those of other ANOVA chapters without any real additional complications. Notably, recent implementations of the Tukey’s test (within R) accommodate unbalanced designs and thus negate the need for some of the more complicated and specialised techniques that have been highlighted in past texts.\n\r\rData generation\rConsider an experimental design aimed at exploring the effects of a categorical variable with three levels (Group A, Group B and Group C) on a response. From previous studies, we know that the response is influenced by another variable (covariate). Unfortunately, it was not possible to ensure that all sampling units were the same degree of the covariate. Therefore, in an attempt to account for this anticipated extra source of variability, we measured the level of the covariate for each sampling unit. Actually, in allocating treatments to the various treatment groups, we tried to ensure a similar mean and range of the covariate within each group.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 10\r\u0026gt; p \u0026lt;- 3\r\u0026gt; A.eff \u0026lt;- c(40, -15, -20)\r\u0026gt; beta \u0026lt;- -0.45\r\u0026gt; sigma \u0026lt;- 4\r\u0026gt; B \u0026lt;- rnorm(n * p, 0, 15)\r\u0026gt; A \u0026lt;- gl(p, n, lab = paste(\u0026quot;Group\u0026quot;, LETTERS[1:3]))\r\u0026gt; mm \u0026lt;- model.matrix(~A + B)\r\u0026gt; data \u0026lt;- data.frame(A = A, B = B, Y = as.numeric(c(A.eff, beta) %*% t(mm)) + rnorm(n * p, 0, 4))\r\u0026gt; data$B \u0026lt;- data$B + 20\r\u0026gt; head(data)\rA B Y\r1 Group A 11.59287 45.48907\r2 Group A 16.54734 40.37341\r3 Group A 43.38062 33.05922\r4 Group A 21.05763 43.03660\r5 Group A 21.93932 42.41363\r6 Group A 45.72597 31.17787\rExploratory data analysis\r\u0026gt; library(car)\r\u0026gt; scatterplot(Y ~ B | A, data = data)\r\u0026gt; \u0026gt; boxplot(Y ~ A, data)\r\u0026gt; \u0026gt; # OR via ggplot\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = Y, x = B, group = A)) + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;)\r\u0026gt; \u0026gt; ggplot(data, aes(y = Y, x = A)) + geom_boxplot()\rConclusions\nThere is no evidence of obvious non-normality. The assumption of linearity seems reasonable. The variability of the three groups seems approximately equal. The slopes (\\(Y\\) vs B trends) appear broadly similar for each treatment group.\nWe can explore inferential evidence of unequal slopes by examining estimated effects of the interaction between the categorical variable and the covariate. Note, pay no attention to the main effects - only the interaction. Even though I intend to illustrate Bayesian analyses here, for such a simple model, it is considerably simpler to use traditional OLS for testing for the presence of an interaction.\n\u0026gt; anova(lm(Y ~ B * A, data = data))\rAnalysis of Variance Table\rResponse: Y\rDf Sum Sq Mean Sq F value Pr(\u0026gt;F) B 1 989.99 989.99 92.6782 1.027e-09 ***\rA 2 2320.05 1160.02 108.5956 9.423e-13 ***\rB:A 2 51.36 25.68 2.4041 0.1118 Residuals 24 256.37 10.68 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rThere is very little evidence to suggest that the assumption of equal slopes will be inappropriate.\n\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor (\\(\\boldsymbol X \\boldsymbol \\beta\\)). In this case, \\(\\boldsymbol \\beta\\) represents the vector of \\(\\beta\\)’s - the intercept associated with the first group, the (effects) differences between this intercept and the intercepts for each other group as well as the slope associated with the continuous covariate. \\(\\boldsymbol X\\) is the model matrix. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). Note, exploratory data analysis suggests that while the intercept (intercept of Group A) and categorical predictor effects (differences between intercepts of each of the Group and Group A’s intercept) could be drawn from a similar distribution (with mean in the \\(10\\)’s and variances in the \\(100\\)’s), the slope (effect associated with Group A linear relationship) is likely to be an order of magnitude less. We might therefore be tempted to provide different priors for the intercept, categorical effects and slope effect. For a simple model such as this, it is unlikely to be necessary. However, for more complex models, where prior specification becomes more critical, separate priors would probably be necessary. We proceed to code the model into STAN.\n\u0026gt; modelString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ //Likelihood\r+ y~normal(mu,sigma);\r+ + //Priors\r+ beta ~ normal(0,100);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;ancovaModel.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = Y, X = Xmat, nX = ncol(Xmat), n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface. Note that the first time stan is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.rstan \u0026lt;- stan(data = data.list, file = \u0026quot;ancovaModel.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;ancovaModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.072 seconds (Warm-up)\rChain 1: 0.059 seconds (Sampling)\rChain 1: 0.131 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;ancovaModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.088 seconds (Warm-up)\rChain 2: 0.058 seconds (Sampling)\rChain 2: 0.146 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: ancovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 50.95 0.05 1.46 48.08 50.00 50.93 51.85 53.86 949 1.01\rbeta[2] -16.23 0.04 1.55 -19.25 -17.24 -16.18 -15.24 -13.12 1322 1.00\rbeta[3] -20.60 0.04 1.52 -23.56 -21.58 -20.61 -19.61 -17.55 1430 1.00\rbeta[4] -0.48 0.00 0.05 -0.57 -0.51 -0.48 -0.45 -0.40 1068 1.01\rsigma 3.55 0.02 0.52 2.69 3.17 3.48 3.87 4.67 1175 1.00\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:30:06 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.rstan)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, dimnames(s)$parameters)\r\u0026gt; s = s[, , wch]\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r$`1`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r$`2`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; stan_ac(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\u0026gt; stan_rhat(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\r\u0026gt; stan_ess(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model. Residuals are not computed directly within rstan However, we can calculate them manually form the posteriors.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$Y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~A + B, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:4]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata = data.frame(A = data$A, B = data$B, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -A, -B)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = A, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data, aes(y = Y, x = A,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data, aes(y = Y,\r+ x = A), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = B, fill = \u0026quot;Model\u0026quot;,\r+ group = B, color = A), alpha = 0.5) + geom_point(data = data,\r+ aes(y = Y, x = B, group = B, color = A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: ancovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 50.95 0.05 1.46 48.08 50.00 50.93 51.85 53.86 949 1.01\rbeta[2] -16.23 0.04 1.55 -19.25 -17.24 -16.18 -15.24 -13.12 1322 1.00\rbeta[3] -20.60 0.04 1.52 -23.56 -21.58 -20.61 -19.61 -17.55 1430 1.00\rbeta[4] -0.48 0.00 0.05 -0.57 -0.51 -0.48 -0.45 -0.40 1068 1.01\rsigma 3.55 0.02 0.52 2.69 3.17 3.48 3.87 4.67 1175 1.00\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:30:06 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 51.0 1.46 48.0 53.8 2 beta[2] -16.2 1.55 -19.3 -13.3 3 beta[3] -20.6 1.52 -23.4 -17.5 4 beta[4] -0.483 0.0460 -0.569 -0.392\r5 sigma 3.55 0.524 2.69 4.67 \rConclusions\n\rThe intercept of the first group (Group A) is \\(51\\).\n\rThe mean of the second group (Group B) is \\(-16.3\\) units greater than (A).\n\rThe mean of the third group (Group C) is \\(-20.7\\) units greater than (A).\n\rA one unit increase in B in Group A is associated with a \\(-0.484\\) units increase in \\(Y\\).\n\r\rThe \\(95\\)% confidence interval for the effects of Group B, Group C and the partial slope associated with B do not overlapp with 0 implying a significant difference between group A and groups B, C and a significant negative relationship with B. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[4]\u0026quot;]) # effect of (slope = 0)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, 2:4]) # effect of (model)\r[1] 0\rThere is evidence that the reponse differs between the groups. There is evidence suggesting that the response of group D differs from that of group A. In a Bayesian context, we can compare models using the leave-one-out cross-validation statistics. Leave-one-out (LOO) cross-validation explores how well a series of models can predict withheld values Vehtari, Gelman, and Gabry (2017). The LOO Information Criterion (LOOIC) is analogous to the AIC except that the LOOIC takes priors into consideration, does not assume that the posterior distribution is drawn from a multivariate normal and integrates over parameter uncertainty so as to yield a distribution of looic rather than just a point estimate. The LOOIC does however assume that all observations are equally influential (it does not matter which observations are left out). This assumption can be examined via the Pareto \\(k\\) estimate (values greater than \\(0.5\\) or more conservatively \\(0.75\\) are considered overly influential). We can compute LOOIC if we store the loglikelihood from our STAN model, which can then be extracted to compute the information criterion using the package loo.\n\u0026gt; library(loo)\r\u0026gt; (full = loo(extract_log_lik(data.rstan)))\rComputed from 2000 by 30 log-likelihood matrix\rEstimate SE\relpd_loo -83.1 4.4\rp_loo 4.9 1.4\rlooic 166.2 8.9\r------\rMonte Carlo SE of elpd_loo is 0.1.\rPareto k diagnostic values:\rCount Pct. Min. n_eff\r(-Inf, 0.5] (good) 28 93.3% 269 (0.5, 0.7] (ok) 2 6.7% 371 (0.7, 1] (bad) 0 0.0% \u0026lt;NA\u0026gt; (1, Inf) (very bad) 0 0.0% \u0026lt;NA\u0026gt; All Pareto k estimates are ok (k \u0026lt; 0.7).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; # now fit a model without main factor\r\u0026gt; modelString2 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma);\r+ + // Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString2, con = \u0026quot;ancovaModel2.stan\u0026quot;)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~1, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = Y, X = Xmat, n = nrow(data), nX = ncol(Xmat)))\r\u0026gt; data.rstan.red \u0026lt;- stan(data = data.list, file = \u0026quot;ancovaModel2.stan\u0026quot;, chains = nChains,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.018 seconds (Warm-up)\rChain 1: 0.025 seconds (Sampling)\rChain 1: 0.043 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.018 seconds (Warm-up)\rChain 2: 0.02 seconds (Sampling)\rChain 2: 0.038 seconds (Total)\rChain 2: \u0026gt; \u0026gt; (reduced = loo(extract_log_lik(data.rstan.red)))\rComputed from 2000 by 30 log-likelihood matrix\rEstimate SE\relpd_loo -116.3 3.1\rp_loo 1.6 0.3\rlooic 232.6 6.2\r------\rMonte Carlo SE of elpd_loo is 0.0.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; par(mfrow = 1:2, mar = c(5, 3.8, 1, 0) + 0.1, las = 3)\r\u0026gt; plot(full, label_points = TRUE)\r\u0026gt; plot(reduced, label_points = TRUE)\rThe expected out-of-sample predictive accuracy is substantially lower for the model that includes \\(x\\). This might be used to suggest that the inferential evidence for a general effect of \\(x\\) on \\(y\\).\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(A = levels(data$A), B = seq(min(data$B), max(data$B),\r+ len = 100))\r\u0026gt; Xmat = model.matrix(~A + B, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = B, fill = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~A + B, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$Y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = B, fill = A)) + geom_point(data = rdata,\r+ aes(y = partial.resid, x = B, color = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\r\rPosteriors\rIn frequentist statistics, when we have more than two groups, we are typically not only interested in whether there is evidence for an overall “effect” of a factor - we are also interested in how various groups compare to one another. To explore these trends, we either compare each group to each other in a pairwise manner (controlling for family-wise Type I error rates) or we explore an independent subset of the possible comparisons. Although these alternate approaches can adequately address a specific research agenda, often they impose severe limitations and compromises on the scope and breadth of questions that can be asked of your data. The reason for these limitations is that in a frequentist framework, any single hypothesis carries with it a (nominally) \\(5\\)% chance of a false rejection (since it is based on long-run frequency). Thus, performing multiple tests are likely to compound this error rate. The point is, that each comparison is compared to its own probability distribution (and each carries a \\(5\\)% error rate). By contrast, in Bayesian statistics, all comparisons (contrasts) are drawn from the one (hopefully stable and convergent) posterior distribution and this posterior is invariant to the type and number of comparisons drawn. Hence, the theory clearly indicates that having generated our posterior distribution, we can then query this distribution in any way that we wish thereby allowing us to explore all of our research questions simultaneously.\nBayesian “contrasts” can be performed either:\n\rwithin the Bayesian sampling model or\n\rconstruct them from the returned MCMC samples (they are drawn from the posteriors)\n\r\rOnly the latter will be demonstrated as it provides a consistent approach across all routines. In order to allow direct comparison to the frequentist equivalents, I will explore the same set of planned and Tukey’s test comparisons described here. For the “planned comparison” we defined two contrasts: 1) group B vs group C; and 2) group A vs the average of groups B and C. Of course each of these could be explored at multiple values of B, however, since we fit an additive model (which assumes that the slopes are homogeneous), the contrasts will be constant throughout the domain of B.\nLets start by comparing each group to each other group in a pairwise manner. Arguably the most elegant way to do this is to generate a Tukey’s contrast matrix. This is a model matrix specific to comparing each group to each other group. Again, since the lines are parallel, it does not really matter what level of B we estimate these efffects at - so lets use the mean B.\n\u0026gt; mcmc = data.rstan\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:4]\r\u0026gt; newdata \u0026lt;- data.frame(A = levels(data$A), B = mean(data$B))\r\u0026gt; # A Tukeys contrast matrix\r\u0026gt; library(multcomp)\r\u0026gt; tuk.mat \u0026lt;- contrMat(n = table(newdata$A), type = \u0026quot;Tukey\u0026quot;)\r\u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data = newdata)\r\u0026gt; pairwise.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; pairwise.mat\r(Intercept) AGroup B AGroup C B\rGroup B - Group A 0 1 0 0\rGroup C - Group A 0 0 1 0\rGroup C - Group B 0 -1 1 0\r\u0026gt; \u0026gt; mcmc_areas(coefs %*% t(pairwise.mat))\r\u0026gt; \u0026gt; (comps = tidyMCMC(coefs %*% t(pairwise.mat), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 Group B - Group A -16.2 1.55 -19.3 -13.3 2 Group C - Group A -20.6 1.52 -23.4 -17.5 3 Group C - Group B -4.37 1.59 -7.30 -0.949\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rWith a couple of modifications, we could also express this as percentage changes. A percentage change represents the change (difference between groups) divided by one of the groups (determined by which group you want to express the percentage change to). Hence, we generate an additional mcmc matrix that represents the cell means for the divisor group (group we want to express change relative to). Since the tuk.mat defines comparisons as \\(-1\\) and \\(1\\) pairs, if we simply replace all the \\(-1\\) with \\(0\\), the eventual matrix multiplication will result in estimates of the divisor cell means instread of the difference. We can then divide the original mcmc matrix above with this new divisor mcmc matrix to yeild a mcmc matrix of percentage change.\n\u0026gt; # Modify the tuk.mat to replace -1 with 0. This will allow us to get a\r\u0026gt; # mcmc matrix of ..\r\u0026gt; tuk.mat[tuk.mat == -1] = 0\r\u0026gt; comp.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; comp.mat\r(Intercept) AGroup B AGroup C B\rGroup B - Group A 1 1 0 19.29344\rGroup C - Group A 1 0 1 19.29344\rGroup C - Group B 1 0 1 19.29344\r\u0026gt; \u0026gt; comp.mcmc = 100 * (coefs %*% t(pairwise.mat))/coefs %*% t(comp.mat)\r\u0026gt; (comps = tidyMCMC(comp.mcmc, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 Group B - Group A -64.2 8.46 -80.3 -47.3 2 Group C - Group A -98.5 11.7 -120. -74.6 3 Group C - Group B -21.1 8.48 -36.2 -3.13\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size (%)\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rAnd now for the specific planned comparisons (Group B vs Group C as well as Group A vs the average of Groups B and C). This is achieved by generating our own contrast matrix (defining the contributions of each group to each contrast).\n\u0026gt; c.mat = rbind(c(0, 1, -1), c(1/2, -1/3, -1/3))\r\u0026gt; c.mat\r[,1] [,2] [,3]\r[1,] 0.0 1.0000000 -1.0000000\r[2,] 0.5 -0.3333333 -0.3333333\r\u0026gt; \u0026gt; mcmc = data.rstan\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:4]\r\u0026gt; newdata \u0026lt;- data.frame(A = levels(data$A), B = mean(data$B))\r\u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data = newdata)\r\u0026gt; c.mat = c.mat %*% Xmat\r\u0026gt; c.mat\r(Intercept) AGroup B AGroup C B\r[1,] 0.0000000 1.0000000 -1.0000000 0.000000\r[2,] -0.1666667 -0.3333333 -0.3333333 -3.215574\r\u0026gt; \u0026gt; (comps = tidyMCMC(as.mcmc(coefs %*% t(c.mat)), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 4.37 1.59 0.949 7.30\r2 var2 5.34 0.739 3.93 6.83\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n parameters\riterations beta[1] beta[2] beta[3] beta[4] sigma log_lik[1]\r[1,] 50.10205 -15.67611 -17.41476 -0.4593792 2.882566 -2.008171\r[2,] 50.53300 -15.15556 -21.29190 -0.4213328 3.333128 -2.123994\r[3,] 50.82345 -16.88383 -18.55789 -0.4953391 3.187249 -2.086291\r[4,] 51.07765 -16.56728 -18.11673 -0.4914285 3.229001 -2.091676\r[5,] 50.86176 -17.23601 -22.42360 -0.4583002 3.709629 -2.230000\r[6,] 50.54948 -17.18733 -22.94231 -0.4507465 3.679292 -2.222665\rparameters\riterations log_lik[2] log_lik[3] log_lik[4] log_lik[5] log_lik[6] log_lik[7]\r[1,] -2.249891 -2.478578 -2.386901 -2.321355 -2.238304 -2.089910\r[2,] -2.580156 -2.151935 -2.208046 -2.179748 -2.123208 -2.123205\r[3,] -2.328045 -2.760643 -2.422131 -2.375369 -2.522340 -2.206070\r[4,] -2.408442 -2.613356 -2.346400 -2.306150 -2.408162 -2.166403\r[5,] -2.536428 -2.386884 -2.350958 -2.323661 -2.288689 -2.241980\r[6,] -2.494402 -2.378916 -2.366281 -2.335190 -2.278379 -2.239055\rparameters\riterations log_lik[8] log_lik[9] log_lik[10] log_lik[11] log_lik[12]\r[1,] -2.085684 -2.278190 -2.353424 -2.464663 -2.040152\r[2,] -2.270293 -2.537363 -2.654372 -3.366142 -2.511113\r[3,] -2.279861 -2.412778 -2.448060 -2.125289 -2.085211\r[4,] -2.341028 -2.494345 -2.536601 -2.229693 -2.095141\r[5,] -2.390241 -2.557991 -2.619126 -2.387999 -2.232080\r[6,] -2.340846 -2.504261 -2.567828 -2.386463 -2.222788\rparameters\riterations log_lik[13] log_lik[14] log_lik[15] log_lik[16] log_lik[17]\r[1,] -3.632110 -6.277306 -3.204443 -3.185018 -2.168245\r[2,] -4.446037 -4.129568 -2.560973 -4.463466 -2.764685\r[3,] -2.797030 -6.726618 -3.524519 -2.340742 -2.082699\r[4,] -3.059757 -6.029865 -3.198127 -2.541258 -2.137540\r[5,] -2.956316 -5.325142 -3.251598 -2.735297 -2.266883\r[6,] -2.938129 -5.436729 -3.330196 -2.760533 -2.255217\rparameters\riterations log_lik[18] log_lik[19] log_lik[20] log_lik[21] log_lik[22]\r[1,] -2.318947 -2.512054 -2.002140 -2.395950 -2.776903\r[2,] -2.520307 -2.156718 -2.317741 -2.142335 -2.154221\r[3,] -2.324384 -3.103347 -2.082892 -2.289348 -2.416272\r[4,] -2.459206 -2.810777 -2.095693 -2.462432 -2.639612\r[5,] -2.319568 -2.740113 -2.230665 -2.323836 -2.242369\r[6,] -2.278072 -2.749544 -2.225301 -2.436018 -2.283231\rparameters\riterations log_lik[23] log_lik[24] log_lik[25] log_lik[26] log_lik[27]\r[1,] -2.853655 -2.188530 -3.191131 -2.303986 -7.496570\r[2,] -2.136205 -3.236045 -2.217312 -3.730505 -4.567220\r[3,] -2.590975 -2.415939 -2.747167 -2.400663 -5.215582\r[4,] -2.836079 -2.262250 -3.029609 -2.261575 -5.810429\r[5,] -2.236545 -3.586947 -2.232197 -3.804767 -3.274838\r[6,] -2.277066 -3.966924 -2.230807 -4.274277 -3.064820\rparameters\riterations log_lik[28] log_lik[29] log_lik[30] lp__\r[1,] -2.055777 -2.580174 -2.341634 -54.29289\r[2,] -2.218528 -2.124156 -2.133648 -52.60671\r[3,] -2.078444 -2.420461 -2.098403 -51.48189\r[4,] -2.114514 -2.627423 -2.197494 -52.37989\r[5,] -2.575753 -2.272372 -2.340851 -50.99091\r[6,] -2.740488 -2.353656 -2.414602 -52.08341\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 3.10 1.12 0.681 5.16\r2 sd.B 7.11 0.677 5.77 8.38\r3 sd.resid 3.44 0.158 3.26 3.73\r# A tibble: 3 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.A 22.9 6.30 9.80 34.7\r2 sd.B 52.4 4.30 44.0 61.0\r3 sd.resid 24.8 3.04 20.9 31.2\rApproximately \\(22.86\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; Xmat = model.matrix(~A + B, data)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$Y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.906 0.0136 0.879 0.922\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(Y ~ A + B, data))\rCall:\rlm(formula = Y ~ A + B, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.4381 -2.2244 -0.6829 2.1732 8.6607 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 51.00608 1.44814 35.22 \u0026lt; 2e-16 ***\rAGroup B -16.25472 1.54125 -10.55 6.92e-11 ***\rAGroup C -20.65596 1.57544 -13.11 5.74e-13 ***\rB -0.48399 0.04526 -10.69 5.14e-11 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 3.44 on 26 degrees of freedom\rMultiple R-squared: 0.9149, Adjusted R-squared: 0.9051 F-statistic: 93.22 on 3 and 26 DF, p-value: 4.901e-14\r\rDealing with heterogeneous slopes\rGenerate the data with heterogeneous slope effects.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 10\r\u0026gt; p \u0026lt;- 3\r\u0026gt; A.eff \u0026lt;- c(40, -15, -20)\r\u0026gt; beta \u0026lt;- c(-0.45, -0.1, 0.5)\r\u0026gt; sigma \u0026lt;- 4\r\u0026gt; B \u0026lt;- rnorm(n * p, 0, 15)\r\u0026gt; A \u0026lt;- gl(p, n, lab = paste(\u0026quot;Group\u0026quot;, LETTERS[1:3]))\r\u0026gt; mm \u0026lt;- model.matrix(~A * B)\r\u0026gt; data1 \u0026lt;- data.frame(A = A, B = B, Y = as.numeric(c(A.eff, beta) %*% t(mm)) + rnorm(n * p, 0, 4))\r\u0026gt; data1$B \u0026lt;- data1$B + 20\r\u0026gt; head(data1)\rA B Y\r1 Group A 11.59287 45.48907\r2 Group A 16.54734 40.37341\r3 Group A 43.38062 33.05922\r4 Group A 21.05763 43.03660\r5 Group A 21.93932 42.41363\r6 Group A 45.72597 31.17787\rExploratory data analysis\r\u0026gt; scatterplot(Y ~ B | A, data = data1)\r\u0026gt; \u0026gt; boxplot(Y ~ A, data1)\r\u0026gt; \u0026gt; # OR via ggplot\r\u0026gt; ggplot(data1, aes(y = Y, x = B, group = A)) + geom_point() + geom_smooth(method = \u0026quot;lm\u0026quot;)\r\u0026gt; \u0026gt; ggplot(data1, aes(y = Y, x = A)) + geom_boxplot()\rThe slopes (\\(Y\\) vs B trends) do appear to differ between treatment groups - in particular, Group C seems to portray a different trend to Groups A and B.\n\u0026gt; anova(lm(Y ~ B * A, data = data1))\rAnalysis of Variance Table\rResponse: Y\rDf Sum Sq Mean Sq F value Pr(\u0026gt;F) B 1 442.02 442.02 41.380 1.187e-06 ***\rA 2 2760.60 1380.30 129.217 1.418e-13 ***\rB:A 2 285.75 142.87 13.375 0.0001251 ***\rResiduals 24 256.37 10.68 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rThere is strong evidence to suggest that the assumption of equal slopes is violated.\n\rFitting the model\r\u0026gt; modelString2 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma);\r+ + // Priors\r+ beta ~ normal(0,100);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;ancovaModel2.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~A * B, data1)\r\u0026gt; data1.list \u0026lt;- with(data1, list(y = Y, X = Xmat, nX = ncol(Xmat), n = nrow(data1)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model).\n\u0026gt; data1.rstan \u0026lt;- stan(data = data1.list, file = \u0026quot;ancovaModel2.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.106 seconds (Warm-up)\rChain 1: 0.089 seconds (Sampling)\rChain 1: 0.195 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.128 seconds (Warm-up)\rChain 2: 0.1 seconds (Sampling)\rChain 2: 0.228 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data1.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: ancovaModel2.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 48.14 0.09 2.00 44.21 46.88 48.13 49.45 52.06 541 1\rbeta[2] -10.58 0.11 2.83 -16.17 -12.34 -10.58 -8.77 -4.81 621 1\rbeta[3] -26.48 0.11 2.58 -31.66 -28.17 -26.48 -24.71 -21.48 551 1\rbeta[4] -0.35 0.00 0.08 -0.50 -0.40 -0.35 -0.30 -0.20 555 1\rbeta[5] -0.27 0.00 0.11 -0.48 -0.34 -0.27 -0.20 -0.05 597 1\rbeta[6] 0.27 0.00 0.12 0.04 0.20 0.27 0.35 0.50 552 1\rsigma 3.39 0.02 0.50 2.57 3.02 3.33 3.67 4.50 1108 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:31:40 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\r\u0026gt; mcmc \u0026lt;- As.mcmc.list(data1.rstan)\r\u0026gt; \u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;))\rTrace plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters (such as \\(\\beta\\)s).\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r[[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(mcmc)\rbeta[1] beta[2] beta[3] beta[4] beta[5]\rLag 0 1.000000000 1.000000000 1.00000000 1.000000000 1.00000000\rLag 1 0.487975871 0.425019403 0.44941737 0.460836797 0.46355010\rLag 5 0.088899283 0.062327893 0.08476067 0.087316054 0.05016421\rLag 10 0.007454517 -0.003124592 -0.00632013 -0.031363005 -0.02547379\rLag 50 -0.014702929 -0.011159634 0.01546605 0.007422907 -0.02987378\rbeta[6] sigma log_lik[1] log_lik[2] log_lik[3]\rLag 0 1.000000000 1.000000000 1.0000000000 1.000000000 1.000000000\rLag 1 0.407845502 0.229381985 0.3229947423 0.148911691 0.246151735\rLag 5 0.108990741 0.013015911 0.0359928135 0.007106644 -0.041606834\rLag 10 -0.002789907 -0.006160622 0.0074013124 0.034867394 0.005265643\rLag 50 0.021062271 -0.011828026 0.0004208875 -0.010961206 -0.036358518\rlog_lik[4] log_lik[5] log_lik[6] log_lik[7] log_lik[8]\rLag 0 1.0000000000 1.000000000 1.000000000 1.000000000 1.00000000\rLag 1 0.0851487042 0.097545282 0.204344885 0.269672389 0.38558262\rLag 5 -0.0003507043 0.002305382 -0.049386304 -0.000960398 0.02069575\rLag 10 -0.0166774245 -0.025515245 -0.001912747 -0.016722339 0.04889381\rLag 50 -0.0162443058 -0.014714579 -0.011135106 -0.014633639 0.01680510\rlog_lik[9] log_lik[10] log_lik[11] log_lik[12] log_lik[13]\rLag 0 1.000000000 1.000000000 1.00000000 1.000000000 1.000000000\rLag 1 0.313784783 0.237324163 0.09482508 0.227340224 -0.047089190\rLag 5 0.056460648 0.037850329 -0.03382433 0.001289457 0.011086069\rLag 10 0.035202184 0.034879805 -0.07137294 -0.040985200 -0.021897934\rLag 50 0.008974814 -0.006569175 0.04107530 0.028135748 0.006235697\rlog_lik[14] log_lik[15] log_lik[16] log_lik[17] log_lik[18]\rLag 0 1.000000000 1.000000000 1.00000000 1.000000000 1.00000000\rLag 1 0.066779275 0.012761718 0.05153404 0.139497451 0.06864146\rLag 5 0.021390228 0.036712340 -0.04509391 -0.007858839 0.03114302\rLag 10 -0.039601576 0.009368704 -0.06501412 -0.061861469 0.02566650\rLag 50 -0.009169908 -0.017729557 0.02175915 0.037622080 -0.04205178\rlog_lik[19] log_lik[20] log_lik[21] log_lik[22] log_lik[23]\rLag 0 1.00000000 1.000000000 1.000000000 1.000000000 1.000000000\rLag 1 -0.03208587 0.199707279 0.122441725 0.216102237 0.030364826\rLag 5 -0.01369268 0.017146307 0.056981177 0.031619771 0.038405137\rLag 10 -0.05184742 0.002266797 -0.002546269 -0.003615615 0.002827458\rLag 50 -0.01491998 -0.000185515 0.026181446 0.003742424 0.042867022\rlog_lik[24] log_lik[25] log_lik[26] log_lik[27] log_lik[28]\rLag 0 1.000000000 1.000000000 1.000000000 1.00000000 1.00000000\rLag 1 -0.043300952 0.008897055 0.055272052 -0.02494535 -0.03902829\rLag 5 -0.007623726 0.032328930 -0.003951948 0.04408482 -0.01410360\rLag 10 0.010511950 0.005615084 -0.005860687 0.01468160 0.01575607\rLag 50 0.051297631 0.036588261 0.018664972 0.03213627 0.04216138\rlog_lik[29] log_lik[30] lp__\rLag 0 1.000000000 1.00000000 1.0000000000\rLag 1 0.065026235 -0.01657044 0.5111573914\rLag 5 0.050138816 0.02213345 0.0005946888\rLag 10 0.002064092 0.02410877 0.0243211235\rLag 50 0.039550469 0.01788728 -0.0046540824\r\u0026gt; stan_rhat(data1.rstan)\r\u0026gt; stan_ess(data1.rstan)\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\r\u0026gt; mcmc = as.data.frame(data1.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = data1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; mcmc = as.data.frame(data1.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = newdata1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; newdata1 = newdata1 %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata1) + geom_point(aes(y = resid, x = A)) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata1) + geom_point(aes(y = resid, x = B)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = as.data.frame(data1.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata1 = data1\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:6], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data1$Y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.data.frame(data1.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~A * B, data1)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:6]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data1), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata1 = data.frame(A = data1$A, B = data1$B, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -A, -B)\r\u0026gt; ggplot(newdata1) + geom_violin(aes(y = Value, x = A, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data1, aes(y = Y, x = A,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data1, aes(y = Y,\r+ x = A), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; ggplot(newdata1) + geom_violin(aes(y = Value, x = B, fill = \u0026quot;Model\u0026quot;,\r+ group = B, color = A), alpha = 0.5) + geom_point(data = data1,\r+ aes(y = Y, x = B, group = B, color = A)) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; mcmc_intervals(as.matrix(data1.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(as.matrix(data1.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rFirst, we look at the results from the additive model.\n\u0026gt; print(data1.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: ancovaModel2.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 48.14 0.09 2.00 44.21 46.88 48.13 49.45 52.06 541 1\rbeta[2] -10.58 0.11 2.83 -16.17 -12.34 -10.58 -8.77 -4.81 621 1\rbeta[3] -26.48 0.11 2.58 -31.66 -28.17 -26.48 -24.71 -21.48 551 1\rbeta[4] -0.35 0.00 0.08 -0.50 -0.40 -0.35 -0.30 -0.20 555 1\rbeta[5] -0.27 0.00 0.11 -0.48 -0.34 -0.27 -0.20 -0.05 597 1\rbeta[6] 0.27 0.00 0.12 0.04 0.20 0.27 0.35 0.50 552 1\rsigma 3.39 0.02 0.50 2.57 3.02 3.33 3.67 4.50 1108 1\rSamples were drawn using NUTS(diag_e) at Tue Feb 18 14:31:40 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; tidyMCMC(data1.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 7 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 48.1 2.00 43.9 51.7 2 beta[2] -10.6 2.83 -16.0 -4.66 3 beta[3] -26.5 2.58 -31.8 -21.6 4 beta[4] -0.350 0.0778 -0.501 -0.204 5 beta[5] -0.270 0.106 -0.460 -0.0436\r6 beta[6] 0.269 0.115 0.0515 0.508 7 sigma 3.39 0.502 2.49 4.33 \rConclusions\n\rThe intercept of the first group (Group A) is \\(48.2\\).\n\rThe mean of the second group (Group B) is \\(-10.6\\) units greater than (A).\n\rThe mean of the third group (Group C) is \\(-26.5\\) units greater than (A).\n\rA one unit increase in B in Group A is associated with a \\(-0.351\\) units increase in \\(Y\\).\n\rdifference in slope between Group B and Group A \\(-0.270\\).\n\rdifference in slope between Group C and Group A \\(0.270\\).\n\r\rThe \\(95\\)% confidence interval for the effects of Group B, Group C and the partial slope associated with B do not overlapp with \\(0\\) implying a significant difference between group A and groups B, C (at the mean level of predictor B) and a significant negative relationship with B (for Group A). The slope associated with Group B was not found to be significantly different from that associated with Group A, however, the slope associated with Group C was found to be significantly less negative than the slope associated with Group A. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A = 0)\r[1] 5e-04\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A = 0)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, \u0026quot;beta[4]\u0026quot;]) # effect of (slope = 0)\r[1] 0.001\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, \u0026quot;beta[5]\u0026quot;]) # effect of (slopeB - slopeA = 0)\r[1] 0.0145\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, \u0026quot;beta[6]\u0026quot;]) # effect of (slopeC - slopeA = 0)\r[1] 0.0185\r\u0026gt; mcmcpvalue(as.matrix(data1.rstan)[, 2:6]) # effect of (model)\r[1] 0\rThere is evidence that the reponse differs between the groups.\n\u0026gt; (full = loo(extract_log_lik(data1.rstan)))\rComputed from 2000 by 30 log-likelihood matrix\rEstimate SE\relpd_loo -83.6 4.8\rp_loo 7.3 2.1\rlooic 167.1 9.5\r------\rMonte Carlo SE of elpd_loo is NA.\rPareto k diagnostic values:\rCount Pct. Min. n_eff\r(-Inf, 0.5] (good) 26 86.7% 465 (0.5, 0.7] (ok) 3 10.0% 233 (0.7, 1] (bad) 1 3.3% 34 (1, Inf) (very bad) 0 0.0% \u0026lt;NA\u0026gt; See help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; # now fit a model without main factor\r\u0026gt; modelString3 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ // Likelihood\r+ y~normal(mu,sigma);\r+ + // Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString3, con = \u0026quot;ancovaModel3.stan\u0026quot;)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~A + B, data1)\r\u0026gt; data1.list \u0026lt;- with(data1, list(y = Y, X = Xmat, n = nrow(data1), nX = ncol(Xmat)))\r\u0026gt; data1.rstan.red \u0026lt;- stan(data = data1.list, file = \u0026quot;ancovaModel3.stan\u0026quot;, chains = nChains,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.077 seconds (Warm-up)\rChain 1: 0.062 seconds (Sampling)\rChain 1: 0.139 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;ancovaModel2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.083 seconds (Warm-up)\rChain 2: 0.059 seconds (Sampling)\rChain 2: 0.142 seconds (Total)\rChain 2: \u0026gt; \u0026gt; (reduced = loo(extract_log_lik(data1.rstan.red)))\rComputed from 2000 by 30 log-likelihood matrix\rEstimate SE\relpd_loo -91.9 4.7\rp_loo 5.4 1.8\rlooic 183.8 9.4\r------\rMonte Carlo SE of elpd_loo is 0.1.\rPareto k diagnostic values:\rCount Pct. Min. n_eff\r(-Inf, 0.5] (good) 29 96.7% 379 (0.5, 0.7] (ok) 1 3.3% 166 (0.7, 1] (bad) 0 0.0% \u0026lt;NA\u0026gt; (1, Inf) (very bad) 0 0.0% \u0026lt;NA\u0026gt; All Pareto k estimates are ok (k \u0026lt; 0.7).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; par(mfrow = 1:2, mar = c(5, 3.8, 1, 0) + 0.1, las = 3)\r\u0026gt; plot(full, label_points = TRUE)\r\u0026gt; plot(reduced, label_points = TRUE)\rThe expected out-of-sample predictive accuracy is substantially lower for the model that includes \\(x\\). This might be used to suggest that the inferential evidence for a general effect of \\(x\\) on \\(y\\).\n\rGraphical summaries\r\u0026gt; mcmc = as.matrix(data1.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata1 = expand.grid(A = levels(data1$A), B = seq(min(data1$B), max(data1$B),\r+ len = 100))\r\u0026gt; Xmat = model.matrix(~A * B, newdata1)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;, \u0026quot;beta[5]\u0026quot;,\r+ \u0026quot;beta[6]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata1 = newdata1 %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata1, aes(y = estimate, x = B, fill = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata1 = rdata1 = data1\r\u0026gt; fMat = rMat = model.matrix(~A * B, fdata1)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data1$Y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata1 = rdata1 %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata1, aes(y = estimate, x = B, fill = A)) + geom_point(data = rdata1,\r+ aes(y = partial.resid, x = B, color = A)) + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), alpha = 0.2) + geom_line() + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;B\u0026quot;) + theme_classic()\r\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\rVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and Waic.” Statistics and Computing 27 (5): 1413–32.\n\r\r\r","date":1580955194,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580955194,"objectID":"af27232471746bd6ad8d43dfaf4df000","permalink":"/stan/ancova-stan/ancova-stan/","publishdate":"2020-02-05T21:13:14-05:00","relpermalink":"/stan/ancova-stan/ancova-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","ancova","factor analysis"],"title":"Analysis of Covariance - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","anova","JAGS","factor analysis"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rSingle factor Analysis of Variance (ANOVA), also known as single factor classification, is used to investigate the effect of a single factor comprising two or more groups (treatment levels) from a completely randomised design. Completely randomised refers to the absence of restrictions on the random allocation of experimental or sampling units to factor levels.\nFor example, consider a situation in which three types of treatments (A, B and C) are applied to replicate sampling units across the sampling domain. Importantly, the treatments are applied at the scale of the sampling units and the treatments applied to each sampling unit do not extend to any other neighbouring sampling units. Another possible situation is where the scale of a treatment is far larger than that of a sampling unit. This design features two treatments, each replicated three times. Note that additional sampling units within each Site (the scale at which the treatment occurs) would NOT constitute additional replication. Rather, these would be sub-replicates. That is, they would be replicates of the Sites, not the treatments (since the treatments occur at the level of whole sites). In order to genuinely increase the number of replicates, it is necessary to have more Sites. The random allocation of sampling units within the sampling domain (such as population) is appropriate provided either the underlying response is reasonably homogenous throughout the domain, or else, there is a large number of sampling units. If the conditions are relatively hetrogenous, then the exact location of the sampling units is likely to be highly influential and may mask any detectable effects of treatments.\n\rFixed and random effects\rFrom a frequentist perspective, fixed factors are factors whose levels represent the specific populations of interest. For example, a factor that comprises “high”, “medium” and “low” temperature treatments is a fixed factor - we are only interested in comparing those three populations. Conclusions about the effects of a fixed factor are restricted to the specific treatment levels investigated and for any subsequent experiments to be comparable, the same specific treatments of the factor would need to be used. By contrast, random factors are factors whose levels are randomly chosen from all the possible levels of populations and are used as random representatives of the populations. For example, five random temperature treatments could be used to represent a full spectrum of temperature treatments. In this case, conclusions are extrapolated to all the possible treatment (temperature) levels and for subsequent experiments, a new random set of treatments of the factor would be selected.\nOther common examples of random factors include sites and subjects - factors for which we are attempting to generalise over. Furthermore, the nature of random factors means that we have no indication of how a new level of that factor (such as another subject or site) are likely to respond and thus it is not possible to predict new observations from random factors. These differences between fixed and random factors are reflected in the way their respective null hypotheses are formulated and interpreted. Whilst fixed factors contrast the effects of the different levels of the factor, random factors are modelled as the amount of additional variability they introduce. Random factors are modelled with a mean of \\(0\\) and their variance is estimated as the effect coefficient.\n\rLinear model\rThe linear model for single factor classification is similar to that of multiple linear regression. The linear model can thus be represented by either:\n\rMeans parameterisation - in which the regression slopes represent the means of each treatment group and the intercept is removed (to prevent over-parameterisation).\r\r\\[ y_{ij} = \\beta_1(\\text{level}_1)_{ij} + \\beta_2(\\text{level}_2)_{ij} + \\ldots + \\epsilon_{ij},\\]\nwhere \\(\\beta_1\\) and \\(\\beta_2\\) respectively represent the means response of treatment level \\(1\\) and \\(2\\). This is often simplified to \\(y_{ij}=\\alpha_i + \\epsilon_{ij}\\).\n\rEffects parameterisation - the intercept represents a property such as the mean of one of the treatment groups (treatment contrasts) or the overall mean (sum contrasts), and the slope parameters represent effects (differences between each other group and the reference mean for example).\r\r\\[ y_{ij} = \\mu + \\beta_2(\\text{level}_2)_{ij} + \\beta_3(\\text{level}_3)_{ij} + \\ldots + \\epsilon_{ij},\\]\nwhere \\(\\mu\\) is the mean of the first treatment group, \\(\\beta_2\\) and \\(\\beta_3\\) respectively represent the effects (change from level \\(1\\)) of level \\(2\\) and \\(3\\) on the mean response. This is often simplified to: \\(y_{ij}=\\mu + \\alpha_i + \\epsilon_{ij}\\), with \\(\\alpha_1=0\\).\nSince we are traditionally interested in investigating effects (differences) rather than treatment means, effects parameterisation is far more common (particularly when coupled with hypothesis testing). In a Bayesian framework, it does not really matter whether models are fit with means or effects parameterisation since the posterior likelihood can be querried in any way and repeatedly - thus enabling us to explore any specific effects after the model has been fit. Nevertheless, to ease comparisons with frequentist approaches, we will stick with effects paramterisation.\n\rNull hypothesis: fixed factor\rWe can associate a null hypothesis test with each estimated parameter. For example, in a cell for each estimated mean in a means model we could test a null hypothesis that the population mean is equal to zero (e.g. \\(H_0\\): \\(\\alpha_1=0\\), \\(H_0\\): \\(\\alpha_2=0\\), \\(\\ldots\\)). However, this rarely would be of much interest. By contrast, individual null hypotheses associated with each parameter of the effects model can be used to investigate the differences between each group and a reference group (for example). In addition to the individual null hypothesis tests, a single fixed factor ANOVA tests the collective \\(H_0\\) that there are no differences between the population group means:\n\r\\(H_0: \\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\) (the population group means are all equal). That is, that the mean of population \\(1\\) is equal to that of population \\(2\\) and so on, and thus all population means are equal to one another - no effect of the factor on the response. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the mean of the first group (\\(\\alpha_i=\\mu_i-\\mu_1\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0 : \\alpha_2=\\alpha_3=\\ldots=\\alpha_i=0\\) (the effect of each group equals zero). If one or more of the \\(\\alpha_i\\) are different from zero (the response mean for this treatment differs from the overall response mean), there is evidence that the null hypothesis is not true indicating that the factor does affect the response variable.\n\r\r\rNull hypothesis: random factor\rThe collective \\(H_0\\) for a random factor is that the variance between all possible treatment groups equals zero:\n\r\\(H_0 : \\sigma^2_{\\alpha}=0\\) (added variance due to this factor equals zero).\r\rNote that whilst the null hypotheses for fixed and random factors are different (fixed: population group means all equal, random: variances between populations all equal zero), the linear model fitted for fixed and random factors in single factor ANOVA models is identical. For more complex multi-factor ANOVA models however, the distinction between fixed and random factors has important consequences for building and interpreting statistical models and null hypotheses.\n\rAnalysis of variance\rWhen the null hypothesis is true (and the populations are identical), the amount of variation among observations within groups should be similar to the amount of variation in observations between groups. However, when the null hypothesis is false (and some means are different from other means), the amount of variation among observations might be expected to be less than the amount of variation within groups. Analysis of variance, or ANOVA, partitions the total variance in the response (dependent) variable into a component of the variance that is explained by combinations of one or more categorical predictor variables (called factors) and a component of the variance that cannot be explained (residual). The variance ratio (F-ratio) from this partitioning can then be used to test the null hypothesis (\\(H_0\\)) that the population group or treatment means are all equal. Ttotal variation can be decomposed into components explained by the groups (\\(MS_{groups}\\)) and and unexplained (\\(MS_{residual}\\)) by the groups. The gray arrows in b) depict the relative amounts explained by the groups. The proposed groupings generally explain why the first few points are higher on the y-axis than the last three points. The probability of collecting our sample, and thus generating the sample ratio of explained to unexplained variation (or one more extreme), when the null hypothesis is true (and population means are equal) is the area under the F-distribution beyond our sample ratio (\\(\\text{F-ratio}=\\frac{MS_{groups}}{MS_{residual}}\\)).\nWhen the null hypothesis is true (and the test assumptions have not been violated), the ratio (F-ratio) of explained to unexplained variance follows a theoretical probability distribution (F-distribution). When the null hypothesis is true, and there is no effect of the treatment on the response variable, the ratio of explained variability to unexplained variability is expected to be \\(\\leq 1\\). Since the denominator should represent the expected numerator in the absence of an effect. Importantly, the denominator in an F-ratio calculation essentially represents what we would expect the numerator to be in the absence of a treatment effect. For simple analyses, identifying what these expected values are is relatively straightforward (equivalent to the degree of within group variability). However, in more complex designs (particularly involving random factors and hierarchical treatment levels), the logical “groups” can be more difficult (and in some cases impossible) to identify. In such cases, nominating the appropriate F-ratio denominator for estimating an specific effect requires careful consideration. The following table depicts the anatomy of the single factor ANOVA table\n\u0026gt; anova_table\rdf MS F-ratio Factor A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot;\rResidual \u0026quot;(n-1)a\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \rand corresponding R syntax.\n\u0026gt; anova(lm(DV ~ A, dataset))\r\u0026gt; # OR\r\u0026gt; anova(aov(DV ~ A, dataset))\rAn F-ratio substantially greater than \\(1\\) suggests that the model relating the response variable to the categorical variable explains substantially more variability than is left unexplained. In turn, this implies that the linear model does represent the data well and that differences between observations can be explained largely by differences in treatment levels rather than purely the result of random variation. If the probability of getting the observed (sample) F-ratio or one more extreme is less than some predefined critical value (typically \\(5\\)% or \\(0.05\\)), we conclude that it is highly unlikely that the observed samples could have been collected from populations in which the treatment has no effect and therefore we would reject the null hypothesis.\n\rAssumptions\rAn F-ratio from real data can only reliably relate to a theoretical F-distribution when the data conform to certain assumptions. Hypothesis testing for a single factor ANOVA model assumes that the residuals (and therefore the response variable for each of the treatment levels) are all:\n\rnormally distributed - although ANOVA is robust to non-normality provided sample sizes and variances are equal. Boxplots should be used to explore normality, skewness, bimodality and outliers. In the event of homogeneity of variance issues (see below), a Q-Q normal plot can also be useful for exploring normality (as this might be the cause of non-homogeneity). Scale transformations are often useful.\n\requally varied - provided sample sizes are equal and the largest to smallest variance ratio does not exceed 3:1 (9:1 for sd), ANOVA is reasonably robust to this assumption, however, relationships between variance and mean and/or sample size are of particular concern as they elevate the Type I error rate. Boxplots and plots of means against variance should be used to explore the spread of values. Residual plots should reveal no patterns. Since unequal variances are often the result of non-normality, transformations that improve normality will also improve variance homogeneity.\n\rindependent of one another - this assumption must be addressed at the design and collection stages and cannot be compensated for later (unless a model is used that specifically accounts for particular types of non-independent data, such as that introduced with hierarchical designs or autocorrelation)\n\r\rViolations of these assumptions reduce the reliability of the analysis.\n\r\rData generation\rLets say we had set up a natural experiment in which we measured a response from \\(10\\) sampling units (replicates) from each of \\(5\\) treatments. Hence, we have a single categorical factor with \\(5\\) levels - we might have five different locations, or five different habitat types or substrates etc. In statistical speak, we have sampled from \\(5\\) different populations. We have then randomly selected \\(10\\) independent and random (representative) units of each population to sample. That is, we have \\(10\\) samples (replicates) of each population. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; ngroups \u0026lt;- 5 #number of populations\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; pop.means \u0026lt;- c(40, 45, 55, 40, 30) #population mean length\r\u0026gt; sigma \u0026lt;- 3 #residual standard deviation\r\u0026gt; n \u0026lt;- ngroups * nsample #total sample size\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; x \u0026lt;- gl(ngroups, nsample, n, lab = LETTERS[1:5]) #factor\r\u0026gt; means \u0026lt;- rep(pop.means, rep(nsample, ngroups))\r\u0026gt; X \u0026lt;- model.matrix(~x - 1) #create a design matrix\r\u0026gt; y \u0026lt;- as.numeric(X %*% pop.means + eps)\r\u0026gt; data \u0026lt;- data.frame(y, x)\r\u0026gt; head(data) #print out the first six rows of the data set\ry x\r1 38.31857 A\r2 39.30947 A\r3 44.67612 A\r4 40.21153 A\r5 40.38786 A\r6 45.14519 A\r\u0026gt; \u0026gt; write.csv(data, \u0026quot;simpleAnova.csv\u0026quot;)\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the treatment type.\nExploratory data analysis\r\rNormality and Homogeneity of variance\r\r\u0026gt; boxplot(y ~ x, data)\r\u0026gt; \u0026gt; # OR via ggplot2\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = y, x = x)) + geom_boxplot() +\r+ theme_classic()\rConclusions\nThere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical. There is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the \\(y\\)-axis. Hence it there is no evidence of non-homogeneity. Obvious violations could be addressed either by, for example, transforming the scale of the response variables (to address normality etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\n\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values (\\(\\mu\\)) are themselves determined by the linear predictor (\\(\\beta_0+\\boldsymbol \\beta \\boldsymbol X_i\\)). In this case, \\(\\beta_0\\) represents the mean of the first group and the set of \\(\\boldsymbol \\beta\\)’s represent the differences between each other group and the first group. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X_i\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We proceed to code the model into JAGS (remember that in this software normal distribution are parameterised in terms of precisions \\(\\tau\\) rather than variances, where \\(\\tau=\\frac{1}{\\sigma^2}\\)). Note the following example as group means calculated as derived posteriors.\n\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mean[i],tau.res)\r+ mean[i] \u0026lt;- alpha+beta[x[i]]\r+ }\r+ + #Priors and derivatives\r+ alpha ~ dnorm(0,1.0E-6)\r+ beta[1] \u0026lt;- 0\r+ for (i in 2:ngroups) {\r+ beta[i] ~ dnorm(0, 1.0E-6) #prior\r+ }\r+ sigma.res ~ dunif(0, 100)\r+ tau.res \u0026lt;- 1 / (sigma.res * sigma.res)\r+ sigma.group \u0026lt;- sd(beta[])\r+ + #Group mean posteriors (derivatives)\r+ for (i in 1:ngroups) {\r+ Group.means[i] \u0026lt;- beta[i]+alpha\r+ }\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;anovaModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; data.list \u0026lt;- with(data, list(y = y, x = as.numeric(x), n = nrow(data),\r+ ngroups = length(levels(data$x))))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;alpha\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma.res\u0026quot;, \u0026quot;Group.means\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;anovaModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 50\rUnobserved stochastic nodes: 6\rTotal graph size: 126\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;anovaModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\rGroup.means[1] 40.232 0.908 38.424 39.631 40.237 40.837 41.991 1.001\rGroup.means[2] 45.632 0.902 43.858 45.022 45.626 46.231 47.432 1.002\rGroup.means[3] 53.730 0.913 51.947 53.113 53.722 54.334 55.543 1.001\rGroup.means[4] 40.962 0.906 39.188 40.350 40.968 41.563 42.734 1.001\rGroup.means[5] 29.974 0.915 28.173 29.367 29.974 30.586 31.746 1.001\ralpha 40.232 0.908 38.424 39.631 40.237 40.837 41.991 1.001\rbeta[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\rbeta[2] 5.400 1.278 2.889 4.551 5.395 6.244 7.896 1.001\rbeta[3] 13.498 1.286 11.017 12.639 13.485 14.354 16.049 1.001\rbeta[4] 0.730 1.283 -1.768 -0.122 0.722 1.582 3.261 1.001\rbeta[5] -10.258 1.294 -12.820 -11.110 -10.253 -9.412 -7.721 1.001\rsigma.res 2.864 0.320 2.313 2.638 2.832 3.056 3.578 1.001\rdeviance 245.540 3.787 240.323 242.761 244.832 247.511 254.843 1.001\rn.eff\rGroup.means[1] 15000\rGroup.means[2] 2200\rGroup.means[3] 3800\rGroup.means[4] 15000\rGroup.means[5] 15000\ralpha 15000\rbeta[1] 1\rbeta[2] 2900\rbeta[3] 15000\rbeta[4] 15000\rbeta[5] 15000\rsigma.res 15000\rdeviance 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 7.2 and DIC = 252.7\rDIC is an estimate of expected predictive error (lower deviance is better).\rModel matrix formulation\rFor very simple models such as this example, we can write the models as:\n\u0026gt; modelString2 = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mean[i],tau)\r+ mean[i] \u0026lt;- inprod(beta[],X[i,])\r+ }\r+ #Priors\r+ for (i in 1:ngroups) {\r+ beta[i] ~ dnorm(0, 1.0E-6) + }\r+ sigma ~ dunif(0, 100)\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString2, con = \u0026quot;anovaModel2.txt\u0026quot;)\rDefine the data to pass to R2jags.\n\u0026gt; X \u0026lt;- model.matrix(~x, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = X, n = nrow(data), ngroups = ncol(X)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;anovaModel2.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 50\rUnobserved stochastic nodes: 6\rTotal graph size: 370\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;anovaModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.226 0.901 38.475 39.624 40.222 40.824 41.999 1.001 4800\rbeta[2] 5.401 1.272 2.906 4.552 5.397 6.242 7.900 1.001 15000\rbeta[3] 13.492 1.296 10.969 12.634 13.484 14.355 16.038 1.001 5100\rbeta[4] 0.734 1.279 -1.793 -0.114 0.740 1.582 3.263 1.001 15000\rbeta[5] -10.248 1.283 -12.785 -11.108 -10.242 -9.380 -7.731 1.001 9800\rsigma 2.863 0.315 2.321 2.642 2.838 3.053 3.558 1.001 6200\rdeviance 245.551 3.785 240.353 242.765 244.844 247.603 254.815 1.002 1800\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 7.2 and DIC = 252.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\).\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(data.r2jags, parms = c(\u0026quot;beta\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; data.mcmc = as.mcmc(data.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3895 3746 1.040 beta[2] 2 3729 3746 0.995 beta[3] 2 3811 3746 1.020 beta[4] 3 4115 3746 1.100 beta[5] 2 3853 3746 1.030 deviance 2 3729 3746 0.995 sigma 5 5834 3746 1.560 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3853 3746 1.03 beta[2] 2 3918 3746 1.05 beta[3] 2 3811 3746 1.02 beta[4] 2 3853 3746 1.03 beta[5] 2 3853 3746 1.03 deviance 2 3981 3746 1.06 sigma 4 5306 3746 1.42 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] beta[3] beta[4] beta[5]\rLag 0 1.0000000000 1.000000000 1.0000000000 1.0000000000 1.000000000\rLag 1 0.0015561854 0.001902670 -0.0023462263 0.0063854498 -0.008928813\rLag 5 -0.0006487164 0.003556616 -0.0008267107 -0.0003892349 0.004087306\rLag 10 0.0141414517 0.012308363 0.0064688638 -0.0029210457 0.009117446\rLag 50 -0.0019115790 0.005069522 0.0072096979 -0.0030858504 0.002938152\rdeviance sigma\rLag 0 1.000000000 1.000000000\rLag 1 0.198317688 0.334172270\rLag 5 -0.001425768 0.005514213\rLag 10 -0.000422188 -0.001600486\rLag 50 -0.008805916 0.007414425\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. For more complex models (those that contain multiple effects), it is also advisable to plot the residuals against each of the individual predictors. For sampling designs that involve sample collection over space or time, it is also a good idea to explore whether there are any temporal or spatial patterns in the residuals.\nThere are numerous situations (e.g. when applying specific variance-covariance structures to a model) where raw residuals do not reflect the interior workings of the model. Typically, this is because they do not take into account the variance-covariance matrix or assume a very simple variance-covariance matrix. Since the purpose of exploring residuals is to evaluate the model, for these cases, it is arguably better to draw conclusions based on standardized (or studentised) residuals. Unfortunately the definitions of standardised and studentised residuals appears to vary and the two terms get used interchangeably. I will adopt the following definitions:\n\rStandardised residuals. The raw residuals divided by the true standard deviation of the residuals (which of course is rarely known).\n\rStudentised residuals. The raw residuals divided by the standard deviation of the residuals. Note that externally studentised residuals are calculated by dividing the raw residuals by a unique standard deviation for each observation that is calculated from regressions having left each successive observation out.\n\rPearson residuals. The raw residuals divided by the standard deviation of the response variable.\n\r\rhe mark of a good model is being able to predict well. In an ideal world, we would have sufficiently large sample size as to permit us to hold a fraction (such as \\(25\\)%) back thereby allowing us to train the model on \\(75\\)% of the data and then see how well the model can predict the withheld \\(25\\)%. Unfortunately, such a luxury is still rare. The next best option is to see how well the model can predict the observed data. Models tend to struggle most with the extremes of trends and have particular issues when the extremes approach logical boundaries (such as zero for count data and standard deviations). We can use the fitted model to generate random predicted observations and then explore some properties of these compared to the actual observed data.\nRather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model. Residuals are not computed directly within JAGS. However, we can calculate them manually form the posteriors.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = x)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:5]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata = data.frame(x = data$x, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -x)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = x, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data, aes(y = y, x = x,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data, aes(y = y,\r+ x = x), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(data.r2jags$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;anovaModel2.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 40.226 0.901 38.475 39.624 40.222 40.824 41.999 1.001 4800\rbeta[2] 5.401 1.272 2.906 4.552 5.397 6.242 7.900 1.001 15000\rbeta[3] 13.492 1.296 10.969 12.634 13.484 14.355 16.038 1.001 5100\rbeta[4] 0.734 1.279 -1.793 -0.114 0.740 1.582 3.263 1.001 15000\rbeta[5] -10.248 1.283 -12.785 -11.108 -10.242 -9.380 -7.731 1.001 9800\rsigma 2.863 0.315 2.321 2.642 2.838 3.053 3.558 1.001 6200\rdeviance 245.551 3.785 240.353 242.765 244.844 247.603 254.815 1.002 1800\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 7.2 and DIC = 252.7\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 7 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 40.2 0.901 38.5 42.0 2 beta[2] 5.40 1.27 2.90 7.89\r3 beta[3] 13.5 1.30 11.0 16.1 4 beta[4] 0.734 1.28 -1.82 3.21\r5 beta[5] -10.2 1.28 -12.7 -7.68\r6 deviance 246. 3.79 240. 253. 7 sigma 2.86 0.315 2.26 3.48\rConclusions\n\rthe mean of the first group (A) is \\(40.2\\)\rthe mean of the second group (B) is \\(5.4\\) units greater than (A)\rthe mean of the third group (C) is \\(13.5\\) units greater than (A)\rthe mean of the forth group (D) is \\(0.74\\) units greater than (A)\rthe mean of the fifth group (E) is \\(-10.2\\) units greater (i.e. less) than (A)\r\rThe \\(95\\)% confidence interval for the effects of B, C and E do not overlap with \\(0\\) implying a significant difference between group A and groups B, C and E. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A)\r[1] 6.666667e-05\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A)\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[4]\u0026quot;]) # effect of (D-A)\r[1] 0.5576\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, \u0026quot;beta[5]\u0026quot;]) # effect of (E-A)\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, 2:5]) # effect of (all groups)\r[1] 0\rThere is evidence that the reponse differs between the groups. There is evidence suggesting that the response of group D differs from that of group A.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = rbind(data.frame(x = levels(data$x)))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;, \u0026quot;beta[5]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_linerange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_point() + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = as.numeric(x) - 0.1)) + geom_blank(aes(x = x)) +\r+ geom_point(data = rdata, aes(y = partial.resid, x = as.numeric(x) +\r+ 0.1), color = \u0026quot;gray\u0026quot;) + geom_linerange(aes(ymin = conf.low, ymax = conf.high)) +\r+ geom_point() + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + theme_classic()\r\rPosteriors\rIn frequentist statistics, when we have more than two groups, we are typically not only interested in whether there is evidence for an overall “effect” of a factor - we are also interested in how various groups compare to one another. To explore these trends, we either compare each group to each other in a pairwise manner (controlling for family-wise Type I error rates) or we explore an independent subset of the possible comparisons. Although these alternate approaches can adequately address a specific research agenda, often they impose severe limitations and compromises on the scope and breadth of questions that can be asked of your data. The reason for these limitations is that in a frequentist framework, any single hypothesis carries with it a (nominally) \\(5\\)% chance of a false rejection (since it is based on long-run frequency). Thus, performing multiple tests are likely to compound this error rate. The point is, that each comparison is compared to its own probability distribution (and each carries a \\(5\\)% error rate). By contrast, in Bayesian statistics, all comparisons (contrasts) are drawn from the one (hopefully stable and convergent) posterior distribution and this posterior is invariant to the type and number of comparisons drawn. Hence, the theory clearly indicates that having generated our posterior distribution, we can then query this distribution in any way that we wish thereby allowing us to explore all of our research questions simultaneously.\nBayesian “contrasts” can be performed either:\n\rwithin the Bayesian sampling model or\n\rconstruct them from the returned MCMC samples (they are drawn from the posteriors)\n\r\rOnly the latter will be demonstrated as it povides a consistent approach across all routines. In order to allow direct comparison to the frequentist equivalents, I will explore the same set of planned and Tukey’s test comparisons described here. For the “planned comparison” we defined two contrasts: 1) group 3 vs group 5; and 2) the average of groups 1 and 2 vs the average of groups 3, 4 and 5.\nLets start by comparing each group to each other group in a pairwise manner. Arguably the most elegant way to do this is to generate a Tukey’s contrast matrix. This is a model matrix specific to comparing each group to each other group.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:5]\r\u0026gt; newdata \u0026lt;- data.frame(x = levels(data$x))\r\u0026gt; # A Tukeys contrast matrix\r\u0026gt; library(multcomp)\r\u0026gt; # table(newdata$x) - gets the number of replicates of each level\r\u0026gt; tuk.mat \u0026lt;- contrMat(n = table(newdata$x), type = \u0026quot;Tukey\u0026quot;)\r\u0026gt; Xmat \u0026lt;- model.matrix(~x, data = newdata)\r\u0026gt; pairwise.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; pairwise.mat\r(Intercept) xB xC xD xE\rB - A 0 1 0 0 0\rC - A 0 0 1 0 0\rD - A 0 0 0 1 0\rE - A 0 0 0 0 1\rC - B 0 -1 1 0 0\rD - B 0 -1 0 1 0\rE - B 0 -1 0 0 1\rD - C 0 0 -1 1 0\rE - C 0 0 -1 0 1\rE - D 0 0 0 -1 1\r\u0026gt; \u0026gt; mcmc_areas(coefs %*% t(pairwise.mat))\r\u0026gt; \u0026gt; (comps = tidyMCMC(coefs %*% t(pairwise.mat), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 10 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 B - A 5.40 1.27 2.90 7.89\r2 C - A 13.5 1.30 11.0 16.1 3 D - A 0.734 1.28 -1.82 3.21\r4 E - A -10.2 1.28 -12.7 -7.68\r5 C - B 8.09 1.29 5.58 10.7 6 D - B -4.67 1.30 -7.19 -2.02\r7 E - B -15.6 1.28 -18.1 -13.1 8 D - C -12.8 1.31 -15.3 -10.2 9 E - C -23.7 1.29 -26.2 -21.2 10 E - D -11.0 1.29 -13.5 -8.46\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rWith a couple of modifications, we could also express this as percentage changes. A percentage change represents the change (difference between groups) divided by one of the groups (determined by which group you want to express the percentage change to). Hence, we generate an additional mcmc matrix that represents the cell means for the divisor group (group we want to express change relative to). Since the tuk.mat defines comparisons as \\(-1\\) and \\(1\\) pairs, if we simply replace all the \\(-1\\) with \\(0\\), the eventual matrix multiplication will result in estimates of the divisor cell means instread of the difference. We can then divide the original mcmc matrix above with this new divisor mcmc matrix to yeild a mcmc matrix of percentage change.\n\u0026gt; # Modify the tuk.mat to replace -1 with 0. This will allow us to get a\r\u0026gt; # mcmc matrix of ..\r\u0026gt; tuk.mat[tuk.mat == -1] = 0\r\u0026gt; comp.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; comp.mat\r(Intercept) xB xC xD xE\rB - A 1 1 0 0 0\rC - A 1 0 1 0 0\rD - A 1 0 0 1 0\rE - A 1 0 0 0 1\rC - B 1 0 1 0 0\rD - B 1 0 0 1 0\rE - B 1 0 0 0 1\rD - C 1 0 0 1 0\rE - C 1 0 0 0 1\rE - D 1 0 0 0 1\r\u0026gt; \u0026gt; comp.mcmc = 100 * (coefs %*% t(pairwise.mat))/coefs %*% t(comp.mat)\r\u0026gt; (comps = tidyMCMC(comp.mcmc, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 10 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 B - A 11.8 2.63 6.52 16.8 2 C - A 25.1 2.13 21.0 29.4 3 D - A 1.74 3.10 -4.30 7.88\r4 E - A -34.3 5.09 -44.3 -24.4 5 C - B 15.0 2.24 10.4 19.2 6 D - B -11.5 3.38 -18.1 -4.70\r7 E - B -52.3 5.53 -63.2 -41.6 8 D - C -31.2 3.73 -38.5 -23.9 9 E - C -79.4 6.26 -91.9 -67.5 10 E - D -36.8 5.15 -47.1 -27.0 \u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size (%)\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rAnd now for the specific planned comparisons (Group 3 vs Group 5 and the average of Groups 1 and 2 vs the average of Groups 3, 4 and 5). This is achieved by generating our own contrast matrix (defining the contributions of each group to each contrast).\n\u0026gt; c.mat = rbind(c(0, 0, -1, 0, 1), c(-1/2, -1/2, 1/3, 1/3, 1/3))\r\u0026gt; c.mat\r[,1] [,2] [,3] [,4] [,5]\r[1,] 0.0 0.0 -1.0000000 0.0000000 1.0000000\r[2,] -0.5 -0.5 0.3333333 0.3333333 0.3333333\r\u0026gt; \u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:5]\r\u0026gt; newdata \u0026lt;- data.frame(x = levels(data$x))\r\u0026gt; Xmat \u0026lt;- model.matrix(~x, data = newdata)\r\u0026gt; c.mat = c.mat %*% Xmat\r\u0026gt; c.mat\r(Intercept) xB xC xD xE\r[1,] 0.000000e+00 0.0 -1.0000000 0.0000000 1.0000000\r[2,] -1.110223e-16 -0.5 0.3333333 0.3333333 0.3333333\r\u0026gt; \u0026gt; (comps = tidyMCMC(as.mcmc(coefs %*% t(c.mat)), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -23.7 1.29 -26.2 -21.2 2 var2 -1.37 0.836 -3.01 0.273\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n beta[1] beta[2] beta[3] beta[4] beta[5] deviance sigma\r[1,] 41.14988 5.425974 13.10634 0.5423808 -12.004913 245.9651 2.374957\r[2,] 41.77436 3.165155 12.08478 -2.5284367 -11.070257 251.2837 3.546706\r[3,] 39.87873 5.074910 13.46806 0.7805140 -7.932663 245.7947 3.020465\r[4,] 41.15168 3.079048 10.80976 -0.5505218 -10.396170 249.3934 2.547300\r[5,] 39.93263 4.548017 13.82126 1.2192389 -9.549601 242.2442 2.449639\r[6,] 40.41198 4.705732 12.87972 2.3548628 -8.868949 250.1582 2.432338\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 9.94 0.528 8.86 10.9 2 sd.resid 2.79 0.0903 2.67 2.96\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 78.3 1.07 76.0 79.7\r2 sd.resid 21.7 1.07 20.3 24.0\rApproximately \\(78.3\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.887 0.0127 0.862 0.905\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ x, data))\rCall:\rlm(formula = y ~ x, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.5257 -1.9000 -0.2589 1.4935 6.5330 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.2239 0.8801 45.702 \u0026lt; 2e-16 ***\rxB 5.4020 1.2447 4.340 7.97e-05 ***\rxC 13.5024 1.2447 10.848 3.82e-14 ***\rxD 0.7423 1.2447 0.596 0.554 xE -10.2500 1.2447 -8.235 1.57e-10 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 2.783 on 45 degrees of freedom\rMultiple R-squared: 0.8957, Adjusted R-squared: 0.8865 F-statistic: 96.64 on 4 and 45 DF, p-value: \u0026lt; 2.2e-16\r\rBayesian model selection\rA statistical model is by definition a low-dimensional (over simplification) representation of what is really likely to be a very complex system. As a result, no model is right. Some models however can provide useful insights into some of the processes operating on the system. Frequentist statistics have various methods (model selection, dredging, lasso, cross validation) for selecting parsimonious models. These are models that provide a good comprimise between minimizing unexplained patterns and minimizing model complexity. The basic premise is that since no model can hope to capture the full complexity of a system with all its subtleties, only the very major patterns can be estimated. Overly complex models are likely to be representing artificial complexity present only in the specific observed data (not the general population). The Bayesian approach is to apply priors to the non-variance parameters such that parameters close to zero are further shrunk towards zero whilst priors on parameters further away from zero are less effected. The most popular form of prior for sparsity is the horseshoe prior, so called because the shape of a component of this prior resembles a horseshoe (with most of the mass either close to \\(0\\) or close to \\(1\\)).\nRather than apply weakly informative Gaussian priors on parameters as:\n\\[ \\beta_j \\sim N(0,\\sigma^2),\\]\nthe horseshoe prior is defined as\n\\[ \\beta_j \\sim N(0,\\tau^2\\lambda_j^2),\\]\nwhere \\(\\tau \\sim \\text{Cauchy}(0,1)\\) and \\(\\lambda_j \\sim \\text{Cauchy}(0,1)\\), for \\(j=1,\\ldots,D\\). Using this prior, \\(D\\) is the number of (non-intercept or variance) parameters, \\(\\tau\\) represents the global scale that weights or shrinks all parameters towards zero and \\(\\lambda_j\\) are thick tailed local scales that allow some of the \\(j\\) parameters to escape shrinkage. More recently, Piironen, Vehtari, and others (2017) have argued that whilst the above horseshoe priors do guarantee that strong effects (parameters) will not be over-shrunk, there is the potential for weekly identified effects (those based on relatively little data) to be misrepresented in the posteriors. As an alternative they advocated the use of regularised horseshoe priors in which the amount of shrinkage applied to the largest effects can be controlled. The prior is defined as:\n\\[ \\beta_j \\sim N(0,\\tau^2 \\tilde{\\lambda}_j^2),\\]\nwhere \\(\\tilde{\\lambda}_j^2 = \\frac{c^2\\lambda^2_j}{c^2+\\tau^2 \\lambda^2_j}\\) and \\(c\\) is (slab width, actually variance) is a constant. For small effects (when \\(\\tau^2 \\lambda^2_j \u0026lt; c^2\\)) the prior approaches a regular prior. However, for large effects (when \\(\\tau^2 \\lambda^2_j \u0026gt; c^2\\)) the prior approaches \\(N(0,c^2)\\). Finally, they recommend applying a inverse-gamma prior on \\(c^2\\):\n\\[ c^2 \\sim \\text{Inv-Gamma}(\\alpha,\\beta),\\]\nwhere \\(\\alpha=v/2\\) and \\(\\beta=vs^2/2\\), which translates to a \\(\\text{Student-t}_ν(0, s^2)\\) slab for the coefficients far from zero and is typically a good default choice for a weakly informative prior.\n\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPiironen, Juho, Aki Vehtari, and others. 2017. “Sparsity Information and Regularization in the Horseshoe and Other Shrinkage Priors.” Electronic Journal of Statistics 11 (2): 5018–51.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1580868794,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580868794,"objectID":"26e718557fc6afe39e30b8e0083bc57f","permalink":"/jags/single-factor-anova-jags/single-factor-anova-jags/","publishdate":"2020-02-04T21:13:14-05:00","relpermalink":"/jags/single-factor-anova-jags/single-factor-anova-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","anova","factor analysis"],"title":"Single Factor Anova - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","anova","STAN","factor analysis"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rSingle factor Analysis of Variance (ANOVA), also known as single factor classification, is used to investigate the effect of a single factor comprising two or more groups (treatment levels) from a completely randomised design. Completely randomised refers to the absence of restrictions on the random allocation of experimental or sampling units to factor levels.\nFor example, consider a situation in which three types of treatments (A, B and C) are applied to replicate sampling units across the sampling domain. Importantly, the treatments are applied at the scale of the sampling units and the treatments applied to each sampling unit do not extend to any other neighbouring sampling units. Another possible situation is where the scale of a treatment is far larger than that of a sampling unit. This design features two treatments, each replicated three times. Note that additional sampling units within each Site (the scale at which the treatment occurs) would NOT constitute additional replication. Rather, these would be sub-replicates. That is, they would be replicates of the Sites, not the treatments (since the treatments occur at the level of whole sites). In order to genuinely increase the number of replicates, it is necessary to have more Sites. The random allocation of sampling units within the sampling domain (such as population) is appropriate provided either the underlying response is reasonably homogenous throughout the domain, or else, there is a large number of sampling units. If the conditions are relatively hetrogenous, then the exact location of the sampling units is likely to be highly influential and may mask any detectable effects of treatments.\n\rFixed and random effects\rFrom a frequentist perspective, fixed factors are factors whose levels represent the specific populations of interest. For example, a factor that comprises “high”, “medium” and “low” temperature treatments is a fixed factor - we are only interested in comparing those three populations. Conclusions about the effects of a fixed factor are restricted to the specific treatment levels investigated and for any subsequent experiments to be comparable, the same specific treatments of the factor would need to be used. By contrast, random factors are factors whose levels are randomly chosen from all the possible levels of populations and are used as random representatives of the populations. For example, five random temperature treatments could be used to represent a full spectrum of temperature treatments. In this case, conclusions are extrapolated to all the possible treatment (temperature) levels and for subsequent experiments, a new random set of treatments of the factor would be selected.\nOther common examples of random factors include sites and subjects - factors for which we are attempting to generalise over. Furthermore, the nature of random factors means that we have no indication of how a new level of that factor (such as another subject or site) are likely to respond and thus it is not possible to predict new observations from random factors. These differences between fixed and random factors are reflected in the way their respective null hypotheses are formulated and interpreted. Whilst fixed factors contrast the effects of the different levels of the factor, random factors are modelled as the amount of additional variability they introduce. Random factors are modelled with a mean of \\(0\\) and their variance is estimated as the effect coefficient.\n\rLinear model\rThe linear model for single factor classification is similar to that of multiple linear regression. The linear model can thus be represented by either:\n\rMeans parameterisation - in which the regression slopes represent the means of each treatment group and the intercept is removed (to prevent over-parameterisation).\r\r\\[ y_{ij} = \\beta_1(\\text{level}_1)_{ij} + \\beta_2(\\text{level}_2)_{ij} + \\ldots + \\epsilon_{ij},\\]\nwhere \\(\\beta_1\\) and \\(\\beta_2\\) respectively represent the means response of treatment level \\(1\\) and \\(2\\). This is often simplified to \\(y_{ij}=\\alpha_i + \\epsilon_{ij}\\).\n\rEffects parameterisation - the intercept represents a property such as the mean of one of the treatment groups (treatment contrasts) or the overall mean (sum contrasts), and the slope parameters represent effects (differences between each other group and the reference mean for example).\r\r\\[ y_{ij} = \\mu + \\beta_2(\\text{level}_2)_{ij} + \\beta_3(\\text{level}_3)_{ij} + \\ldots + \\epsilon_{ij},\\]\nwhere \\(\\mu\\) is the mean of the first treatment group, \\(\\beta_2\\) and \\(\\beta_3\\) respectively represent the effects (change from level \\(1\\)) of level \\(2\\) and \\(3\\) on the mean response. This is often simplified to: \\(y_{ij}=\\mu + \\alpha_i + \\epsilon_{ij}\\), with \\(\\alpha_1=0\\).\nSince we are traditionally interested in investigating effects (differences) rather than treatment means, effects parameterisation is far more common (particularly when coupled with hypothesis testing). In a Bayesian framework, it does not really matter whether models are fit with means or effects parameterisation since the posterior likelihood can be querried in any way and repeatedly - thus enabling us to explore any specific effects after the model has been fit. Nevertheless, to ease comparisons with frequentist approaches, we will stick with effects paramterisation.\n\rNull hypothesis: fixed factor\rWe can associate a null hypothesis test with each estimated parameter. For example, in a cell for each estimated mean in a means model we could test a null hypothesis that the population mean is equal to zero (e.g. \\(H_0\\): \\(\\alpha_1=0\\), \\(H_0\\): \\(\\alpha_2=0\\), \\(\\ldots\\)). However, this rarely would be of much interest. By contrast, individual null hypotheses associated with each parameter of the effects model can be used to investigate the differences between each group and a reference group (for example). In addition to the individual null hypothesis tests, a single fixed factor ANOVA tests the collective \\(H_0\\) that there are no differences between the population group means:\n\r\\(H_0: \\mu_1=\\mu_2=\\ldots=\\mu_i=\\mu\\) (the population group means are all equal). That is, that the mean of population \\(1\\) is equal to that of population \\(2\\) and so on, and thus all population means are equal to one another - no effect of the factor on the response. If the effect of the \\(i\\)-th group is the difference between the \\(i\\)-th group mean and the mean of the first group (\\(\\alpha_i=\\mu_i-\\mu_1\\)) then the \\(H_0\\) can alternatively be written as:\n\r\\(H_0 : \\alpha_2=\\alpha_3=\\ldots=\\alpha_i=0\\) (the effect of each group equals zero). If one or more of the \\(\\alpha_i\\) are different from zero (the response mean for this treatment differs from the overall response mean), there is evidence that the null hypothesis is not true indicating that the factor does affect the response variable.\n\r\r\rNull hypothesis: random factor\rThe collective \\(H_0\\) for a random factor is that the variance between all possible treatment groups equals zero:\n\r\\(H_0 : \\sigma^2_{\\alpha}=0\\) (added variance due to this factor equals zero).\r\rNote that whilst the null hypotheses for fixed and random factors are different (fixed: population group means all equal, random: variances between populations all equal zero), the linear model fitted for fixed and random factors in single factor ANOVA models is identical. For more complex multi-factor ANOVA models however, the distinction between fixed and random factors has important consequences for building and interpreting statistical models and null hypotheses.\n\rAnalysis of variance\rWhen the null hypothesis is true (and the populations are identical), the amount of variation among observations within groups should be similar to the amount of variation in observations between groups. However, when the null hypothesis is false (and some means are different from other means), the amount of variation among observations might be expected to be less than the amount of variation within groups. Analysis of variance, or ANOVA, partitions the total variance in the response (dependent) variable into a component of the variance that is explained by combinations of one or more categorical predictor variables (called factors) and a component of the variance that cannot be explained (residual). The variance ratio (F-ratio) from this partitioning can then be used to test the null hypothesis (\\(H_0\\)) that the population group or treatment means are all equal. Ttotal variation can be decomposed into components explained by the groups (\\(MS_{groups}\\)) and and unexplained (\\(MS_{residual}\\)) by the groups. The gray arrows in b) depict the relative amounts explained by the groups. The proposed groupings generally explain why the first few points are higher on the y-axis than the last three points. The probability of collecting our sample, and thus generating the sample ratio of explained to unexplained variation (or one more extreme), when the null hypothesis is true (and population means are equal) is the area under the F-distribution beyond our sample ratio (\\(\\text{F-ratio}=\\frac{MS_{groups}}{MS_{residual}}\\)).\nWhen the null hypothesis is true (and the test assumptions have not been violated), the ratio (F-ratio) of explained to unexplained variance follows a theoretical probability distribution (F-distribution). When the null hypothesis is true, and there is no effect of the treatment on the response variable, the ratio of explained variability to unexplained variability is expected to be \\(\\leq 1\\). Since the denominator should represent the expected numerator in the absence of an effect. Importantly, the denominator in an F-ratio calculation essentially represents what we would expect the numerator to be in the absence of a treatment effect. For simple analyses, identifying what these expected values are is relatively straightforward (equivalent to the degree of within group variability). However, in more complex designs (particularly involving random factors and hierarchical treatment levels), the logical “groups” can be more difficult (and in some cases impossible) to identify. In such cases, nominating the appropriate F-ratio denominator for estimating an specific effect requires careful consideration. The following table depicts the anatomy of the single factor ANOVA table\n\u0026gt; anova_table\rdf MS F-ratio Factor A \u0026quot;a-1\u0026quot; \u0026quot;MS A\u0026quot; \u0026quot;(MS A)/(MS res)\u0026quot;\rResidual \u0026quot;(n-1)a\u0026quot; \u0026quot;MS res\u0026quot; \u0026quot;\u0026quot; \rand corresponding R syntax.\n\u0026gt; anova(lm(DV ~ A, dataset))\r\u0026gt; # OR\r\u0026gt; anova(aov(DV ~ A, dataset))\rAn F-ratio substantially greater than \\(1\\) suggests that the model relating the response variable to the categorical variable explains substantially more variability than is left unexplained. In turn, this implies that the linear model does represent the data well and that differences between observations can be explained largely by differences in treatment levels rather than purely the result of random variation. If the probability of getting the observed (sample) F-ratio or one more extreme is less than some predefined critical value (typically \\(5\\)% or \\(0.05\\)), we conclude that it is highly unlikely that the observed samples could have been collected from populations in which the treatment has no effect and therefore we would reject the null hypothesis.\n\rAssumptions\rAn F-ratio from real data can only reliably relate to a theoretical F-distribution when the data conform to certain assumptions. Hypothesis testing for a single factor ANOVA model assumes that the residuals (and therefore the response variable for each of the treatment levels) are all:\n\rnormally distributed - although ANOVA is robust to non-normality provided sample sizes and variances are equal. Boxplots should be used to explore normality, skewness, bimodality and outliers. In the event of homogeneity of variance issues (see below), a Q-Q normal plot can also be useful for exploring normality (as this might be the cause of non-homogeneity). Scale transformations are often useful.\n\requally varied - provided sample sizes are equal and the largest to smallest variance ratio does not exceed 3:1 (9:1 for sd), ANOVA is reasonably robust to this assumption, however, relationships between variance and mean and/or sample size are of particular concern as they elevate the Type I error rate. Boxplots and plots of means against variance should be used to explore the spread of values. Residual plots should reveal no patterns. Since unequal variances are often the result of non-normality, transformations that improve normality will also improve variance homogeneity.\n\rindependent of one another - this assumption must be addressed at the design and collection stages and cannot be compensated for later (unless a model is used that specifically accounts for particular types of non-independent data, such as that introduced with hierarchical designs or autocorrelation)\n\r\rViolations of these assumptions reduce the reliability of the analysis.\n\r\rData generation\rLets say we had set up a natural experiment in which we measured a response from \\(10\\) sampling units (replicates) from each of \\(5\\) treatments. Hence, we have a single categorical factor with \\(5\\) levels - we might have five different locations, or five different habitat types or substrates etc. In statistical speak, we have sampled from \\(5\\) different populations. We have then randomly selected \\(10\\) independent and random (representative) units of each population to sample. That is, we have \\(10\\) samples (replicates) of each population. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; ngroups \u0026lt;- 5 #number of populations\r\u0026gt; nsample \u0026lt;- 10 #number of reps in each\r\u0026gt; pop.means \u0026lt;- c(40, 45, 55, 40, 30) #population mean length\r\u0026gt; sigma \u0026lt;- 3 #residual standard deviation\r\u0026gt; n \u0026lt;- ngroups * nsample #total sample size\r\u0026gt; eps \u0026lt;- rnorm(n, 0, sigma) #residuals\r\u0026gt; x \u0026lt;- gl(ngroups, nsample, n, lab = LETTERS[1:5]) #factor\r\u0026gt; means \u0026lt;- rep(pop.means, rep(nsample, ngroups))\r\u0026gt; X \u0026lt;- model.matrix(~x - 1) #create a design matrix\r\u0026gt; y \u0026lt;- as.numeric(X %*% pop.means + eps)\r\u0026gt; data \u0026lt;- data.frame(y, x)\r\u0026gt; head(data) #print out the first six rows of the data set\ry x\r1 38.31857 A\r2 39.30947 A\r3 44.67612 A\r4 40.21153 A\r5 40.38786 A\r6 45.14519 A\r\u0026gt; \u0026gt; write.csv(data, \u0026quot;simpleAnova.csv\u0026quot;)\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the treatment type.\nExploratory data analysis\r\rNormality and Homogeneity of variance\r\r\u0026gt; boxplot(y ~ x, data)\r\u0026gt; \u0026gt; # OR via ggplot2\r\u0026gt; library(ggplot2)\r\u0026gt; ggplot(data, aes(y = y, x = x)) + geom_boxplot() +\r+ theme_classic()\rConclusions\nThere is no evidence that the response variable is consistently non-normal across all populations - each boxplot is approximately symmetrical. There is no evidence that variance (as estimated by the height of the boxplots) differs between the five populations. More importantly, there is no evidence of a relationship between mean and variance - the height of boxplots does not increase with increasing position along the \\(y\\)-axis. Hence it there is no evidence of non-homogeneity. Obvious violations could be addressed either by, for example, transforming the scale of the response variables (to address normality etc). Note transformations should be applied to the entire response variable (not just those populations that are skewed).\n\r\rModel fitting\rThe observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values (\\(\\mu\\)) are themselves determined by the linear predictor (\\(\\beta_0+\\boldsymbol \\beta \\boldsymbol X_i\\)). In this case, \\(\\beta_0\\) represents the mean of the first group and the set of \\(\\boldsymbol \\beta\\)’s represent the differences between each other group and the first group. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying ‘uninformative’ priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation.\n\\[y_i \\sim N(\\mu_i,\\sigma), \\]\nwhere \\(\\mu_i=\\beta_0 +\\boldsymbol \\beta \\boldsymbol X_i\\). The assumed priors are: \\(\\beta \\sim N(0,100)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We proceed to code the model into STAN.\n\u0026gt; modelString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ //Likelihood\r+ y~normal(mu,sigma);\r+ + //Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;anovaModel.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~x, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = Xmat, nX = ncol(Xmat), n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 500\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 2000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 1500\rNow compile and run the Stan code via the rstan interface. Note that the first time stan is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.rstan \u0026lt;- stan(data = data.list, file = \u0026quot;anovaModel.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;anovaModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.05 seconds (Warm-up)\rChain 1: 0.055 seconds (Sampling)\rChain 1: 0.105 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;anovaModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.049 seconds (Warm-up)\rChain 2: 0.063 seconds (Sampling)\rChain 2: 0.112 seconds (Total)\rChain 2: \u0026gt; \u0026gt; print(data.rstan, par = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: anovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.24 0.04 0.89 38.45 39.69 40.24 40.87 41.93 634 1.01\rbeta[2] 5.38 0.04 1.25 2.97 4.54 5.36 6.18 7.86 833 1.00\rbeta[3] 13.48 0.04 1.29 10.89 12.64 13.41 14.34 15.97 888 1.00\rbeta[4] 0.70 0.04 1.25 -1.81 -0.13 0.69 1.56 3.06 949 1.01\rbeta[5] -10.27 0.04 1.25 -12.57 -11.13 -10.30 -9.40 -7.85 817 1.00\rsigma 2.85 0.01 0.31 2.34 2.64 2.83 3.04 3.53 1108 1.00\rSamples were drawn using NUTS(diag_e) at Mon Feb 17 11:28:36 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.rstan)\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta\u0026quot;,\u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta\u0026quot;,\u0026quot;sigma\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r$`1`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r$`2`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; stan_ac(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\u0026gt; stan_rhat(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\r\u0026gt; stan_ess(data.rstan, pars = c(\u0026quot;beta\u0026quot;))\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model. Residuals are not computed directly within rstan However, we can calculate them manually form the posteriors.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit)) + theme_classic()\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = newdata %\u0026gt;% cbind(fit, resid)\r\u0026gt; ggplot(newdata) + geom_point(aes(y = resid, x = x)) + theme_classic()\rAnd now for studentised residuals\n\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:5], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit)) + theme_classic()\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.data.frame(data.rstan) %\u0026gt;% dplyr:::select(contains(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:5]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; newdata = data.frame(x = data$x, yRep) %\u0026gt;% gather(key = Sample,\r+ value = Value, -x)\r\u0026gt; ggplot(newdata) + geom_violin(aes(y = Value, x = x, fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_violin(data = data, aes(y = y, x = x,\r+ fill = \u0026quot;Obs\u0026quot;), alpha = 0.5) + geom_point(data = data, aes(y = y,\r+ x = x), position = position_jitter(width = 0.1, height = 0),\r+ color = \u0026quot;black\u0026quot;) + theme_classic()\rThe predicted trends do encapsulate the actual data, suggesting that the model is a reasonable representation of the underlying processes. Note, these are prediction intervals rather than confidence intervals as we are seeking intervals within which we can predict individual observations rather than means. We can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(as.matrix(data.rstan), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.rstan, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: anovaModel.\r2 chains, each with iter=1500; warmup=500; thin=1; post-warmup draws per chain=1000, total post-warmup draws=2000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 40.24 0.04 0.89 38.45 39.69 40.24 40.87 41.93 634 1.01\rbeta[2] 5.38 0.04 1.25 2.97 4.54 5.36 6.18 7.86 833 1.00\rbeta[3] 13.48 0.04 1.29 10.89 12.64 13.41 14.34 15.97 888 1.00\rbeta[4] 0.70 0.04 1.25 -1.81 -0.13 0.69 1.56 3.06 949 1.01\rbeta[5] -10.27 0.04 1.25 -12.57 -11.13 -10.30 -9.40 -7.85 817 1.00\rsigma 2.85 0.01 0.31 2.34 2.64 2.83 3.04 3.53 1108 1.00\rSamples were drawn using NUTS(diag_e) at Mon Feb 17 11:28:36 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, pars = c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 6 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 40.2 0.895 38.4 41.9 2 beta[2] 5.38 1.25 3.09 7.96\r3 beta[3] 13.5 1.29 11.0 16.1 4 beta[4] 0.703 1.25 -1.94 2.90\r5 beta[5] -10.3 1.25 -12.6 -7.85\r6 sigma 2.85 0.306 2.33 3.50\rConclusions\n\rthe mean of the first group (A) is \\(40.2\\)\rthe mean of the second group (B) is \\(5.4\\) units greater than (A)\rthe mean of the third group (C) is \\(13.5\\) units greater than (A)\rthe mean of the forth group (D) is \\(0.74\\) units greater than (A)\rthe mean of the fifth group (E) is \\(-10.2\\) units greater (i.e. less) than (A)\r\rThe \\(95\\)% confidence interval for the effects of B, C and E do not overlap with \\(0\\) implying a significant difference between group A and groups B, C and E. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[2]\u0026quot;]) # effect of (B-A)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[3]\u0026quot;]) # effect of (C-A)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[4]\u0026quot;]) # effect of (D-A)\r[1] 0.5805\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, \u0026quot;beta[5]\u0026quot;]) # effect of (E-A)\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, 2:5]) # effect of (all groups)\r[1] 0\rThere is evidence that the reponse differs between the groups. There is evidence suggesting that the response of group D differs from that of group A. In a Bayesian context, we can compare models using the leave-one-out cross-validation statistics. Leave-one-out (LOO) cross-validation explores how well a series of models can predict withheld values Vehtari, Gelman, and Gabry (2017). The LOO Information Criterion (LOOIC) is analogous to the AIC except that the LOOIC takes priors into consideration, does not assume that the posterior distribution is drawn from a multivariate normal and integrates over parameter uncertainty so as to yield a distribution of looic rather than just a point estimate. The LOOIC does however assume that all observations are equally influential (it does not matter which observations are left out). This assumption can be examined via the Pareto \\(k\\) estimate (values greater than \\(0.5\\) or more conservatively \\(0.75\\) are considered overly influential). We can compute LOOIC if we store the loglikelihood from our STAN model, which can then be extracted to compute the information criterion using the package loo.\n\u0026gt; library(loo)\r\u0026gt; (full = loo(extract_log_lik(data.rstan)))\rComputed from 2000 by 50 log-likelihood matrix\rEstimate SE\relpd_loo -125.8 5.1\rp_loo 5.6 1.1\rlooic 251.6 10.2\r------\rMonte Carlo SE of elpd_loo is 0.1.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; # now fit a model without main factor\r\u0026gt; modelString2 = \u0026quot;\r+ data {\r+ int\u0026lt;lower=1\u0026gt; n;\r+ int\u0026lt;lower=1\u0026gt; nX;\r+ vector [n] y;\r+ matrix [n,nX] X;\r+ }\r+ parameters {\r+ vector[nX] beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n] mu;\r+ + mu = X*beta;\r+ }\r+ model {\r+ //Likelihood\r+ y~normal(mu,sigma);\r+ + //Priors\r+ beta ~ normal(0,1000);\r+ sigma~cauchy(0,5);\r+ }\r+ generated quantities {\r+ vector[n] log_lik;\r+ + for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(y[i] | mu[i], sigma); + }\r+ }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString2, con = \u0026quot;anovaModel2.stan\u0026quot;)\r\u0026gt; \u0026gt; Xmat \u0026lt;- model.matrix(~1, data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = Xmat, n = nrow(data), nX = ncol(Xmat)))\r\u0026gt; data.rstan.red \u0026lt;- stan(data = data.list, file = \u0026quot;anovaModel2.stan\u0026quot;, chains = nChains,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps)\rSAMPLING FOR MODEL \u0026#39;anovaModel\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 1: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 1: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 1: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 1: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 1: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 1: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 1: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 1: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 1: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 1: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 1: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.019 seconds (Warm-up)\rChain 1: 0.042 seconds (Sampling)\rChain 1: 0.061 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;anovaModel\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 1500 [ 0%] (Warmup)\rChain 2: Iteration: 150 / 1500 [ 10%] (Warmup)\rChain 2: Iteration: 300 / 1500 [ 20%] (Warmup)\rChain 2: Iteration: 450 / 1500 [ 30%] (Warmup)\rChain 2: Iteration: 501 / 1500 [ 33%] (Sampling)\rChain 2: Iteration: 650 / 1500 [ 43%] (Sampling)\rChain 2: Iteration: 800 / 1500 [ 53%] (Sampling)\rChain 2: Iteration: 950 / 1500 [ 63%] (Sampling)\rChain 2: Iteration: 1100 / 1500 [ 73%] (Sampling)\rChain 2: Iteration: 1250 / 1500 [ 83%] (Sampling)\rChain 2: Iteration: 1400 / 1500 [ 93%] (Sampling)\rChain 2: Iteration: 1500 / 1500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.021 seconds (Warm-up)\rChain 2: 0.094 seconds (Sampling)\rChain 2: 0.115 seconds (Total)\rChain 2: \u0026gt; \u0026gt; (reduced = loo(extract_log_lik(data.rstan.red)))\rComputed from 2000 by 50 log-likelihood matrix\rEstimate SE\relpd_loo -177.8 4.4\rp_loo 1.6 0.3\rlooic 355.6 8.7\r------\rMonte Carlo SE of elpd_loo is 0.0.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; par(mfrow = 1:2, mar = c(5, 3.8, 1, 0) + 0.1, las = 3)\r\u0026gt; plot(full, label_points = TRUE)\r\u0026gt; plot(reduced, label_points = TRUE)\rThe expected out-of-sample predictive accuracy is substantially lower for the model that includes \\(x\\). This might be used to suggest that the inferential evidence for a general effect of \\(x\\) on \\(y\\).\n\rGraphical summaries\rWith appropriate use of model matrices and data wrangling, it is possible to produce a single prediction data set along with ggplot syntax to produce a multi-panel figure. First we look at the additive model.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = rbind(data.frame(x = levels(data$x)))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;, \u0026quot;beta[4]\u0026quot;, \u0026quot;beta[5]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_linerange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_point() + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rAs this is simple single factor ANOVA, we can simple add the raw data to this figure. For more complex designs with additional predictors, it is necessary to plot partial residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = as.numeric(x) - 0.1)) + geom_blank(aes(x = x)) +\r+ geom_point(data = rdata, aes(y = partial.resid, x = as.numeric(x) +\r+ 0.1), color = \u0026quot;gray\u0026quot;) + geom_linerange(aes(ymin = conf.low, ymax = conf.high)) +\r+ geom_point() + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + theme_classic()\r\rPosteriors\rIn frequentist statistics, when we have more than two groups, we are typically not only interested in whether there is evidence for an overall “effect” of a factor - we are also interested in how various groups compare to one another. To explore these trends, we either compare each group to each other in a pairwise manner (controlling for family-wise Type I error rates) or we explore an independent subset of the possible comparisons. Although these alternate approaches can adequately address a specific research agenda, often they impose severe limitations and compromises on the scope and breadth of questions that can be asked of your data. The reason for these limitations is that in a frequentist framework, any single hypothesis carries with it a (nominally) \\(5\\)% chance of a false rejection (since it is based on long-run frequency). Thus, performing multiple tests are likely to compound this error rate. The point is, that each comparison is compared to its own probability distribution (and each carries a \\(5\\)% error rate). By contrast, in Bayesian statistics, all comparisons (contrasts) are drawn from the one (hopefully stable and convergent) posterior distribution and this posterior is invariant to the type and number of comparisons drawn. Hence, the theory clearly indicates that having generated our posterior distribution, we can then query this distribution in any way that we wish thereby allowing us to explore all of our research questions simultaneously.\nBayesian “contrasts” can be performed either:\n\rwithin the Bayesian sampling model or\n\rconstruct them from the returned MCMC samples (they are drawn from the posteriors)\n\r\rOnly the latter will be demonstrated as it povides a consistent approach across all routines. In order to allow direct comparison to the frequentist equivalents, I will explore the same set of planned and Tukey’s test comparisons described here. For the “planned comparison” we defined two contrasts: 1) group 3 vs group 5; and 2) the average of groups 1 and 2 vs the average of groups 3, 4 and 5.\nLets start by comparing each group to each other group in a pairwise manner. Arguably the most elegant way to do this is to generate a Tukey’s contrast matrix. This is a model matrix specific to comparing each group to each other group.\n\u0026gt; mcmc = data.rstan\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:5]\r\u0026gt; newdata \u0026lt;- data.frame(x = levels(data$x))\r\u0026gt; # A Tukeys contrast matrix\r\u0026gt; library(multcomp)\r\u0026gt; # table(newdata$x) - gets the number of replicates of each level\r\u0026gt; tuk.mat \u0026lt;- contrMat(n = table(newdata$x), type = \u0026quot;Tukey\u0026quot;)\r\u0026gt; Xmat \u0026lt;- model.matrix(~x, data = newdata)\r\u0026gt; pairwise.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; pairwise.mat\r(Intercept) xB xC xD xE\rB - A 0 1 0 0 0\rC - A 0 0 1 0 0\rD - A 0 0 0 1 0\rE - A 0 0 0 0 1\rC - B 0 -1 1 0 0\rD - B 0 -1 0 1 0\rE - B 0 -1 0 0 1\rD - C 0 0 -1 1 0\rE - C 0 0 -1 0 1\rE - D 0 0 0 -1 1\r\u0026gt; \u0026gt; mcmc_areas(coefs %*% t(pairwise.mat))\r\u0026gt; \u0026gt; (comps = tidyMCMC(coefs %*% t(pairwise.mat), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 10 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 B - A 5.38 1.25 3.09 7.96\r2 C - A 13.5 1.29 11.0 16.1 3 D - A 0.703 1.25 -1.94 2.90\r4 E - A -10.3 1.25 -12.6 -7.85\r5 C - B 8.10 1.28 5.71 10.8 6 D - B -4.68 1.26 -7.06 -2.21\r7 E - B -15.6 1.25 -18.3 -13.4 8 D - C -12.8 1.29 -15.3 -10.1 9 E - C -23.7 1.31 -26.2 -21.0 10 E - D -11.0 1.27 -13.5 -8.63\r\u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rWith a couple of modifications, we could also express this as percentage changes. A percentage change represents the change (difference between groups) divided by one of the groups (determined by which group you want to express the percentage change to). Hence, we generate an additional mcmc matrix that represents the cell means for the divisor group (group we want to express change relative to). Since the tuk.mat defines comparisons as \\(-1\\) and \\(1\\) pairs, if we simply replace all the \\(-1\\) with \\(0\\), the eventual matrix multiplication will result in estimates of the divisor cell means instread of the difference. We can then divide the original mcmc matrix above with this new divisor mcmc matrix to yeild a mcmc matrix of percentage change.\n\u0026gt; # Modify the tuk.mat to replace -1 with 0. This will allow us to get a\r\u0026gt; # mcmc matrix of ..\r\u0026gt; tuk.mat[tuk.mat == -1] = 0\r\u0026gt; comp.mat \u0026lt;- tuk.mat %*% Xmat\r\u0026gt; comp.mat\r(Intercept) xB xC xD xE\rB - A 1 1 0 0 0\rC - A 1 0 1 0 0\rD - A 1 0 0 1 0\rE - A 1 0 0 0 1\rC - B 1 0 1 0 0\rD - B 1 0 0 1 0\rE - B 1 0 0 0 1\rD - C 1 0 0 1 0\rE - C 1 0 0 0 1\rE - D 1 0 0 0 1\r\u0026gt; \u0026gt; comp.mcmc = 100 * (coefs %*% t(pairwise.mat))/coefs %*% t(comp.mat)\r\u0026gt; (comps = tidyMCMC(comp.mcmc, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 10 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 B - A 11.8 2.59 6.40 16.5 2 C - A 25.1 2.11 20.9 29.1 3 D - A 1.67 3.02 -4.53 7.24\r4 E - A -34.4 4.95 -43.7 -24.9 5 C - B 15.1 2.20 10.9 19.6 6 D - B -11.5 3.27 -17.7 -5.09\r7 E - B -52.3 5.36 -62.5 -41.7 8 D - C -31.3 3.64 -38.4 -23.7 9 E - C -79.4 6.27 -90.6 -66.2 10 E - D -36.7 5.06 -46.9 -27.4 \u0026gt; \u0026gt; ggplot(comps, aes(y = estimate, x = term)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + geom_hline(yintercept = 0, linetype = \u0026quot;dashed\u0026quot;) +\r+ scale_y_continuous(\u0026quot;Effect size (%)\u0026quot;) + scale_x_discrete(\u0026quot;\u0026quot;) + coord_flip() +\r+ theme_classic()\rAnd now for the specific planned comparisons (Group 3 vs Group 5 and the average of Groups 1 and 2 vs the average of Groups 3, 4 and 5). This is achieved by generating our own contrast matrix (defining the contributions of each group to each contrast).\n\u0026gt; c.mat = rbind(c(0, 0, -1, 0, 1), c(-1/2, -1/2, 1/3, 1/3, 1/3))\r\u0026gt; c.mat\r[,1] [,2] [,3] [,4] [,5]\r[1,] 0.0 0.0 -1.0000000 0.0000000 1.0000000\r[2,] -0.5 -0.5 0.3333333 0.3333333 0.3333333\r\u0026gt; \u0026gt; mcmc = data.rstan\r\u0026gt; coefs \u0026lt;- as.matrix(mcmc)[, 1:5]\r\u0026gt; newdata \u0026lt;- data.frame(x = levels(data$x))\r\u0026gt; Xmat \u0026lt;- model.matrix(~x, data = newdata)\r\u0026gt; c.mat = c.mat %*% Xmat\r\u0026gt; c.mat\r(Intercept) xB xC xD xE\r[1,] 0.000000e+00 0.0 -1.0000000 0.0000000 1.0000000\r[2,] -1.110223e-16 -0.5 0.3333333 0.3333333 0.3333333\r\u0026gt; \u0026gt; (comps = tidyMCMC(as.mcmc(coefs %*% t(c.mat)), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -23.7 1.31 -26.2 -21.0 2 var2 -1.38 0.806 -2.92 0.186\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 9.94 0.532 8.89 11.0 2 sd.resid 2.79 0.0888 2.67 2.96\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 78.3 1.06 76.0 79.7\r2 sd.resid 21.7 1.06 20.3 24.0\rApproximately \\(78.3\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; wch = grep(\u0026quot;beta\u0026quot;, colnames(mcmc))\r\u0026gt; coefs = mcmc[, wch]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.887 0.0126 0.863 0.905\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ x, data))\rCall:\rlm(formula = y ~ x, data = data)\rResiduals:\rMin 1Q Median 3Q Max -6.5257 -1.9000 -0.2589 1.4935 6.5330 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.2239 0.8801 45.702 \u0026lt; 2e-16 ***\rxB 5.4020 1.2447 4.340 7.97e-05 ***\rxC 13.5024 1.2447 10.848 3.82e-14 ***\rxD 0.7423 1.2447 0.596 0.554 xE -10.2500 1.2447 -8.235 1.57e-10 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 2.783 on 45 degrees of freedom\rMultiple R-squared: 0.8957, Adjusted R-squared: 0.8865 F-statistic: 96.64 on 4 and 45 DF, p-value: \u0026lt; 2.2e-16\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\rVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and Waic.” Statistics and Computing 27 (5): 1413–32.\n\r\r\r","date":1580868794,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580868794,"objectID":"dc919318a49b8d196424845dcf1791a5","permalink":"/stan/single-factor-anova-stan/single-factor-anova-stan/","publishdate":"2020-02-04T21:13:14-05:00","relpermalink":"/stan/single-factor-anova-stan/single-factor-anova-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","anova","factor analysis"],"title":"Single Factor Anova - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","linear regression","JAGS"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rMultiple regression is an extension of simple linear regression whereby a response variable is modelled against a linear combination of two or more simultaneously measured predictor variables. There are two main purposes of multiple linear regression:\nTo develop a better predictive model (equation) than is possible from models based on single independent variables.\n\rTo investigate the relative individual effects of each of the multiple independent variables above and beyond (standardised across) the effects of the other variables.\n\r\rAlthough the relationship between response variable and the additive effect of all the predictor variables is represented overall by a single multidimensional plane (surface), the individual effects of each of the predictor variables on the response variable (standardised across the other variables) can be depicted by single partial regression lines. The slope of any single partial regression line (partial regression slope) thereby represents the rate of change or effect of that specific predictor variable (holding all the other predictor variables constant to their respective mean values) on the response variable. In essence, it is the effect of one predictor variable at one specific level (the means) of all the other predictor variables (i.e. when each of the other predictors are set to their averages).\nMultiple regression models can be constructed additively (containing only the predictor variables themselves) or in a multiplicative design (which incorporate interactions between predictor variables in addition to the predictor variables themselves). Multiplicative models are used primarily for testing inferences about the effects of various predictor variables and their interactions on the response variable. Additive models by contrast are used for generating predictive models and estimating the relative importance of individual predictor variables more so than hypothesis testing.\n\rAdditive Model\r\\[ y_i = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\ldots + \\beta_Jx_{iJ} + \\epsilon_i,\\]\nwhere \\(\\beta_0\\) is the population \\(y\\)-intercept (value of \\(y\\) when all partial slopes equal zero), \\(\\beta_1,\\beta_2,\\ldots,\\beta_{J}\\) are the partial population slopes of \\(Y\\) on \\(X_1,X_2,\\ldots,X_J\\) respectively holding the other \\(X\\) constant. \\(\\epsilon_i\\) is the random unexplained error or residual component. The additive model assumes that the effect of one predictor variable (partial slope) is independent of the levels of the other predictor variables.\n\rMultiplicative Model\r\\[ y_i = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i1}x_{i2} + \\ldots + \\beta_Jx_{iJ} + \\epsilon_i,\\]\nwhere \\(\\beta_3x_{i1}x_{i2}\\) is the interactive effect of \\(X_1\\) and \\(X_2\\) on \\(Y\\) and it examines the degree to which the effect of one of the predictor variables depends on the levels of the other predictor variable(s).\n\rData generation\rLets say we had set up a natural experiment in which we measured a response (\\(y\\)) from each of \\(20\\) sampling units (\\(n=20\\)) across a landscape. At the same time, we also measured two other continuous covariates (\\(x_1\\) and \\(x_2\\)) from each of the sampling units. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; n = 100\r\u0026gt; intercept = 5\r\u0026gt; temp = runif(n)\r\u0026gt; nitro = runif(n) + 0.8 * temp\r\u0026gt; int.eff = 2\r\u0026gt; temp.eff \u0026lt;- 0.85\r\u0026gt; nitro.eff \u0026lt;- 0.5\r\u0026gt; res = rnorm(n, 0, 1)\r\u0026gt; coef \u0026lt;- c(int.eff, temp.eff, nitro.eff, int.eff)\r\u0026gt; mm \u0026lt;- model.matrix(~temp * nitro)\r\u0026gt; \u0026gt; y \u0026lt;- t(coef %*% t(mm)) + res\r\u0026gt; data \u0026lt;- data.frame(y, x1 = temp, x2 = nitro, cx1 = scale(temp,\r+ scale = F), cx2 = scale(nitro, scale = F))\r\u0026gt; head(data)\ry x1 x2 cx1 cx2\r1 2.426468 0.2875775 0.8300510 -0.21098147 -0.08302110\r2 4.927690 0.7883051 0.9634676 0.28974614 0.05039557\r3 3.176118 0.4089769 0.8157946 -0.08958207 -0.09727750\r4 6.166652 0.8830174 1.6608878 0.38445841 0.74781568\r5 4.788890 0.9404673 1.2352762 0.44190829 0.32220415\r6 2.541536 0.0455565 0.9267954 -0.45300249 0.01372335\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the components linear predictor (continuous predictors). We could model the relationship via either:\n\rAn additive model in which the effects of each predictor contribute in an additive way to the response - we do not allow for an interaction as we consider an interaction either not of great importance or likely to be absent.\n\rA multiplicative model in which the effects of each predictor and their interaction contribute to the response - we allow for the impact of one predictor to vary across the range of the other predictor.\n\r\r\rCentering the data\rWhen a linear model contains a covariate (continuous predictor variable) in addition to another predictor (continuous or categorical), it is nearly always advisable that the continuous predictor variables are centered prior to the analysis. Centering is a process by which the mean of a variable is subtracted from each of the values such that the scale of the variable is shifted so as to be centered around \\(0\\). Hence the mean of the new centered variable will be \\(0\\), yet it will retain the same variance.\nThere are multiple reasons for this:\nIt provides some clinical meaning to the \\(y\\)-intercept. Recall that the \\(y\\)-intercept is the value of \\(Y\\) when \\(X\\) is equal to zero. If \\(X\\) is centered, then the \\(y\\)-intercept represents the value of \\(Y\\) at the mid-point of the \\(X\\) range. The \\(y\\)-intercept of an uncentered \\(X\\) typically represents a unreal value of \\(Y\\) (as an \\(X\\) of \\(0\\) is often beyond the reasonable range of values).\n\rIn multiplicative models (in which predictors and their interactions are included), main effects and interaction terms built from centered predictors will not be correlated to one another.\n\rFor more complex models, centering the covariates can increase the likelihood that the modelling engine converges (arrives at a numerically stable and reliable outcome).\n\r\rNote, centering will not effect the slope estimates. In R, centering is easily achieved with the scale function, which centers and scales (divides by standard deviation) the data. We only really need to center the data, so we provide the argument scale=FALSE. Also note that the scale function attaches the pre-centered mean (and standard deviation if scaling is performed) as attributes to the scaled data in order to facilitate back-scaling to the original scale. While these attributes are often convenient, they do cause issues for some of the Bayesian routines and so we will strip these attributes using the as.numeric function. Instead, we will create separate scalar variables to store the pre-scaled means.\n\u0026gt; data \u0026lt;- within(data, {\r+ cx1 \u0026lt;- as.numeric(scale(x1, scale = FALSE))\r+ cx2 \u0026lt;- as.numeric(scale(x2, scale = FALSE))\r+ })\r\u0026gt; head(data)\ry x1 x2 cx1 cx2\r1 2.426468 0.2875775 0.8300510 -0.21098147 -0.08302110\r2 4.927690 0.7883051 0.9634676 0.28974614 0.05039557\r3 3.176118 0.4089769 0.8157946 -0.08958207 -0.09727750\r4 6.166652 0.8830174 1.6608878 0.38445841 0.74781568\r5 4.788890 0.9404673 1.2352762 0.44190829 0.32220415\r6 2.541536 0.0455565 0.9267954 -0.45300249 0.01372335\r\u0026gt; \u0026gt; mean.x1 = mean(data$x1)\r\u0026gt; mean.x2 = mean(data$x2)\r\r\rAssumptions\rThe assumptions of the model are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages.\n\rThe response variable (and thus the residuals) should be normally distributed. A boxplot of the entire variable is usually useful for diagnosing major issues with normality.\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately). Scatterplots with linear smoothers can be useful for exploring the spread of observations around the trendline. The spread of observations around the trendline should not increase (or decrease) along its length.\n\rThe predictor variables should be uniformly or normally distributed. Again, boxplots can be useful.\n\rThe relationships between the linear predictors (right hand side of the regression formula) and the response variable should be linear. Scatterplots with smoothers can be useful for identifying possible non-linearity.\n\r(Multi)collinearity. The number of predictor variables must be less than the number of observations otherwise the linear model will be over-parameterized (more parameters to estimate than there are independent data from which estimates are calculated).\n\r\r(Multi)collinearity breaks the assumption that a predictor variable must not be correlated to the combination of other predictor variables (known collectively as the linear predictor). Multicollinearity has major detrimental effects on model fitting:\n\rInstability of the estimated partial regression slopes (small changes in the data or variable inclusion can cause dramatic changes in parameter estimates).\n\rInflated standard errors and confidence intervals of model parameters, thereby increasing the type II error rate (reducing power) of parameter hypothesis tests.\n\r\rMulticollinearity can be diagnosed with the following situatons:\n\rInvestigate pairwise correlations between all the predictor variables either by a correlation matrix or a scatterplot matrix\n\rCalculate the tolerance \\((1−r^2)\\) of the relationship between a predictor variable and all the other predictor variables for each of the predictor variables. Tolerance is a measure of the degree of collinearity and values less than \\(0.2\\) should be considered and values less than \\(0.1\\) should be given serious attention. Variance inflation factor (VIF) is the inverse of tolerance and thus values greater than \\(5\\), or worse, \\(10\\) indicate collinearity.\n\rPCA (principle components analysis) eigenvalues (from a correlation matrix for all the predictor variables) close to zero indicate collinearity and component loadings may be useful in determining which predictor variables cause collinearity.\n\r\rThere are several approaches to dealing with collinearity (however the first two of these are likely to result in biased parameter estimates):\nRemove the highly correlated predictor variable(s), starting with the least most clinically interesting variable(s)\n\rPCA (principle components analysis) regression - regress the response variable against the principal components resulting from a correlation matrix for all the predictor variables. Each of these principal components by definition are completely independent, but the resulting parameter estimates must be back-calculated in order to have any clinical meaning.\n\rApply a regression tree - regression trees recursively partitioning (subsetting) the data in accordance to individual variables that explain the greatest remaining variance. Since at each iteration, each predictor variable is effectively evaluated in isolation, (multi)collinearity is not an issue.\n\r\r\rModel fitting\rMultiple linear regression models can include predictors (terms) that are incorporated additively (no interactions) or multiplicatively (with interactions). As such we will explore these separately for each modelling tool. The observed responses (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor. In this case, \\(\\beta_0\\) represents the \\(y\\)-intercept (value of \\(y\\) when all of the \\(x\\)’s are equal to zero) and the set of \\(\\beta\\)’s represent the rates of change in y for every unit change in each \\(x\\) (the effect) holding each other \\(x\\) constant. Note that since we should always center all predictors (by subtracting the mean of each \\(x\\) from the repective values of each \\(x\\)), the \\(y\\)-intercept represents the value of \\(y\\) at the average value of each \\(x\\).\nMCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying “uninformative” priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation:\n\\[ y_i \\sim \\text{Normal}(\\mu_i, \\sigma),\\]\nwhere \\(\\mu_i=\\beta_0 + \\boldsymbol \\beta \\boldsymbol X_i\\). Priors are specified as: \\(\\boldsymbol \\beta \\sim \\text{Normal}(0,1000)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We will explore Bayesian modelling of multiple linear regression using JAGS. Remember that in this software normal distributions are specified in terms of precision \\(\\tau\\) rather than standard deviation \\(\\sigma\\), where \\(\\tau=\\frac{1}{\\sigma^2}\\).\n\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- beta0 + inprod(beta[],X[i,])\r+ }\r+ #Priors\r+ beta0 ~ dnorm(0.01,1.0E-6)\r+ for (j in 1:nX) {\r+ beta[j] ~ dnorm(0.01,1.0E-6)\r+ }\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ sigma~dunif(0,100)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;ttestModel.txt\u0026quot;)\rAdditive Model\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X = model.matrix(~cx1 + cx2, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = X[, -1], nX = ncol(X) -\r+ 1, n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rNow run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags.add \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;ttestModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 4\rTotal graph size: 614\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags.add)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 2.830 0.442 1.964 2.538 2.830 3.125 3.694 1.001 7400\rbeta[2] 1.582 0.380 0.833 1.327 1.581 1.834 2.319 1.001 14000\rbeta0 3.799 0.100 3.603 3.733 3.797 3.865 3.997 1.001 15000\rsigma 0.996 0.074 0.864 0.944 0.992 1.043 1.154 1.001 15000\rdeviance 281.420 2.961 277.779 279.260 280.727 282.888 288.827 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 4.4 and DIC = 285.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMultiplicative Model\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor matrix, the number of predictors, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X = model.matrix(~cx1 * cx2, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(y = y, X = X[, -1], nX = ncol(X) - 1, n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and the chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Run the JAGS code via the R2jags interface. Note that the first time jags is run after the R2jags package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; data.r2jags.mult \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params,\r+ model.file = \u0026quot;ttestModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter,\r+ n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 5\rTotal graph size: 715\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags.mult)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 2.800 0.451 1.914 2.500 2.801 3.104 3.680 1.001 15000\rbeta[2] 1.504 0.389 0.744 1.237 1.505 1.766 2.267 1.001 15000\rbeta[3] 1.451 1.210 -0.933 0.643 1.456 2.238 3.849 1.001 15000\rbeta0 3.715 0.122 3.475 3.633 3.715 3.797 3.957 1.001 6000\rsigma 0.994 0.073 0.863 0.944 0.989 1.039 1.151 1.001 15000\rdeviance 280.964 3.307 276.617 278.541 280.281 282.649 289.157 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 5.5 and DIC = 286.4\rDIC is an estimate of expected predictive error (lower deviance is better).\r\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\). Rather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model.\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags.mult, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;))\r\u0026gt; traplot(data.r2jags.mult, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; data.mcmc = as.mcmc(data.r2jags.mult)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3609 3746 0.963 beta[2] 2 3811 3746 1.020 beta[3] 2 3811 3746 1.020 beta0 2 3770 3746 1.010 deviance 2 3729 3746 0.995 sigma 4 4989 3746 1.330 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta[1] 2 3729 3746 0.995 beta[2] 2 3730 3746 0.996 beta[3] 2 3811 3746 1.020 beta0 2 3729 3746 0.995 deviance 2 3751 3746 1.000 sigma 4 5306 3746 1.420 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta[1] beta[2] beta[3] beta0 deviance\rLag 0 1.000000000 1.0000000000 1.000000000 1.000000000 1.000000e+00\rLag 1 -0.007495093 -0.0002601039 -0.004404658 -0.016267523 1.340676e-01\rLag 5 0.004013980 -0.0121560194 0.004193180 0.006361847 7.319664e-05\rLag 10 -0.009167511 -0.0004423631 0.007960201 0.005194172 -5.183038e-03\rLag 50 0.001459434 0.0077668977 -0.006551273 -0.003063066 -5.021565e-03\rsigma\rLag 0 1.000000000\rLag 1 0.262166680\rLag 5 -0.020700390\rLag 10 -0.006918124\rLag 50 0.001501713\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. For more complex models (those that contain multiple effects), it is also advisable to plot the residuals against each of the individual predictors. For sampling designs that involve sample collection over space or time, it is also a good idea to explore whether there are any temporal or spatial patterns in the residuals.\nThere are numerous situations (e.g. when applying specific variance-covariance structures to a model) where raw residuals do not reflect the interior workings of the model. Typically, this is because they do not take into account the variance-covariance matrix or assume a very simple variance-covariance matrix. Since the purpose of exploring residuals is to evaluate the model, for these cases, it is arguably better to draw conclusions based on standardized (or studentised) residuals. Unfortunately the definitions of standardised and studentised residuals appears to vary and the two terms get used interchangeably. I will adopt the following definitions:\n\rStandardised residuals. The raw residuals divided by the true standard deviation of the residuals (which of course is rarely known).\n\rStudentised residuals. The raw residuals divided by the standard deviation of the residuals. Note that externally studentised residuals are calculated by dividing the raw residuals by a unique standard deviation for each observation that is calculated from regressions having left each successive observation out.\n\rPearson residuals. The raw residuals divided by the standard deviation of the response variable.\n\r\rhe mark of a good model is being able to predict well. In an ideal world, we would have sufficiently large sample size as to permit us to hold a fraction (such as \\(25\\)%) back thereby allowing us to train the model on \\(75\\)% of the data and then see how well the model can predict the withheld \\(25\\)%. Unfortunately, such a luxury is still rare. The next best option is to see how well the model can predict the observed data. Models tend to struggle most with the extremes of trends and have particular issues when the extremes approach logical boundaries (such as zero for count data and standard deviations). We can use the fitted model to generate random predicted observations and then explore some properties of these compared to the actual observed data.\nRather than dublicate this for both additive and multiplicative models, we will only explore the multiplicative model. Residuals are not computed directly within JAGS. However, we can calculate them manually form the posteriors.\n\u0026gt; library(ggplot2)\r\u0026gt; library(dplyr)\r\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;% dplyr:::select(beta0,\r+ contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;% dplyr:::select(beta0,\r+ contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = data %\u0026gt;% cbind(fit, resid)\r\u0026gt; newdata.melt = newdata %\u0026gt;% gather(key = Pred, value = Value, cx1:cx2)\r\u0026gt; ggplot(newdata.melt) + geom_point(aes(y = resid, x = Value)) + facet_wrap(~Pred)\rAnd now for studentised residuals\n\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;% dplyr:::select(beta0, + contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit))\rFor this simple model, the studentised residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix %\u0026gt;% as.data.frame %\u0026gt;%\r+ dplyr:::select(beta0, contains(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:4]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep),\r+ fill = \u0026quot;Model\u0026quot;), alpha = 0.5) + geom_density(data = data,\r+ aes(x = y, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5)\rWe can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(data.r2jags.mult$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(data.r2jags.mult$BUGSoutput$sims.matrix, regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.r2jags.add)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 2.830 0.442 1.964 2.538 2.830 3.125 3.694 1.001 7400\rbeta[2] 1.582 0.380 0.833 1.327 1.581 1.834 2.319 1.001 14000\rbeta0 3.799 0.100 3.603 3.733 3.797 3.865 3.997 1.001 15000\rsigma 0.996 0.074 0.864 0.944 0.992 1.043 1.154 1.001 15000\rdeviance 281.420 2.961 277.779 279.260 280.727 282.888 288.827 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 4.4 and DIC = 285.8\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags.add), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 2.83 0.442 1.96 3.69\r2 beta[2] 1.58 0.380 0.844 2.33\r3 beta0 3.80 0.1000 3.60 3.99\r4 deviance 281. 2.96 277. 287. 5 sigma 0.996 0.0742 0.857 1.14\rConclusions\n\rWhen cx2 is held constant, a one unit increase in cx1 is associated with a \\(2.83\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(2.83\\) per unit increase in cx1 when standardised for cx2.\n\rWhen cx1 is held constant, a one unit increase in cx2 is associated with a \\(1.58\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(1.58\\) per unit increase in cx2 when standardised for cx1.\n\r\rNote, as this is an additive model, the rates associated with cx1 are assumed to be constant throughtout the range of cx2 and vice versa. The \\(95\\)% confidence interval for each partial slope does not overlap with \\(0\\) implying a significant effects of cx1 and cx2 on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags.add$BUGSoutput$sims.matrix[, \u0026quot;beta[1]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags.add$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;])\r[1] 0.0001333333\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship. Next, we look at the results from the multiplicative model.\n\u0026gt; print(data.r2jags.mult)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 2.800 0.451 1.914 2.500 2.801 3.104 3.680 1.001 15000\rbeta[2] 1.504 0.389 0.744 1.237 1.505 1.766 2.267 1.001 15000\rbeta[3] 1.451 1.210 -0.933 0.643 1.456 2.238 3.849 1.001 15000\rbeta0 3.715 0.122 3.475 3.633 3.715 3.797 3.957 1.001 6000\rsigma 0.994 0.073 0.863 0.944 0.989 1.039 1.151 1.001 15000\rdeviance 280.964 3.307 276.617 278.541 280.281 282.649 289.157 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 5.5 and DIC = 286.4\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags.mult), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 6 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta[1] 2.80 0.451 1.91 3.67\r2 beta[2] 1.50 0.389 0.746 2.27\r3 beta[3] 1.45 1.21 -0.976 3.79\r4 beta0 3.71 0.122 3.47 3.95\r5 deviance 281. 3.31 276. 287. 6 sigma 0.994 0.0729 0.856 1.14\rConclusions\n\rAt the average level of cx2 (=0), a one unit increase in cx1 is associated with a \\(2.80\\) change in y. That is, y increases at a rate of \\(2.80\\) per unit increase in cx1 when standardised for cx2.\n\rAt the average level of cx1 (=0), a one unit increase in cx2 is associated with a \\(1.50\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(1.50\\) per unit increase in cx2 when standardised for cx1.\n\rThe degree to which the rate of change in response associated with a one unit change in cx1 changes over the range of cx2 (and vice versa) is \\(1.45\\).\n\r\rThe \\(95\\)% confidence intervals for the interaction partial slope does not overlap with \\(0\\) implying a significant interaction between cx1 and cx2. This suggests that the nature of the relationship between \\(y\\) and cx1 depends on the level of cx2 (and vice versa). The estimates of the effect of cx1 are only appropriate when cx2 = 0 etc. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags.mult$BUGSoutput$sims.matrix[, \u0026quot;beta[1]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(data.r2jags.mult$BUGSoutput$sims.matrix[, \u0026quot;beta[2]\u0026quot;])\r[1] 6.666667e-05\r\u0026gt; mcmcpvalue(data.r2jags.mult$BUGSoutput$sims.matrix[, \u0026quot;beta[3]\u0026quot;])\r[1] 0.2236\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group.\nWith appropriate use of model matrices and data wrangling, it is possible to produce a single prediction data set along with ggplot syntax to produce a multi-panel figure. First we look at the additive model.\n\u0026gt; mcmc = data.r2jags.add$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = rbind(data.frame(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = 0, Pred = 1), data.frame(cx1 = 0,\r+ cx2 = seq(min(data$cx2, na.rm = TRUE), max(data$cx2, na.rm = TRUE),\r+ len = 100), Pred = 2))\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)) %\u0026gt;%\r+ mutate(x = dplyr:::recode(Pred, x1, x2))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic() + facet_wrap(~Pred)\rWe cannot simply add the raw data to this figure. The reason for this is that the trends represent the effect of one predictor holding the other variable constant. Therefore, the observations we represent on the figure must likewise be standardised. We can achieve this by adding the partial residuals to the figure. Partial residuals are the fitted values plus the residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = rbind(data.frame(cx1 = data$cx1, cx2 = 0, Pred = 1), data.frame(cx1 = 0,\r+ cx2 = data$cx2, Pred = 2))\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2) %\u0026gt;% mutate(x = dplyr:::recode(Pred, x1,\r+ x2))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + theme_classic() +\r+ facet_wrap(~Pred, strip.position = \u0026quot;bottom\u0026quot;, labeller = label_bquote(\u0026quot;x\u0026quot; *\r+ .(Pred))) + theme(axis.title.x = element_blank(), strip.background = element_blank(),\r+ strip.placement = \u0026quot;outside\u0026quot;)\rHowever, this method (whist partially elegant) does become overly opaque if we need more extensive axes labels since the x-axes labels are actually strip labels (which must largely be defined outside of the ggplot structure). The alternative is to simply produce each partial plot separately before arranging them together in the one figure using the package gridExtra.\n\u0026gt; library(gridExtra)\r\u0026gt; mcmc = data.r2jags.add$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = 0)\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ## Now the partial residuals\r\u0026gt; fdata = rdata = data.frame(cx1 = data$cx1, cx2 = 0)\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; g1 = ggplot(newdata, aes(y = estimate, x = x1)) + geom_point(data = rdata,\r+ aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X1\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; newdata = data.frame(cx2 = seq(min(data$cx2, na.rm = TRUE), max(data$cx2,\r+ na.rm = TRUE), len = 100), cx1 = 0)\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ## Now the partial residuals\r\u0026gt; fdata = rdata = data.frame(cx1 = 0, cx2 = data$cx2)\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; g2 = ggplot(newdata, aes(y = estimate, x = x2)) + geom_point(data = rdata,\r+ aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X2\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; grid.arrange(g1, g2, ncol = 2)\rFor the multiplicative model, we could elect to split the trends up so as to explore the effects of one predictor at several set levels of another predictor. In this example, we will explore the effects of \\(x_1\\) when \\(x_2\\) is equal to its mean in the original data as well as one and two standard deviations below and above this mean.\n\u0026gt; library(fields)\r\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = mean(data$cx2) + sd(data$cx2) %*%\r+ -2:2)\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)) %\u0026gt;%\r+ mutate(x2 = factor(x2, labels = paste(\u0026quot;X2:~\u0026quot;, c(-2, -1, 0, 1, 2), \u0026quot;*sigma\u0026quot;)))\r\u0026gt; ## Partial residuals\r\u0026gt; fdata = rdata = expand.grid(cx1 = data$cx1, cx2 = mean(data$cx2) + sd(data$cx2) *\r+ -2:2)\r\u0026gt; fMat = rMat = model.matrix(~cx1 * cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; ## Partition the partial residuals such that each x1 trend only includes\r\u0026gt; ## x2 data that is within that range in the observed data\r\u0026gt; findNearest = function(x, y) {\r+ ff = fields:::rdist(x, y)\r+ apply(ff, 1, function(x) which(x == min(x)))\r+ }\r\u0026gt; fn = findNearest(x = data[, c(\u0026quot;x1\u0026quot;, \u0026quot;x2\u0026quot;)], y = rdata[, c(\u0026quot;x1\u0026quot;, \u0026quot;x2\u0026quot;)])\r\u0026gt; rdata = rdata[fn, ] %\u0026gt;% mutate(x2 = factor(x2, labels = paste(\u0026quot;X2:~\u0026quot;, c(-2,\r+ -1, 0, 1, 2), \u0026quot;*sigma\u0026quot;)))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x1)) + geom_line() + geom_blank(aes(y = 9)) +\r+ geom_point(data = rdata, aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) +\r+ geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \u0026quot;blue\u0026quot;,\r+ alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X1\u0026quot;) +\r+ facet_wrap(~x2, labeller = label_parsed, nrow = 1, scales = \u0026quot;free_y\u0026quot;) +\r+ theme_classic() + theme(strip.background = element_blank())\rAlternatively, we could explore the interaction by plotting a two dimensional surface as a heat map.\n\rEffect sizes\rIn addition to deriving the distribution means for the slope parameter, we could make use of the Bayesian framework to derive the distribution of the effect size. In so doing, effect size could be considered as either the rate of change or alternatively, the difference between pairs of values along the predictor gradient. For the latter case, there are multiple ways of calculating an effect size, but the two most common are:\n\rRaw effect size. The difference between two groups (as already calculated)\n\rCohen’s D. The effect size standardized by division with the pooled standard deviation: \\(D=\\frac{(\\mu_A-\\mu_B)}{\\sigma}\\)\n\rPercentage change. Express the effect size as a percent of one of the pairs. That is, whether you expressing a percentage increase or a percentage decline depends on which of the pairs of values are considered a reference value. Care must be exercised to ensure no division by zeros occur.\n\r\rFor simple linear models, effect size based on a rate is essentially the same as above except that it is expressed per unit of the predictor. Of course in many instances, one unit change in the predictor represents too subtle a shift in the underlying gradient to likely yield any clinically meaningful or appreciable change in response.\nProbability that a change in \\(x_1\\) is associated with greater than a \\(50\\)% increase in \\(y\\) at various levels of \\(x_2\\). Clearly, in order to explore this inference, we must first express the change in \\(y\\) as a percentage. This in turn requires us to calculate start and end points from which to calculate the magnitude of the effect (amount of increase in \\(y\\)) as well as the percentage decline. Hence, we start by predicting the distribution of \\(y\\) at the lowest and highest values of \\(x_1\\) at five levels of \\(x_2\\) (representing two standard deviations below the cx2 mean, one standard deviation below the cx2 mean, the cx2 mean, one standard deviation above the cx2 mean and \\(2\\) standard deviations above the cx2 mean. For this exercise we will only use the multiplicative model. Needless to say, the process would be very similar for the additive model.\n\u0026gt; mcmc = data.r2jags.mult$BUGSoutput$sims.matrix\r\u0026gt; newdata = expand.grid(cx1 = c(min(data$cx1), max(data$cx1)), cx2 = (-2:2) *\r+ sd(data$cx2))\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; s1 = seq(1, 9, b = 2)\r\u0026gt; s2 = seq(2, 10, b = 2)\r\u0026gt; ## Raw effect size\r\u0026gt; (RES = tidyMCMC(as.mcmc(fit[, s2] - fit[, s1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 1.82 0.938 -0.0378 3.64\r2 4 2.30 0.616 1.13 3.54\r3 6 2.78 0.448 1.90 3.65\r4 8 3.26 0.586 2.12 4.42\r5 10 3.74 0.899 2.02 5.55\r\u0026gt; ## Cohen\u0026#39;s D\r\u0026gt; cohenD = (fit[, s2] - fit[, s1])/sqrt(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; (cohenDES = tidyMCMC(as.mcmc(cohenD), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 1.83 0.940 0.0489 3.74\r2 4 2.31 0.622 1.11 3.57\r3 6 2.80 0.461 1.89 3.68\r4 8 3.28 0.599 2.10 4.45\r5 10 3.76 0.910 1.98 5.54\r\u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ESp = 100 * (fit[, s2] - fit[, s1])/fit[, s1]\r\u0026gt; (PES = tidyMCMC(as.mcmc(ESp), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 124. 142. -19.5 318.\r2 4 117. 45.2 33.1 205.\r3 6 123. 32.9 62.1 187.\r4 8 135. 50.0 48.0 230.\r5 10 150. 89.1 29.4 308.\r\u0026gt; # Probability that the effect is greater than 50% (an increase of \u0026gt;50%)\r\u0026gt; (p50 = apply(ESp, 2, function(x) sum(x \u0026gt; 50)/length(x)))\r2 4 6 8 10 0.7996667 0.9576667 0.9978667 0.9925333 0.9723333 \u0026gt; ## fractional change\r\u0026gt; (FES = tidyMCMC(as.mcmc(fit[, s2]/fit[, s1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 2.24 1.42 0.805 4.18\r2 4 2.17 0.452 1.33 3.05\r3 6 2.23 0.329 1.62 2.87\r4 8 2.35 0.500 1.48 3.30\r5 10 2.50 0.891 1.29 4.08\rConclusions\n\rOn average, when \\(x_2\\) is equal to its mean, \\(Y\\) increases by \\(2.79\\) over the observed range of \\(x_1\\). We are \\(95\\)% confident that the increase is between \\(1.91\\) and \\(3.66\\).\n\rThe Cohen’s D associated change over the observed range of \\(x_1\\) is \\(2.80\\).\n\rOn average, \\(Y\\) increases by \\(124\\)% over the observed range of \\(x_1\\) (at average \\(x_2\\)). We are \\(95\\)% confident that the increase is between \\(65\\)% and \\(190\\)%.\n\rThe probability that \\(Y\\) increases by more than \\(50\\)% over the observed range of \\(x_1\\) (average \\(x_2\\)) is \\(0.998\\).\n\rOn average, \\(Y\\) increases by a factor of \\(2.24\\)% over the observed range of \\(x_1\\) (average \\(x_2\\)). We are \\(95\\)% confident that the decline is between a factor of \\(1.65\\)% and \\(2.90\\)%.\n\r\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x1 0.798 0.129 0.544 1.05 2 sd.x2 0.501 0.130 0.249 0.756\r3 sd.x1x2 0.136 0.0877 0.00000784 0.296\r4 sd.resid 0.981 0.0128 0.965 1.01 # A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x1 33.1 4.97 23.4 42.7\r2 sd.x2 20.8 5.14 10.4 30.3\r3 sd.x1x2 5.27 3.46 0.000322 11.7\r4 sd.resid 40.5 2.15 36.7 44.9\rApproximately \\(59\\)% of the total finite population standard deviation is due to \\(x_1\\), \\(x_2\\) and their interaction.\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- data.r2jags.mult$BUGSoutput$sims.matrix\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, data)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.605 0.0400 0.526 0.676\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ cx1 * cx2, data))\rCall:\rlm(formula = y ~ cx1 * cx2, data = data)\rResiduals:\rMin 1Q Median 3Q Max -1.8173 -0.7167 -0.1092 0.5890 3.3861 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 3.7152 0.1199 30.987 \u0026lt; 2e-16 ***\rcx1 2.8072 0.4390 6.394 5.84e-09 ***\rcx2 1.4988 0.3810 3.934 0.000158 ***\rcx1:cx2 1.4464 1.1934 1.212 0.228476 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 0.9804 on 96 degrees of freedom\rMultiple R-squared: 0.6115, Adjusted R-squared: 0.5994 F-statistic: 50.37 on 3 and 96 DF, p-value: \u0026lt; 2.2e-16\r\rBayesian model selection\rA statistical model is by definition a low-dimensional (over simplification) representation of what is really likely to be a very complex system. As a result, no model is right. Some models however can provide useful insights into some of the processes operating on the system. Frequentist statistics have various methods (model selection, dredging, lasso, cross validation) for selecting parsimonious models. These are models that provide a good comprimise between minimizing unexplained patterns and minimizing model complexity. The basic premise is that since no model can hope to capture the full complexity of a system with all its subtleties, only the very major patterns can be estimated. Overly complex models are likely to be representing artificial complexity present only in the specific observed data (not the general population). The Bayesian approach is to apply priors to the non-variance parameters such that parameters close to zero are further shrunk towards zero whilst priors on parameters further away from zero are less effected. The most popular form of prior for sparsity is the horseshoe prior, so called because the shape of a component of this prior resembles a horseshoe (with most of the mass either close to \\(0\\) or close to \\(1\\)).\nRather than apply weakly informative Gaussian priors on parameters as:\n\\[ \\beta_j \\sim N(0,\\sigma^2),\\]\nthe horseshoe prior is defined as\n\\[ \\beta_j \\sim N(0,\\tau^2\\lambda_j^2),\\]\nwhere \\(\\tau \\sim \\text{Cauchy}(0,1)\\) and \\(\\lambda_j \\sim \\text{Cauchy}(0,1)\\), for \\(j=1,\\ldots,D\\). Using this prior, \\(D\\) is the number of (non-intercept or variance) parameters, \\(\\tau\\) represents the global scale that weights or shrinks all parameters towards zero and \\(\\lambda_j\\) are thick tailed local scales that allow some of the \\(j\\) parameters to escape shrinkage. More recently, Piironen, Vehtari, and others (2017) have argued that whilst the above horseshoe priors do guarantee that strong effects (parameters) will not be over-shrunk, there is the potential for weekly identified effects (those based on relatively little data) to be misrepresented in the posteriors. As an alternative they advocated the use of regularised horseshoe priors in which the amount of shrinkage applied to the largest effects can be controlled. The prior is defined as:\n\\[ \\beta_j \\sim N(0,\\tau^2 \\tilde{\\lambda}_j^2),\\]\nwhere \\(\\tilde{\\lambda}_j^2 = \\frac{c^2\\lambda^2_j}{c^2+\\tau^2 \\lambda^2_j}\\) and \\(c\\) is (slab width, actually variance) is a constant. For small effects (when \\(\\tau^2 \\lambda^2_j \u0026lt; c^2\\)) the prior approaches a regular prior. However, for large effects (when \\(\\tau^2 \\lambda^2_j \u0026gt; c^2\\)) the prior approaches \\(N(0,c^2)\\). Finally, they recommend applying a inverse-gamma prior on \\(c^2\\):\n\\[ c^2 \\sim \\text{Inv-Gamma}(\\alpha,\\beta),\\]\nwhere \\(\\alpha=v/2\\) and \\(\\beta=vs^2/2\\), which translates to a \\(\\text{Student-t}_ν(0, s^2)\\) slab for the coefficients far from zero and is typically a good default choice for a weakly informative prior.\n\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPiironen, Juho, Aki Vehtari, and others. 2017. “Sparsity Information and Regularization in the Horseshoe and Other Shrinkage Priors.” Electronic Journal of Statistics 11 (2): 5018–51.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1580782394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580782394,"objectID":"dba2bbc8ce72062999fccab6926289d0","permalink":"/jags/multiple-linear-regression-jags/multiple-linear-regression-jags/","publishdate":"2020-02-03T21:13:14-05:00","relpermalink":"/jags/multiple-linear-regression-jags/multiple-linear-regression-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","linear regression"],"title":"Multiple Linear Regression - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","linear regression","STAN"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rMultiple regression is an extension of simple linear regression whereby a response variable is modelled against a linear combination of two or more simultaneously measured predictor variables. There are two main purposes of multiple linear regression:\nTo develop a better predictive model (equation) than is possible from models based on single independent variables.\n\rTo investigate the relative individual effects of each of the multiple independent variables above and beyond (standardised across) the effects of the other variables.\n\r\rAlthough the relationship between response variable and the additive effect of all the predictor variables is represented overall by a single multidimensional plane (surface), the individual effects of each of the predictor variables on the response variable (standardised across the other variables) can be depicted by single partial regression lines. The slope of any single partial regression line (partial regression slope) thereby represents the rate of change or effect of that specific predictor variable (holding all the other predictor variables constant to their respective mean values) on the response variable. In essence, it is the effect of one predictor variable at one specific level (the means) of all the other predictor variables (i.e. when each of the other predictors are set to their averages).\nMultiple regression models can be constructed additively (containing only the predictor variables themselves) or in a multiplicative design (which incorporate interactions between predictor variables in addition to the predictor variables themselves). Multiplicative models are used primarily for testing inferences about the effects of various predictor variables and their interactions on the response variable. Additive models by contrast are used for generating predictive models and estimating the relative importance of individual predictor variables more so than hypothesis testing.\n\rAdditive Model\r\\[ y_i = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\ldots + \\beta_Jx_{iJ} + \\epsilon_i,\\]\nwhere \\(\\beta_0\\) is the population \\(y\\)-intercept (value of \\(y\\) when all partial slopes equal zero), \\(\\beta_1,\\beta_2,\\ldots,\\beta_{J}\\) are the partial population slopes of \\(Y\\) on \\(X_1,X_2,\\ldots,X_J\\) respectively holding the other \\(X\\) constant. \\(\\epsilon_i\\) is the random unexplained error or residual component. The additive model assumes that the effect of one predictor variable (partial slope) is independent of the levels of the other predictor variables.\n\rMultiplicative Model\r\\[ y_i = \\beta_0 + \\beta_1x_{i1} + \\beta_2x_{i2} + \\beta_3x_{i1}x_{i2} + \\ldots + \\beta_Jx_{iJ} + \\epsilon_i,\\]\nwhere \\(\\beta_3x_{i1}x_{i2}\\) is the interactive effect of \\(X_1\\) and \\(X_2\\) on \\(Y\\) and it examines the degree to which the effect of one of the predictor variables depends on the levels of the other predictor variable(s).\n\rData generation\rLets say we had set up a natural experiment in which we measured a response (\\(y\\)) from each of \\(20\\) sampling units (\\(n=20\\)) across a landscape. At the same time, we also measured two other continuous covariates (\\(x_1\\) and \\(x_2\\)) from each of the sampling units. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; n = 100\r\u0026gt; intercept = 5\r\u0026gt; temp = runif(n)\r\u0026gt; nitro = runif(n) + 0.8 * temp\r\u0026gt; int.eff = 2\r\u0026gt; temp.eff \u0026lt;- 0.85\r\u0026gt; nitro.eff \u0026lt;- 0.5\r\u0026gt; res = rnorm(n, 0, 1)\r\u0026gt; coef \u0026lt;- c(int.eff, temp.eff, nitro.eff, int.eff)\r\u0026gt; mm \u0026lt;- model.matrix(~temp * nitro)\r\u0026gt; \u0026gt; y \u0026lt;- t(coef %*% t(mm)) + res\r\u0026gt; data \u0026lt;- data.frame(y, x1 = temp, x2 = nitro, cx1 = scale(temp,\r+ scale = F), cx2 = scale(nitro, scale = F))\r\u0026gt; head(data)\ry x1 x2 cx1 cx2\r1 2.426468 0.2875775 0.8300510 -0.21098147 -0.08302110\r2 4.927690 0.7883051 0.9634676 0.28974614 0.05039557\r3 3.176118 0.4089769 0.8157946 -0.08958207 -0.09727750\r4 6.166652 0.8830174 1.6608878 0.38445841 0.74781568\r5 4.788890 0.9404673 1.2352762 0.44190829 0.32220415\r6 2.541536 0.0455565 0.9267954 -0.45300249 0.01372335\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the components linear predictor (continuous predictors). We could model the relationship via either:\n\rAn additive model in which the effects of each predictor contribute in an additive way to the response - we do not allow for an interaction as we consider an interaction either not of great importance or likely to be absent.\n\rA multiplicative model in which the effects of each predictor and their interaction contribute to the response - we allow for the impact of one predictor to vary across the range of the other predictor.\n\r\r\rCentering the data\rWhen a linear model contains a covariate (continuous predictor variable) in addition to another predictor (continuous or categorical), it is nearly always advisable that the continuous predictor variables are centered prior to the analysis. Centering is a process by which the mean of a variable is subtracted from each of the values such that the scale of the variable is shifted so as to be centered around \\(0\\). Hence the mean of the new centered variable will be \\(0\\), yet it will retain the same variance.\nThere are multiple reasons for this:\nIt provides some clinical meaning to the \\(y\\)-intercept. Recall that the \\(y\\)-intercept is the value of \\(Y\\) when \\(X\\) is equal to zero. If \\(X\\) is centered, then the \\(y\\)-intercept represents the value of \\(Y\\) at the mid-point of the \\(X\\) range. The \\(y\\)-intercept of an uncentered \\(X\\) typically represents a unreal value of \\(Y\\) (as an \\(X\\) of \\(0\\) is often beyond the reasonable range of values).\n\rIn multiplicative models (in which predictors and their interactions are included), main effects and interaction terms built from centered predictors will not be correlated to one another.\n\rFor more complex models, centering the covariates can increase the likelihood that the modelling engine converges (arrives at a numerically stable and reliable outcome).\n\r\rNote, centering will not effect the slope estimates. In R, centering is easily achieved with the scale function, which centers and scales (divides by standard deviation) the data. We only really need to center the data, so we provide the argument scale=FALSE. Also note that the scale function attaches the pre-centered mean (and standard deviation if scaling is performed) as attributes to the scaled data in order to facilitate back-scaling to the original scale. While these attributes are often convenient, they do cause issues for some of the Bayesian routines and so we will strip these attributes using the as.numeric function. Instead, we will create separate scalar variables to store the pre-scaled means.\n\u0026gt; data \u0026lt;- within(data, {\r+ cx1 \u0026lt;- as.numeric(scale(x1, scale = FALSE))\r+ cx2 \u0026lt;- as.numeric(scale(x2, scale = FALSE))\r+ })\r\u0026gt; head(data)\ry x1 x2 cx1 cx2\r1 2.426468 0.2875775 0.8300510 -0.21098147 -0.08302110\r2 4.927690 0.7883051 0.9634676 0.28974614 0.05039557\r3 3.176118 0.4089769 0.8157946 -0.08958207 -0.09727750\r4 6.166652 0.8830174 1.6608878 0.38445841 0.74781568\r5 4.788890 0.9404673 1.2352762 0.44190829 0.32220415\r6 2.541536 0.0455565 0.9267954 -0.45300249 0.01372335\r\u0026gt; \u0026gt; mean.x1 = mean(data$x1)\r\u0026gt; mean.x2 = mean(data$x2)\r\r\rAssumptions\rThe assumptions of the model are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages.\n\rThe response variable (and thus the residuals) should be normally distributed. A boxplot of the entire variable is usually useful for diagnosing major issues with normality.\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately). Scatterplots with linear smoothers can be useful for exploring the spread of observations around the trendline. The spread of observations around the trendline should not increase (or decrease) along its length.\n\rThe predictor variables should be uniformly or normally distributed. Again, boxplots can be useful.\n\rThe relationships between the linear predictors (right hand side of the regression formula) and the response variable should be linear. Scatterplots with smoothers can be useful for identifying possible non-linearity.\n\r(Multi)collinearity. The number of predictor variables must be less than the number of observations otherwise the linear model will be over-parameterized (more parameters to estimate than there are independent data from which estimates are calculated).\n\r\r(Multi)collinearity breaks the assumption that a predictor variable must not be correlated to the combination of other predictor variables (known collectively as the linear predictor). Multicollinearity has major detrimental effects on model fitting:\n\rInstability of the estimated partial regression slopes (small changes in the data or variable inclusion can cause dramatic changes in parameter estimates).\n\rInflated standard errors and confidence intervals of model parameters, thereby increasing the type II error rate (reducing power) of parameter hypothesis tests.\n\r\rMulticollinearity can be diagnosed with the following situatons:\n\rInvestigate pairwise correlations between all the predictor variables either by a correlation matrix or a scatterplot matrix\n\rCalculate the tolerance \\((1−r^2)\\) of the relationship between a predictor variable and all the other predictor variables for each of the predictor variables. Tolerance is a measure of the degree of collinearity and values less than \\(0.2\\) should be considered and values less than \\(0.1\\) should be given serious attention. Variance inflation factor (VIF) is the inverse of tolerance and thus values greater than \\(5\\), or worse, \\(10\\) indicate collinearity.\n\rPCA (principle components analysis) eigenvalues (from a correlation matrix for all the predictor variables) close to zero indicate collinearity and component loadings may be useful in determining which predictor variables cause collinearity.\n\r\rThere are several approaches to dealing with collinearity (however the first two of these are likely to result in biased parameter estimates):\nRemove the highly correlated predictor variable(s), starting with the least most clinically interesting variable(s)\n\rPCA (principle components analysis) regression - regress the response variable against the principal components resulting from a correlation matrix for all the predictor variables. Each of these principal components by definition are completely independent, but the resulting parameter estimates must be back-calculated in order to have any clinical meaning.\n\rApply a regression tree - regression trees recursively partitioning (subsetting) the data in accordance to individual variables that explain the greatest remaining variance. Since at each iteration, each predictor variable is effectively evaluated in isolation, (multi)collinearity is not an issue.\n\r\r\rModel fitting\rMultiple linear regression models can include predictors (terms) that are incorporated additively (no interactions) or multiplicatively (with interactions). As such we will explore these separately for each modelling tool. The observed responses (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values are themselves determined by the linear predictor. In this case, \\(\\beta_0\\) represents the \\(y\\)-intercept (value of \\(y\\) when all of the \\(x\\)’s are equal to zero) and the set of \\(\\beta\\)’s represent the rates of change in y for every unit change in each \\(x\\) (the effect) holding each other \\(x\\) constant. Note that since we should always center all predictors (by subtracting the mean of each \\(x\\) from the repective values of each \\(x\\)), the \\(y\\)-intercept represents the value of \\(y\\) at the average value of each \\(x\\).\nMCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying “uninformative” priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(100\\)) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=5\\)) for the standard deviation:\n\\[ y_i \\sim \\text{Normal}(\\mu_i, \\sigma),\\]\nwhere \\(\\mu_i=\\beta_0 + \\boldsymbol \\beta \\boldsymbol X_i\\). Priors are specified as: \\(\\boldsymbol \\beta \\sim \\text{Normal}(0,1000)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,5)\\). We will explore Bayesian modelling of multiple linear regression using STAN. The minimum model in STAN required to fit the above simple regression follows. Note the following modifications from the model defined in JAGS:\n\rThe normal distribution is defined by standard deviation rather than precision\n\rRather than using a uniform prior for \\(\\sigma\\), I am using a half-Cauchy\n\r\rAdditive model\rWe now translate the likelihood for the additive model into STAN code.\n\u0026gt; modelString = \u0026quot;\r+ data { + int\u0026lt;lower=1\u0026gt; n; // total number of observations + vector[n] Y; // response variable + int\u0026lt;lower=1\u0026gt; nX; // number of effects + matrix[n, nX] X; // model matrix + } + transformed data { + matrix[n, nX - 1] Xc; // centered version of X + vector[nX - 1] means_X; // column means of X before centering + + for (i in 2:nX) { + means_X[i - 1] = mean(X[, i]); + Xc[, i - 1] = X[, i] - means_X[i - 1]; + } + } + parameters { + vector[nX-1] beta; // population-level effects + real cbeta0; // center-scale intercept + real\u0026lt;lower=0\u0026gt; sigma; // residual SD + } + transformed parameters { + } + model { + vector[n] mu; + mu = Xc * beta + cbeta0; + // prior specifications + beta ~ normal(0, 100); + cbeta0 ~ normal(0, 100); + sigma ~ cauchy(0, 5); + // likelihood contribution + Y ~ normal(mu, sigma); + } + generated quantities {\r+ real beta0; // population-level intercept + vector[n] log_lik;\r+ beta0 = cbeta0 - dot_product(means_X, beta);\r+ for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(Y[i] | Xc[i] * beta + cbeta0, sigma);\r+ } + }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;linregModeladd.stan\u0026quot;)\r\u0026gt; writeLines(modelString, con = \u0026quot;linregModelmult.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X = model.matrix(~cx1 + cx2, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(Y = y, X = X, nX = ncol(X), n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;, \u0026quot;cbeta0\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 1000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 3000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 2500\rNow compile and run the Stan code via the rstan interface. Note that the first time stan is run after the rstan package is loaded, it is often necessary to run any kind of randomization function just to initiate the .Random.seed variable.\n\u0026gt; library(rstan)\rDuring the warmup stage, the No-U-Turn sampler (NUTS) attempts to determine the optimum stepsize - the stepsize that achieves the target acceptance rate (\\(0.8\\) or \\(80\\)% by default) without divergence (occurs when the stepsize is too large relative to the curvature of the log posterior and results in approximations that are likely to diverge and be biased) - and without hitting the maximum treedepth (\\(10\\)). At each iteration of the NUTS algorithm, the number of leapfrog steps doubles (as it increases the treedepth) and only terminates when either the NUTS criterion are satisfied or the tree depth reaches the maximum (\\(10\\) by default).\n\u0026gt; data.rstan.add \u0026lt;- stan(data = data.list, file = \u0026quot;linregModeladd.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps, save_dso = TRUE)\rSAMPLING FOR MODEL \u0026#39;linregModeladd\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 1: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 1: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 1: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 1: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 1: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 1: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 1: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 1: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 1: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 1: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 1: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.069 seconds (Warm-up)\rChain 1: 0.095 seconds (Sampling)\rChain 1: 0.164 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;linregModeladd\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 2: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 2: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 2: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 2: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 2: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 2: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 2: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 2: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 2: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 2: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 2: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.068 seconds (Warm-up)\rChain 2: 0.094 seconds (Sampling)\rChain 2: 0.162 seconds (Total)\rChain 2: \u0026gt; \u0026gt; data.rstan.add\rInference for Stan model: linregModeladd.\r2 chains, each with iter=2500; warmup=1000; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 2.83 0.01 0.45 1.95 2.52 2.82 3.13 3.72 2562 1\rbeta[2] 1.58 0.01 0.38 0.84 1.33 1.58 1.85 2.32 2623 1\rbeta0 3.80 0.00 0.10 3.60 3.73 3.80 3.87 4.00 2672 1\rcbeta0 3.80 0.00 0.10 3.60 3.73 3.80 3.87 4.00 2672 1\rsigma 0.99 0.00 0.07 0.86 0.94 0.99 1.04 1.15 3017 1\rlog_lik[1] -1.13 0.00 0.09 -1.33 -1.19 -1.13 -1.07 -0.96 2825 1\rlog_lik[2] -0.95 0.00 0.08 -1.11 -1.00 -0.95 -0.89 -0.80 2813 1\rlog_lik[3] -0.94 0.00 0.07 -1.09 -0.99 -0.94 -0.89 -0.80 2983 1\rlog_lik[4] -0.94 0.00 0.09 -1.13 -1.00 -0.94 -0.88 -0.78 2666 1\rlog_lik[5] -1.23 0.00 0.15 -1.56 -1.32 -1.22 -1.13 -0.98 3319 1\rlog_lik[6] -0.94 0.00 0.08 -1.11 -0.99 -0.93 -0.88 -0.78 2591 1\rlog_lik[7] -1.26 0.00 0.15 -1.60 -1.36 -1.25 -1.15 -1.00 2637 1\rlog_lik[8] -2.00 0.00 0.28 -2.59 -2.18 -1.99 -1.81 -1.54 3642 1\rlog_lik[9] -1.00 0.00 0.08 -1.16 -1.05 -0.99 -0.94 -0.86 2885 1\rlog_lik[10] -1.43 0.00 0.17 -1.81 -1.53 -1.41 -1.30 -1.13 2549 1\rlog_lik[11] -0.94 0.00 0.09 -1.12 -0.99 -0.94 -0.88 -0.78 2568 1\rlog_lik[12] -1.14 0.00 0.10 -1.35 -1.20 -1.13 -1.07 -0.97 2419 1\rlog_lik[13] -2.48 0.01 0.39 -3.32 -2.73 -2.44 -2.21 -1.82 2526 1\rlog_lik[14] -0.93 0.00 0.08 -1.10 -0.98 -0.93 -0.88 -0.78 2702 1\rlog_lik[15] -1.16 0.00 0.14 -1.46 -1.24 -1.14 -1.06 -0.93 2584 1\rlog_lik[16] -0.95 0.00 0.09 -1.14 -1.01 -0.95 -0.89 -0.79 2460 1\rlog_lik[17] -0.95 0.00 0.08 -1.11 -1.00 -0.94 -0.89 -0.80 2913 1\rlog_lik[18] -1.16 0.00 0.17 -1.55 -1.26 -1.14 -1.04 -0.89 2488 1\rlog_lik[19] -1.25 0.00 0.10 -1.46 -1.32 -1.25 -1.18 -1.06 2670 1\rlog_lik[20] -1.34 0.00 0.17 -1.73 -1.44 -1.32 -1.21 -1.04 3156 1\rlog_lik[21] -0.99 0.00 0.10 -1.20 -1.05 -0.99 -0.93 -0.82 3217 1\rlog_lik[22] -1.43 0.00 0.14 -1.74 -1.52 -1.42 -1.33 -1.18 2520 1\rlog_lik[23] -1.07 0.00 0.09 -1.26 -1.13 -1.06 -1.01 -0.90 2655 1\rlog_lik[24] -0.97 0.00 0.10 -1.18 -1.02 -0.96 -0.90 -0.80 2490 1\rlog_lik[25] -2.60 0.01 0.29 -3.21 -2.78 -2.59 -2.40 -2.08 2818 1\rlog_lik[26] -1.05 0.00 0.12 -1.33 -1.12 -1.04 -0.96 -0.85 2885 1\rlog_lik[27] -0.95 0.00 0.08 -1.12 -1.00 -0.95 -0.89 -0.80 2646 1\rlog_lik[28] -0.93 0.00 0.08 -1.09 -0.98 -0.93 -0.87 -0.78 2601 1\rlog_lik[29] -1.15 0.00 0.14 -1.46 -1.24 -1.14 -1.05 -0.92 3221 1\rlog_lik[30] -0.93 0.00 0.08 -1.09 -0.97 -0.92 -0.87 -0.78 2844 1\rlog_lik[31] -2.54 0.01 0.39 -3.37 -2.78 -2.52 -2.27 -1.86 3492 1\rlog_lik[32] -1.34 0.00 0.21 -1.82 -1.47 -1.32 -1.19 -1.00 3489 1\rlog_lik[33] -0.92 0.00 0.08 -1.08 -0.97 -0.92 -0.87 -0.78 2945 1\rlog_lik[34] -0.95 0.00 0.08 -1.13 -1.01 -0.95 -0.90 -0.81 2937 1\rlog_lik[35] -2.25 0.01 0.34 -2.96 -2.48 -2.23 -2.01 -1.66 3180 1\rlog_lik[36] -1.55 0.00 0.13 -1.83 -1.64 -1.54 -1.46 -1.32 2570 1\rlog_lik[37] -1.78 0.00 0.25 -2.32 -1.93 -1.76 -1.60 -1.35 3392 1\rlog_lik[38] -1.21 0.00 0.14 -1.50 -1.30 -1.20 -1.11 -0.98 2419 1\rlog_lik[39] -2.57 0.01 0.42 -3.49 -2.83 -2.54 -2.28 -1.86 2458 1\rlog_lik[40] -1.70 0.00 0.18 -2.08 -1.82 -1.69 -1.58 -1.37 3038 1\rlog_lik[41] -1.59 0.00 0.21 -2.06 -1.73 -1.57 -1.44 -1.23 3270 1\rlog_lik[42] -0.94 0.00 0.08 -1.09 -0.99 -0.94 -0.89 -0.80 2984 1\rlog_lik[43] -1.97 0.01 0.32 -2.67 -2.18 -1.94 -1.74 -1.42 2786 1\rlog_lik[44] -1.86 0.00 0.24 -2.37 -2.02 -1.85 -1.70 -1.45 2785 1\rlog_lik[45] -2.24 0.01 0.35 -2.98 -2.47 -2.22 -1.99 -1.65 2523 1\rlog_lik[46] -0.93 0.00 0.08 -1.10 -0.98 -0.93 -0.88 -0.78 2849 1\rlog_lik[47] -1.58 0.00 0.20 -2.01 -1.71 -1.56 -1.43 -1.22 3202 1\rlog_lik[48] -1.22 0.00 0.15 -1.56 -1.31 -1.21 -1.11 -0.97 2573 1\rlog_lik[49] -3.84 0.01 0.54 -5.01 -4.18 -3.82 -3.46 -2.87 3218 1\rlog_lik[50] -1.47 0.00 0.20 -1.90 -1.59 -1.45 -1.34 -1.14 3648 1\rlog_lik[51] -1.33 0.00 0.20 -1.78 -1.46 -1.31 -1.18 -1.01 2469 1\rlog_lik[52] -1.23 0.00 0.09 -1.42 -1.29 -1.23 -1.17 -1.07 2508 1\rlog_lik[53] -0.98 0.00 0.08 -1.15 -1.03 -0.98 -0.92 -0.82 2892 1\rlog_lik[54] -1.05 0.00 0.12 -1.31 -1.12 -1.03 -0.97 -0.85 3408 1\rlog_lik[55] -0.94 0.00 0.08 -1.11 -0.99 -0.93 -0.88 -0.79 2682 1\rlog_lik[56] -0.92 0.00 0.08 -1.08 -0.97 -0.92 -0.87 -0.78 2941 1\rlog_lik[57] -1.26 0.00 0.14 -1.57 -1.35 -1.25 -1.16 -1.03 2851 1\rlog_lik[58] -1.03 0.00 0.10 -1.25 -1.09 -1.02 -0.96 -0.85 2528 1\rlog_lik[59] -1.53 0.00 0.19 -1.94 -1.64 -1.51 -1.40 -1.20 3250 1\rlog_lik[60] -0.95 0.00 0.08 -1.12 -1.00 -0.95 -0.89 -0.80 2944 1\rlog_lik[61] -1.48 0.00 0.12 -1.75 -1.56 -1.48 -1.40 -1.26 2941 1\rlog_lik[62] -1.09 0.00 0.12 -1.36 -1.16 -1.08 -1.01 -0.89 3504 1\rlog_lik[63] -1.74 0.00 0.16 -2.08 -1.85 -1.73 -1.62 -1.45 2551 1\rlog_lik[64] -7.01 0.02 0.96 -9.02 -7.60 -6.96 -6.33 -5.26 3101 1\rlog_lik[65] -1.01 0.00 0.09 -1.22 -1.07 -1.01 -0.95 -0.85 2752 1\rlog_lik[66] -0.96 0.00 0.08 -1.11 -1.01 -0.96 -0.91 -0.82 2946 1\rlog_lik[67] -1.29 0.00 0.15 -1.62 -1.38 -1.27 -1.18 -1.03 3487 1\rlog_lik[68] -1.09 0.00 0.12 -1.35 -1.16 -1.08 -1.01 -0.89 2517 1\rlog_lik[69] -1.07 0.00 0.10 -1.27 -1.13 -1.06 -1.00 -0.89 2958 1\rlog_lik[70] -1.02 0.00 0.09 -1.20 -1.07 -1.01 -0.96 -0.85 2673 1\rlog_lik[71] -0.93 0.00 0.08 -1.08 -0.98 -0.93 -0.88 -0.79 2896 1\rlog_lik[72] -0.92 0.00 0.08 -1.08 -0.97 -0.92 -0.87 -0.78 2738 1\rlog_lik[73] -0.93 0.00 0.08 -1.10 -0.98 -0.93 -0.88 -0.78 2813 1\rlog_lik[74] -3.84 0.01 0.63 -5.17 -4.23 -3.80 -3.39 -2.75 2911 1\rlog_lik[75] -1.22 0.00 0.10 -1.41 -1.28 -1.21 -1.15 -1.04 2633 1\rlog_lik[76] -1.42 0.00 0.15 -1.73 -1.52 -1.41 -1.31 -1.16 2747 1\rlog_lik[77] -0.93 0.00 0.08 -1.08 -0.97 -0.92 -0.87 -0.78 2978 1\rlog_lik[78] -0.96 0.00 0.08 -1.11 -1.01 -0.96 -0.91 -0.81 3039 1\rlog_lik[79] -0.99 0.00 0.10 -1.20 -1.05 -0.98 -0.93 -0.82 2575 1\rlog_lik[80] -0.94 0.00 0.08 -1.11 -1.00 -0.94 -0.89 -0.80 2971 1\rlog_lik[81] -1.56 0.00 0.21 -1.99 -1.69 -1.54 -1.40 -1.21 2434 1\rlog_lik[82] -1.68 0.00 0.17 -2.06 -1.78 -1.67 -1.56 -1.37 2568 1\rlog_lik[83] -0.99 0.00 0.08 -1.15 -1.04 -0.99 -0.94 -0.84 2818 1\rlog_lik[84] -1.36 0.00 0.16 -1.72 -1.46 -1.35 -1.25 -1.09 2593 1\rlog_lik[85] -0.93 0.00 0.08 -1.08 -0.97 -0.92 -0.87 -0.78 2878 1\rlog_lik[86] -0.93 0.00 0.07 -1.08 -0.98 -0.93 -0.88 -0.79 2977 1\rlog_lik[87] -1.62 0.00 0.25 -2.18 -1.77 -1.59 -1.44 -1.19 2899 1\rlog_lik[88] -0.96 0.00 0.09 -1.15 -1.02 -0.96 -0.90 -0.80 3100 1\rlog_lik[89] -1.65 0.00 0.28 -2.28 -1.82 -1.62 -1.44 -1.18 3480 1\rlog_lik[90] -1.09 0.00 0.13 -1.38 -1.17 -1.07 -1.00 -0.88 2482 1\rlog_lik[91] -1.18 0.00 0.14 -1.51 -1.27 -1.17 -1.08 -0.95 3154 1\rlog_lik[92] -0.99 0.00 0.08 -1.17 -1.04 -0.98 -0.93 -0.84 2766 1\rlog_lik[93] -0.93 0.00 0.08 -1.10 -0.98 -0.93 -0.88 -0.78 2556 1\rlog_lik[94] -1.31 0.00 0.11 -1.55 -1.38 -1.31 -1.24 -1.11 3091 1\rlog_lik[95] -1.96 0.01 0.30 -2.60 -2.15 -1.94 -1.74 -1.47 2459 1\rlog_lik[96] -3.52 0.01 0.47 -4.52 -3.81 -3.50 -3.19 -2.69 3235 1\rlog_lik[97] -1.11 0.00 0.10 -1.32 -1.18 -1.10 -1.04 -0.93 2932 1\rlog_lik[98] -1.48 0.00 0.19 -1.90 -1.61 -1.47 -1.34 -1.15 2845 1\rlog_lik[99] -1.08 0.00 0.11 -1.33 -1.15 -1.07 -1.00 -0.89 2761 1\rlog_lik[100] -1.66 0.00 0.13 -1.94 -1.74 -1.65 -1.56 -1.42 2616 1\rlp__ -48.86 0.04 1.42 -52.37 -49.58 -48.52 -47.80 -47.06 1447 1\rSamples were drawn using NUTS(diag_e) at Thu Feb 13 15:27:59 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rMultiplicative model\rWe now translate the likelihood for the multiplicative model into STAN code. Arrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; X = model.matrix(~cx1 * cx2, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(Y = y, X = X, nX = ncol(X), n = nrow(data)))\rDefine the nodes (parameters and derivatives) to monitor and chain parameters.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;, \u0026quot;cbeta0\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;log_lik\u0026quot;)\r\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 1000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 3000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 2500\rNow compile and run the Stan code via the rstan interface.\n\u0026gt; data.rstan.mult \u0026lt;- stan(data = data.list, file = \u0026quot;linregModelmult.stan\u0026quot;, chains = nChains, pars = params,\r+ iter = nIter, warmup = burnInSteps, thin = thinSteps, save_dso = TRUE)\rSAMPLING FOR MODEL \u0026#39;linregModeladd\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 1: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 1: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 1: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 1: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 1: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 1: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 1: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 1: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 1: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 1: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 1: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.079 seconds (Warm-up)\rChain 1: 0.098 seconds (Sampling)\rChain 1: 0.177 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;linregModeladd\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 2: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 2: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 2: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 2: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 2: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 2: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 2: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 2: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 2: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 2: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 2: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.079 seconds (Warm-up)\rChain 2: 0.096 seconds (Sampling)\rChain 2: 0.175 seconds (Total)\rChain 2: \u0026gt; \u0026gt; data.rstan.mult\rInference for Stan model: linregModeladd.\r2 chains, each with iter=2500; warmup=1000; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta[1] 2.81 0.01 0.45 1.90 2.51 2.81 3.11 3.69 3050 1\rbeta[2] 1.50 0.01 0.38 0.77 1.24 1.50 1.77 2.26 2954 1\rbeta[3] 1.41 0.02 1.22 -0.98 0.58 1.44 2.24 3.76 3328 1\rbeta0 3.72 0.00 0.12 3.48 3.63 3.71 3.80 3.96 3353 1\rcbeta0 3.80 0.00 0.10 3.61 3.73 3.80 3.87 4.00 3449 1\rsigma 0.99 0.00 0.07 0.86 0.94 0.99 1.04 1.15 3271 1\rlog_lik[1] -1.10 0.00 0.09 -1.29 -1.17 -1.10 -1.04 -0.93 3407 1\rlog_lik[2] -0.97 0.00 0.09 -1.15 -1.02 -0.97 -0.91 -0.82 3196 1\rlog_lik[3] -0.93 0.00 0.07 -1.08 -0.98 -0.93 -0.88 -0.79 3279 1\rlog_lik[4] -0.98 0.00 0.11 -1.25 -1.03 -0.96 -0.90 -0.80 2510 1\rlog_lik[5] -1.31 0.00 0.18 -1.72 -1.41 -1.29 -1.18 -1.01 3885 1\rlog_lik[6] -0.94 0.00 0.08 -1.12 -0.99 -0.94 -0.88 -0.79 2606 1\rlog_lik[7] -1.19 0.00 0.15 -1.55 -1.28 -1.17 -1.08 -0.93 3240 1\rlog_lik[8] -2.17 0.01 0.34 -2.93 -2.38 -2.14 -1.93 -1.60 4441 1\rlog_lik[9] -0.97 0.00 0.08 -1.13 -1.02 -0.97 -0.92 -0.82 3225 1\rlog_lik[10] -1.45 0.00 0.18 -1.85 -1.56 -1.43 -1.32 -1.14 3432 1\rlog_lik[11] -1.05 0.00 0.19 -1.55 -1.13 -1.01 -0.93 -0.82 2965 1\rlog_lik[12] -1.17 0.00 0.10 -1.39 -1.23 -1.16 -1.09 -0.98 3567 1\rlog_lik[13] -2.26 0.01 0.41 -3.15 -2.52 -2.23 -1.96 -1.54 3444 1\rlog_lik[14] -0.93 0.00 0.08 -1.09 -0.98 -0.93 -0.88 -0.79 2841 1\rlog_lik[15] -1.16 0.00 0.13 -1.45 -1.24 -1.14 -1.06 -0.93 3297 1\rlog_lik[16] -0.99 0.00 0.11 -1.26 -1.05 -0.98 -0.91 -0.81 2781 1\rlog_lik[17] -0.95 0.00 0.08 -1.10 -1.00 -0.95 -0.89 -0.80 3330 1\rlog_lik[18] -1.09 0.00 0.16 -1.46 -1.18 -1.06 -0.97 -0.84 2960 1\rlog_lik[19] -1.21 0.00 0.10 -1.42 -1.27 -1.20 -1.13 -1.02 3358 1\rlog_lik[20] -1.39 0.00 0.19 -1.84 -1.50 -1.37 -1.25 -1.07 3724 1\rlog_lik[21] -0.96 0.00 0.09 -1.16 -1.02 -0.96 -0.90 -0.80 3449 1\rlog_lik[22] -1.34 0.00 0.15 -1.69 -1.44 -1.33 -1.23 -1.08 3373 1\rlog_lik[23] -1.02 0.00 0.10 -1.24 -1.08 -1.02 -0.96 -0.85 3117 1\rlog_lik[24] -0.96 0.00 0.09 -1.17 -1.02 -0.95 -0.90 -0.80 2550 1\rlog_lik[25] -2.77 0.01 0.35 -3.52 -3.00 -2.74 -2.53 -2.13 3713 1\rlog_lik[26] -1.08 0.00 0.14 -1.40 -1.16 -1.06 -0.99 -0.86 3525 1\rlog_lik[27] -0.97 0.00 0.09 -1.17 -1.02 -0.97 -0.91 -0.81 2981 1\rlog_lik[28] -0.94 0.00 0.08 -1.11 -0.99 -0.94 -0.88 -0.79 2570 1\rlog_lik[29] -1.26 0.00 0.18 -1.67 -1.36 -1.23 -1.13 -0.97 3476 1\rlog_lik[30] -0.93 0.00 0.08 -1.08 -0.98 -0.92 -0.87 -0.78 3170 1\rlog_lik[31] -2.23 0.01 0.42 -3.14 -2.51 -2.19 -1.92 -1.51 4024 1\rlog_lik[32] -1.17 0.00 0.22 -1.69 -1.28 -1.12 -1.00 -0.86 3923 1\rlog_lik[33] -0.93 0.00 0.07 -1.08 -0.98 -0.93 -0.87 -0.79 3259 1\rlog_lik[34] -0.98 0.00 0.09 -1.16 -1.03 -0.97 -0.92 -0.81 3436 1\rlog_lik[35] -2.63 0.01 0.52 -3.77 -2.96 -2.60 -2.27 -1.76 3962 1\rlog_lik[36] -1.67 0.00 0.18 -2.05 -1.78 -1.66 -1.54 -1.35 3477 1\rlog_lik[37] -1.86 0.00 0.27 -2.44 -2.03 -1.83 -1.67 -1.41 4335 1\rlog_lik[38] -1.29 0.00 0.17 -1.67 -1.40 -1.28 -1.17 -1.01 3135 1\rlog_lik[39] -2.94 0.01 0.58 -4.21 -3.31 -2.90 -2.52 -1.98 3294 1\rlog_lik[40] -1.78 0.00 0.20 -2.20 -1.91 -1.76 -1.63 -1.42 3848 1\rlog_lik[41] -1.38 0.00 0.24 -1.96 -1.52 -1.35 -1.21 -1.00 3613 1\rlog_lik[42] -0.93 0.00 0.07 -1.08 -0.98 -0.93 -0.88 -0.79 3311 1\rlog_lik[43] -2.03 0.01 0.34 -2.78 -2.24 -2.00 -1.78 -1.44 3238 1\rlog_lik[44] -1.92 0.00 0.25 -2.47 -2.08 -1.90 -1.73 -1.47 3460 1\rlog_lik[45] -2.08 0.01 0.34 -2.82 -2.30 -2.05 -1.84 -1.50 3103 1\rlog_lik[46] -1.00 0.00 0.13 -1.31 -1.06 -0.98 -0.91 -0.81 2724 1\rlog_lik[47] -1.77 0.00 0.28 -2.40 -1.95 -1.74 -1.57 -1.29 3795 1\rlog_lik[48] -1.24 0.00 0.16 -1.60 -1.34 -1.22 -1.13 -0.98 3253 1\rlog_lik[49] -3.58 0.01 0.54 -4.72 -3.92 -3.54 -3.20 -2.60 3539 1\rlog_lik[50] -1.62 0.00 0.26 -2.21 -1.78 -1.60 -1.44 -1.20 4473 1\rlog_lik[51] -1.38 0.00 0.22 -1.87 -1.51 -1.35 -1.22 -1.03 3141 1\rlog_lik[52] -1.29 0.00 0.11 -1.51 -1.36 -1.28 -1.22 -1.10 3466 1\rlog_lik[53] -1.00 0.00 0.09 -1.19 -1.05 -0.99 -0.94 -0.83 3475 1\rlog_lik[54] -1.25 0.00 0.25 -1.85 -1.39 -1.21 -1.07 -0.90 3457 1\rlog_lik[55] -0.93 0.00 0.08 -1.10 -0.98 -0.93 -0.88 -0.79 2537 1\rlog_lik[56] -0.93 0.00 0.08 -1.09 -0.98 -0.93 -0.88 -0.78 3031 1\rlog_lik[57] -1.21 0.00 0.14 -1.51 -1.29 -1.19 -1.11 -0.98 3535 1\rlog_lik[58] -0.99 0.00 0.10 -1.22 -1.05 -0.98 -0.92 -0.82 2718 1\rlog_lik[59] -1.50 0.00 0.19 -1.92 -1.61 -1.48 -1.36 -1.17 3926 1\rlog_lik[60] -0.96 0.00 0.08 -1.13 -1.01 -0.95 -0.90 -0.81 3188 1\rlog_lik[61] -1.56 0.00 0.15 -1.88 -1.66 -1.55 -1.45 -1.29 3824 1\rlog_lik[62] -1.28 0.00 0.24 -1.84 -1.42 -1.24 -1.11 -0.93 3575 1\rlog_lik[63] -1.63 0.00 0.17 -1.99 -1.75 -1.62 -1.51 -1.33 3227 1\rlog_lik[64] -6.83 0.02 0.94 -8.75 -7.44 -6.78 -6.16 -5.13 3520 1\rlog_lik[65] -0.99 0.00 0.09 -1.20 -1.05 -0.99 -0.93 -0.83 3065 1\rlog_lik[66] -0.99 0.00 0.08 -1.15 -1.04 -0.99 -0.94 -0.85 3279 1\rlog_lik[67] -1.22 0.00 0.15 -1.54 -1.31 -1.21 -1.11 -0.97 4342 1\rlog_lik[68] -1.04 0.00 0.12 -1.31 -1.11 -1.03 -0.96 -0.85 2870 1\rlog_lik[69] -1.09 0.00 0.10 -1.32 -1.16 -1.09 -1.02 -0.91 3711 1\rlog_lik[70] -1.03 0.00 0.09 -1.22 -1.09 -1.02 -0.97 -0.87 3430 1\rlog_lik[71] -0.93 0.00 0.08 -1.08 -0.98 -0.93 -0.88 -0.79 3117 1\rlog_lik[72] -0.93 0.00 0.08 -1.09 -0.98 -0.93 -0.88 -0.79 2675 1\rlog_lik[73] -0.93 0.00 0.08 -1.09 -0.98 -0.93 -0.87 -0.79 3199 1\rlog_lik[74] -3.70 0.01 0.62 -5.03 -4.11 -3.66 -3.25 -2.63 3528 1\rlog_lik[75] -1.15 0.00 0.11 -1.37 -1.22 -1.14 -1.07 -0.96 3241 1\rlog_lik[76] -1.40 0.00 0.14 -1.70 -1.49 -1.39 -1.30 -1.15 3445 1\rlog_lik[77] -0.93 0.00 0.07 -1.08 -0.98 -0.93 -0.88 -0.79 3260 1\rlog_lik[78] -0.99 0.00 0.08 -1.15 -1.04 -0.99 -0.93 -0.84 3340 1\rlog_lik[79] -1.07 0.00 0.13 -1.36 -1.14 -1.05 -0.97 -0.86 3060 1\rlog_lik[80] -0.97 0.00 0.09 -1.15 -1.02 -0.96 -0.91 -0.81 3250 1\rlog_lik[81] -1.42 0.00 0.21 -1.88 -1.55 -1.40 -1.27 -1.07 3112 1\rlog_lik[82] -1.80 0.00 0.23 -2.30 -1.95 -1.79 -1.64 -1.40 3734 1\rlog_lik[83] -0.96 0.00 0.08 -1.13 -1.01 -0.96 -0.90 -0.81 3208 1\rlog_lik[84] -1.29 0.00 0.17 -1.66 -1.38 -1.27 -1.17 -1.01 3325 1\rlog_lik[85] -0.93 0.00 0.08 -1.08 -0.98 -0.93 -0.87 -0.78 3030 1\rlog_lik[86] -0.92 0.00 0.07 -1.07 -0.97 -0.92 -0.87 -0.78 3172 1\rlog_lik[87] -1.62 0.00 0.26 -2.22 -1.78 -1.60 -1.43 -1.19 3500 1\rlog_lik[88] -0.95 0.00 0.08 -1.13 -1.00 -0.94 -0.89 -0.80 3265 1\rlog_lik[89] -1.41 0.00 0.30 -2.11 -1.58 -1.36 -1.18 -0.96 4135 1\rlog_lik[90] -1.02 0.00 0.12 -1.31 -1.10 -1.01 -0.94 -0.82 2936 1\rlog_lik[91] -1.06 0.00 0.15 -1.44 -1.13 -1.03 -0.95 -0.83 3111 1\rlog_lik[92] -0.96 0.00 0.08 -1.14 -1.01 -0.96 -0.91 -0.81 2933 1\rlog_lik[93] -0.96 0.00 0.09 -1.17 -1.01 -0.95 -0.89 -0.80 2348 1\rlog_lik[94] -1.27 0.00 0.11 -1.52 -1.34 -1.26 -1.18 -1.07 3617 1\rlog_lik[95] -1.74 0.01 0.32 -2.44 -1.93 -1.70 -1.51 -1.21 3087 1\rlog_lik[96] -3.34 0.01 0.46 -4.30 -3.63 -3.31 -3.02 -2.54 3551 1\rlog_lik[97] -1.14 0.00 0.11 -1.39 -1.21 -1.14 -1.06 -0.95 3744 1\rlog_lik[98] -1.53 0.00 0.20 -1.97 -1.65 -1.51 -1.38 -1.18 3594 1\rlog_lik[99] -1.07 0.00 0.11 -1.31 -1.13 -1.06 -0.99 -0.87 3345 1\rlog_lik[100] -1.56 0.00 0.15 -1.87 -1.65 -1.54 -1.45 -1.30 3334 1\rlp__ -48.64 0.04 1.58 -52.44 -49.52 -48.28 -47.44 -46.52 1457 1\rSamples were drawn using NUTS(diag_e) at Thu Feb 13 15:28:01 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.rstan.mult)\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;,\u0026quot;cbeta0\u0026quot;,\u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;,\u0026quot;cbeta0\u0026quot;,\u0026quot;sigma\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(mcmc)\r$`1`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\r$`2`\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 You need a sample size of at least 3746 with these values of q, r and s\rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; stan_ac(data.rstan.mult, pars = c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;))\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\u0026gt; stan_ac(data.rstan.mult, pars = c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;))\r\u0026gt; stan_ess(data.rstan.mult, pars = c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;))\rRhat and effective sample size. In this instance, most of the parameters have reasonably high effective samples and thus there is likely to be a good range of values from which to estimate paramter properties.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model. Residuals are not computed directly within rstan However, we can calculate them manually form the posteriors.\n\u0026gt; library(ggplot2)\r\u0026gt; library(dplyr)\r\u0026gt; mcmc = as.data.frame(data.rstan.mult) %\u0026gt;% dplyr:::select(beta0, starts_with(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rResiduals against predictors\n\u0026gt; library(tidyr)\r\u0026gt; mcmc = as.data.frame(data.rstan.mult) %\u0026gt;% dplyr:::select(beta0, starts_with(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = newdata\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; newdata = data %\u0026gt;% cbind(fit, resid)\r\u0026gt; newdata.melt = newdata %\u0026gt;% gather(key = Pred, value = Value, cx1:cx2)\r\u0026gt; ggplot(newdata.melt) + geom_point(aes(y = resid, x = Value)) + facet_wrap(~Pred)\rAnd now for studentised residuals\n\u0026gt; mcmc = as.data.frame(data.rstan.mult) %\u0026gt;% dplyr:::select(beta0, starts_with(\u0026quot;beta\u0026quot;),\r+ sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc[, 1:4], 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit))\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.data.frame(data.rstan.mult) %\u0026gt;% dplyr:::select(beta0,\r+ starts_with(\u0026quot;beta\u0026quot;), sigma) %\u0026gt;% as.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, 1:4]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep),\r+ fill = \u0026quot;Model\u0026quot;), alpha = 0.5) + geom_density(data = data,\r+ aes(x = y, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5)\rWe can also explore the posteriors of each parameter.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_intervals(as.matrix(data.rstan.mult), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\u0026gt; mcmc_areas(as.matrix(data.rstan.mult), regex_pars = \u0026quot;beta|sigma\u0026quot;)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\rFirst, we look at the results from the additive model.\n\u0026gt; print(data.rstan.add, pars = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: linregModeladd.\r2 chains, each with iter=2500; warmup=1000; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta0 3.80 0.00 0.10 3.60 3.73 3.80 3.87 4.00 2672 1\rbeta[1] 2.83 0.01 0.45 1.95 2.52 2.82 3.13 3.72 2562 1\rbeta[2] 1.58 0.01 0.38 0.84 1.33 1.58 1.85 2.32 2623 1\rsigma 0.99 0.00 0.07 0.86 0.94 0.99 1.04 1.15 3017 1\rSamples were drawn using NUTS(diag_e) at Thu Feb 13 15:27:59 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan.add, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;,\r+ pars = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta0 3.80 0.101 3.59 3.99\r2 beta[1] 2.83 0.445 1.93 3.69\r3 beta[2] 1.58 0.377 0.823 2.31\r4 sigma 0.994 0.0740 0.856 1.15\rConclusions\n\rWhen cx2 is held constant, a one unit increase in cx1 is associated with a \\(2.83\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(2.83\\) per unit increase in cx1 when standardised for cx2.\n\rWhen cx1 is held constant, a one unit increase in cx2 is associated with a \\(1.58\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(1.58\\) per unit increase in cx2 when standardised for cx1.\n\r\rNote, as this is an additive model, the rates associated with cx1 are assumed to be constant throughtout the range of cx2 and vice versa. The \\(95\\)% confidence interval for each partial slope does not overlap with \\(0\\) implying a significant effects of cx1 and cx2 on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue(as.matrix(data.rstan.add)[, \u0026quot;beta[1]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan.add)[, \u0026quot;beta[2]\u0026quot;])\r[1] 0\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship. Next, we look at the results from the multiplicative model.\n\u0026gt; print(data.rstan.mult, pars = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\rInference for Stan model: linregModeladd.\r2 chains, each with iter=2500; warmup=1000; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat\rbeta0 3.72 0.00 0.12 3.48 3.63 3.71 3.80 3.96 3353 1\rbeta[1] 2.81 0.01 0.45 1.90 2.51 2.81 3.11 3.69 3050 1\rbeta[2] 1.50 0.01 0.38 0.77 1.24 1.50 1.77 2.26 2954 1\rbeta[3] 1.41 0.02 1.22 -0.98 0.58 1.44 2.24 3.76 3328 1\rsigma 0.99 0.00 0.07 0.86 0.94 0.99 1.04 1.15 3271 1\rSamples were drawn using NUTS(diag_e) at Thu Feb 13 15:28:01 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan.mult, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;,\r+ pars = c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta0 3.72 0.124 3.48 3.96\r2 beta[1] 2.81 0.455 1.96 3.73\r3 beta[2] 1.50 0.385 0.769 2.26\r4 beta[3] 1.41 1.22 -0.985 3.76\r5 sigma 0.993 0.0725 0.850 1.13\rConclusions\n\rAt the average level of cx2 (=0), a one unit increase in cx1 is associated with a \\(2.80\\) change in y. That is, y increases at a rate of \\(2.80\\) per unit increase in cx1 when standardised for cx2.\n\rAt the average level of cx1 (=0), a one unit increase in cx2 is associated with a \\(1.50\\) change in \\(y\\). That is, \\(y\\) increases at a rate of \\(1.50\\) per unit increase in cx2 when standardised for cx1.\n\rThe degree to which the rate of change in response associated with a one unit change in cx1 changes over the range of cx2 (and vice versa) is \\(1.45\\).\n\r\rThe \\(95\\)% confidence intervals for the interaction partial slope does not overlap with \\(0\\) implying a significant interaction between cx1 and cx2. This suggests that the nature of the relationship between \\(y\\) and cx1 depends on the level of cx2 (and vice versa). The estimates of the effect of cx1 are only appropriate when cx2 = 0 etc. While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.rstan.mult)[, \u0026quot;beta[1]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan.mult)[, \u0026quot;beta[2]\u0026quot;])\r[1] 0\r\u0026gt; mcmcpvalue(as.matrix(data.rstan.mult)[, \u0026quot;beta[3]\u0026quot;])\r[1] 0.2476667\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship. An alternative way of quantifying the impact of an interaction is to compare models with and without the interactions. In a Bayesian context, this can be achieved by comparing the leave-one-out cross-validation statistics. Leave-one-out (LOO) cross-validation explores how well a series of models can predict withheld values Vehtari, Gelman, and Gabry (2017). The LOO Information Criterion (LOOIC) is analogous to the AIC except that the LOOIC takes priors into consideration, does not assume that the posterior distribution is drawn from a multivariate normal and integrates over parameter uncertainty so as to yield a distribution of looic rather than just a point estimate. The LOOIC does however assume that all observations are equally influential (it does not matter which observations are left out). This assumption can be examined via the Pareto \\(k\\) estimate (values greater than \\(0.5\\) or more conservatively \\(0.75\\) are considered overly influential). We can compute LOOIC if we store the loglikelihood from our STAN model, which can then be extracted to compute the information criterion using the package loo.\n\u0026gt; ## since values are less than zero\r\u0026gt; library(loo)\r\u0026gt; (full = loo(extract_log_lik(data.rstan.mult)))\rComputed from 3000 by 100 log-likelihood matrix\rEstimate SE\relpd_loo -143.3 8.5\rp_loo 5.2 1.1\rlooic 286.5 17.0\r------\rMonte Carlo SE of elpd_loo is 0.1.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; (reduced = loo(extract_log_lik(data.rstan.add)))\rComputed from 3000 by 100 log-likelihood matrix\rEstimate SE\relpd_loo -143.1 8.7\rp_loo 4.4 1.1\rlooic 286.1 17.4\r------\rMonte Carlo SE of elpd_loo is 0.0.\rAll Pareto k estimates are good (k \u0026lt; 0.5).\rSee help(\u0026#39;pareto-k-diagnostic\u0026#39;) for details.\r\u0026gt; \u0026gt; par(mfrow = 1:2, mar = c(5, 3.8, 1, 0) + 0.1, las = 3)\r\u0026gt; plot(full, label_points = TRUE)\r\u0026gt; plot(reduced, label_points = TRUE)\rThe expected out-of-sample predictive accuracy is very similar (slightly lower) for the additive model compared to the multiplicative model (model containing the interaction). This might be used to suggest that the inferential evidence for an interaction is low.\n\rGraphical summaries\rWith appropriate use of model matrices and data wrangling, it is possible to produce a single prediction data set along with ggplot syntax to produce a multi-panel figure. First we look at the additive model.\n\u0026gt; mcmc = as.matrix(data.rstan.add)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = rbind(data.frame(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = 0, Pred = 1), data.frame(cx1 = 0,\r+ cx2 = seq(min(data$cx2, na.rm = TRUE), max(data$cx2, na.rm = TRUE),\r+ len = 100), Pred = 2))\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)) %\u0026gt;%\r+ mutate(x = dplyr:::recode(Pred, x1, x2))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic() + facet_wrap(~Pred)\rWe cannot simply add the raw data to this figure. The reason for this is that the trends represent the effect of one predictor holding the other variable constant. Therefore, the observations we represent on the figure must likewise be standardised. We can achieve this by adding the partial residuals to the figure. Partial residuals are the fitted values plus the residuals.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = rbind(data.frame(cx1 = data$cx1, cx2 = 0, Pred = 1), data.frame(cx1 = 0,\r+ cx2 = data$cx2, Pred = 2))\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2) %\u0026gt;% mutate(x = dplyr:::recode(Pred, x1,\r+ x2))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + theme_classic() +\r+ facet_wrap(~Pred, strip.position = \u0026quot;bottom\u0026quot;, labeller = label_bquote(\u0026quot;x\u0026quot; *\r+ .(Pred))) + theme(axis.title.x = element_blank(), strip.background = element_blank(),\r+ strip.placement = \u0026quot;outside\u0026quot;)\rHowever, this method (whist partially elegant) does become overly opaque if we need more extensive axes labels since the x-axes labels are actually strip labels (which must largely be defined outside of the ggplot structure). The alternative is to simply produce each partial plot separately before arranging them together in the one figure using the package gridExtra.\n\u0026gt; library(gridExtra)\r\u0026gt; mcmc = as.matrix(data.rstan.add)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = 0)\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ## Now the partial residuals\r\u0026gt; fdata = rdata = data.frame(cx1 = data$cx1, cx2 = 0)\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; g1 = ggplot(newdata, aes(y = estimate, x = x1)) + geom_point(data = rdata,\r+ aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X1\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; newdata = data.frame(cx2 = seq(min(data$cx2, na.rm = TRUE), max(data$cx2,\r+ na.rm = TRUE), len = 100), cx1 = 0)\r\u0026gt; Xmat = model.matrix(~cx1 + cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ## Now the partial residuals\r\u0026gt; fdata = rdata = data.frame(cx1 = 0, cx2 = data$cx2)\r\u0026gt; fMat = rMat = model.matrix(~cx1 + cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; g2 = ggplot(newdata, aes(y = estimate, x = x2)) + geom_point(data = rdata,\r+ aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X2\u0026quot;) + theme_classic()\r\u0026gt; \u0026gt; grid.arrange(g1, g2, ncol = 2)\rFor the multiplicative model, we could elect to split the trends up so as to explore the effects of one predictor at several set levels of another predictor. In this example, we will explore the effects of \\(x_1\\) when \\(x_2\\) is equal to its mean in the original data as well as one and two standard deviations below and above this mean.\n\u0026gt; library(fields)\r\u0026gt; mcmc = as.matrix(data.rstan.mult)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = expand.grid(cx1 = seq(min(data$cx1, na.rm = TRUE), max(data$cx1,\r+ na.rm = TRUE), len = 100), cx2 = mean(data$cx2) + sd(data$cx2) %*%\r+ -2:2)\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% mutate(x1 = cx1 + mean.x1, x2 = cx2 + mean.x2) %\u0026gt;%\r+ cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)) %\u0026gt;%\r+ mutate(x2 = factor(x2, labels = paste(\u0026quot;X2:~\u0026quot;, c(-2, -1, 0, 1, 2), \u0026quot;*sigma\u0026quot;)))\r\u0026gt; ## Partial residuals\r\u0026gt; fdata = rdata = expand.grid(cx1 = data$cx1, cx2 = mean(data$cx2) + sd(data$cx2) *\r+ -2:2)\r\u0026gt; fMat = rMat = model.matrix(~cx1 * cx2, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit) %\u0026gt;% mutate(x1 = cx1 +\r+ mean.x1, x2 = cx2 + mean.x2)\r\u0026gt; ## Partition the partial residuals such that each x1 trend only includes\r\u0026gt; ## x2 data that is within that range in the observed data\r\u0026gt; findNearest = function(x, y) {\r+ ff = fields:::rdist(x, y)\r+ apply(ff, 1, function(x) which(x == min(x)))\r+ }\r\u0026gt; fn = findNearest(x = data[, c(\u0026quot;x1\u0026quot;, \u0026quot;x2\u0026quot;)], y = rdata[, c(\u0026quot;x1\u0026quot;, \u0026quot;x2\u0026quot;)])\r\u0026gt; rdata = rdata[fn, ] %\u0026gt;% mutate(x2 = factor(x2, labels = paste(\u0026quot;X2:~\u0026quot;, c(-2,\r+ -1, 0, 1, 2), \u0026quot;*sigma\u0026quot;)))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x1)) + geom_line() + geom_blank(aes(y = 9)) +\r+ geom_point(data = rdata, aes(y = partial.resid), color = \u0026quot;grey\u0026quot;) +\r+ geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \u0026quot;blue\u0026quot;,\r+ alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X1\u0026quot;) +\r+ facet_wrap(~x2, labeller = label_parsed, nrow = 1, scales = \u0026quot;free_y\u0026quot;) +\r+ theme_classic() + theme(strip.background = element_blank())\rAlternatively, we could explore the interaction by plotting a two dimensional surface as a heat map.\n\rEffect sizes\rIn addition to deriving the distribution means for the slope parameter, we could make use of the Bayesian framework to derive the distribution of the effect size. In so doing, effect size could be considered as either the rate of change or alternatively, the difference between pairs of values along the predictor gradient. For the latter case, there are multiple ways of calculating an effect size, but the two most common are:\n\rRaw effect size. The difference between two groups (as already calculated)\n\rCohen’s D. The effect size standardized by division with the pooled standard deviation: \\(D=\\frac{(\\mu_A-\\mu_B)}{\\sigma}\\)\n\rPercentage change. Express the effect size as a percent of one of the pairs. That is, whether you expressing a percentage increase or a percentage decline depends on which of the pairs of values are considered a reference value. Care must be exercised to ensure no division by zeros occur.\n\r\rFor simple linear models, effect size based on a rate is essentially the same as above except that it is expressed per unit of the predictor. Of course in many instances, one unit change in the predictor represents too subtle a shift in the underlying gradient to likely yield any clinically meaningful or appreciable change in response.\nProbability that a change in \\(x_1\\) is associated with greater than a \\(50\\)% increase in \\(y\\) at various levels of \\(x_2\\). Clearly, in order to explore this inference, we must first express the change in \\(y\\) as a percentage. This in turn requires us to calculate start and end points from which to calculate the magnitude of the effect (amount of increase in \\(y\\)) as well as the percentage decline. Hence, we start by predicting the distribution of \\(y\\) at the lowest and highest values of \\(x_1\\) at five levels of \\(x_2\\) (representing two standard deviations below the cx2 mean, one standard deviation below the cx2 mean, the cx2 mean, one standard deviation above the cx2 mean and \\(2\\) standard deviations above the cx2 mean. For this exercise we will only use the multiplicative model. Needless to say, the process would be very similar for the additive model.\n\u0026gt; mcmc = as.matrix(data.rstan.mult)\r\u0026gt; newdata = expand.grid(cx1 = c(min(data$cx1), max(data$cx1)), cx2 = (-2:2) *\r+ sd(data$cx1))\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; s1 = seq(1, 9, b = 2)\r\u0026gt; s2 = seq(2, 10, b = 2)\r\u0026gt; ## Raw effect size\r\u0026gt; (RES = tidyMCMC(as.mcmc(fit[, s2] - fit[, s1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 1.99 0.846 0.278 3.59\r2 4 2.39 0.583 1.29 3.58\r3 6 2.79 0.452 1.94 3.71\r4 8 3.19 0.554 2.11 4.21\r5 10 3.59 0.806 2.09 5.18\r\u0026gt; ## Cohen\u0026#39;s D\r\u0026gt; cohenD = (fit[, s2] - fit[, s1])/sqrt(mcmc[, \u0026quot;sigma\u0026quot;])\r\u0026gt; (cohenDES = tidyMCMC(as.mcmc(cohenD), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 2.00 0.849 0.283 3.60\r2 4 2.40 0.590 1.26 3.56\r3 6 2.81 0.465 1.91 3.73\r4 8 3.21 0.570 2.14 4.33\r5 10 3.61 0.820 1.90 5.10\r\u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ESp = 100 * (fit[, s2] - fit[, s1])/fit[, s1]\r\u0026gt; (PES = tidyMCMC(as.mcmc(ESp), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 121. 80.0 -1.23 277.\r2 4 119. 41.4 38.8 200.\r3 6 124. 33.1 64.6 190.\r4 8 132. 46.6 54.8 225.\r5 10 144. 73.2 37.8 282.\r\u0026gt; # Probability that the effect is greater than 50% (an increase of \u0026gt;50%)\r\u0026gt; (p50 = apply(ESp, 2, function(x) sum(x \u0026gt; 50)/length(x)))\r2 4 6 8 10 0.8586667 0.9740000 0.9983333 0.9940000 0.9793333 \u0026gt; ## fractional change\r\u0026gt; (FES = tidyMCMC(as.mcmc(fit[, s2]/fit[, s1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 5 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 2 2.21 0.800 0.988 3.77\r2 4 2.19 0.414 1.39 3.00\r3 6 2.24 0.331 1.65 2.90\r4 8 2.32 0.466 1.55 3.25\r5 10 2.44 0.732 1.38 3.82\rConclusions\n\rOn average, when \\(x_2\\) is equal to its mean, \\(Y\\) increases by \\(2.79\\) over the observed range of \\(x_1\\). We are \\(95\\)% confident that the increase is between \\(1.91\\) and \\(3.66\\).\n\rThe Cohen’s D associated change over the observed range of \\(x_1\\) is \\(2.80\\).\n\rOn average, \\(Y\\) increases by \\(124\\)% over the observed range of \\(x_1\\) (at average \\(x_2\\)). We are \\(95\\)% confident that the increase is between \\(65\\)% and \\(190\\)%.\n\rThe probability that \\(Y\\) increases by more than \\(50\\)% over the observed range of \\(x_1\\) (average \\(x_2\\)) is \\(0.998\\).\n\rOn average, \\(Y\\) increases by a factor of \\(2.24\\)% over the observed range of \\(x_1\\) (average \\(x_2\\)). We are \\(95\\)% confident that the decline is between a factor of \\(1.65\\)% and \\(2.90\\)%.\n\r\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x1 0.800 0.130 0.558 1.06 2 sd.x2 0.501 0.128 0.256 0.754\r3 sd.x1x2 0.134 0.0873 0.000182 0.291\r4 sd.resid 0.981 0.0125 0.966 1.01 # A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x1 33.2 5.00 22.5 42.1\r2 sd.x2 20.8 5.11 11.2 30.9\r3 sd.x1x2 5.16 3.44 0.00805 11.5\r4 sd.resid 40.5 2.13 36.7 45.0\rApproximately \\(59\\)% of the total finite population standard deviation is due to \\(x_1\\), \\(x_2\\) and their interaction.\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan.mult)\r\u0026gt; Xmat = model.matrix(~cx1 * cx2, data)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;, \u0026quot;beta[3]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.605 0.0390 0.531 0.678\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ cx1 * cx2, data))\rCall:\rlm(formula = y ~ cx1 * cx2, data = data)\rResiduals:\rMin 1Q Median 3Q Max -1.8173 -0.7167 -0.1092 0.5890 3.3861 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 3.7152 0.1199 30.987 \u0026lt; 2e-16 ***\rcx1 2.8072 0.4390 6.394 5.84e-09 ***\rcx2 1.4988 0.3810 3.934 0.000158 ***\rcx1:cx2 1.4464 1.1934 1.212 0.228476 ---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 0.9804 on 96 degrees of freedom\rMultiple R-squared: 0.6115, Adjusted R-squared: 0.5994 F-statistic: 50.37 on 3 and 96 DF, p-value: \u0026lt; 2.2e-16\r\rBayesian model selection\rA statistical model is by definition a low-dimensional (over simplification) representation of what is really likely to be a very complex system. As a result, no model is right. Some models however can provide useful insights into some of the processes operating on the system. Frequentist statistics have various methods (model selection, dredging, lasso, cross validation) for selecting parsimonious models. These are models that provide a good comprimise between minimizing unexplained patterns and minimizing model complexity. The basic premise is that since no model can hope to capture the full complexity of a system with all its subtleties, only the very major patterns can be estimated. Overly complex models are likely to be representing artificial complexity present only in the specific observed data (not the general population). The Bayesian approach is to apply priors to the non-variance parameters such that parameters close to zero are further shrunk towards zero whilst priors on parameters further away from zero are less effected. The most popular form of prior for sparsity is the horseshoe prior, so called because the shape of a component of this prior resembles a horseshoe (with most of the mass either close to \\(0\\) or close to \\(1\\)).\nRather than apply weakly informative Gaussian priors on parameters as:\n\\[ \\beta_j \\sim N(0,\\sigma^2),\\]\nthe horseshoe prior is defined as\n\\[ \\beta_j \\sim N(0,\\tau^2\\lambda_j^2),\\]\nwhere \\(\\tau \\sim \\text{Cauchy}(0,1)\\) and \\(\\lambda_j \\sim \\text{Cauchy}(0,1)\\), for \\(j=1,\\ldots,D\\). Using this prior, \\(D\\) is the number of (non-intercept or variance) parameters, \\(\\tau\\) represents the global scale that weights or shrinks all parameters towards zero and \\(\\lambda_j\\) are thick tailed local scales that allow some of the \\(j\\) parameters to escape shrinkage. More recently, Piironen, Vehtari, and others (2017) have argued that whilst the above horseshoe priors do guarantee that strong effects (parameters) will not be over-shrunk, there is the potential for weekly identified effects (those based on relatively little data) to be misrepresented in the posteriors. As an alternative they advocated the use of regularised horseshoe priors in which the amount of shrinkage applied to the largest effects can be controlled. The prior is defined as:\n\\[ \\beta_j \\sim N(0,\\tau^2 \\tilde{\\lambda}_j^2),\\]\nwhere \\(\\tilde{\\lambda}_j^2 = \\frac{c^2\\lambda^2_j}{c^2+\\tau^2 \\lambda^2_j}\\) and \\(c\\) is (slab width, actually variance) is a constant. For small effects (when \\(\\tau^2 \\lambda^2_j \u0026lt; c^2\\)) the prior approaches a regular prior. However, for large effects (when \\(\\tau^2 \\lambda^2_j \u0026gt; c^2\\)) the prior approaches \\(N(0,c^2)\\). Finally, they recommend applying a inverse-gamma prior on \\(c^2\\):\n\\[ c^2 \\sim \\text{Inv-Gamma}(\\alpha,\\beta),\\]\nwhere \\(\\alpha=v/2\\) and \\(\\beta=vs^2/2\\), which translates to a \\(\\text{Student-t}_ν(0, s^2)\\) slab for the coefficients far from zero and is typically a good default choice for a weakly informative prior. This prior can be encoded into STAN using the following code.\n\u0026gt; modelStringHP = \u0026quot;\r+ data {\r+ int \u0026lt; lower =0 \u0026gt; n; // number of observations\r+ int \u0026lt; lower =0 \u0026gt; nX; // number of predictors\r+ vector [ n] Y; // outputs\r+ matrix [n ,nX] X; // inputs\r+ real \u0026lt; lower =0 \u0026gt; scale_icept ; // prior std for the intercept\r+ real \u0026lt; lower =0 \u0026gt; scale_global ; // scale for the half -t prior for tau\r+ real \u0026lt; lower =1 \u0026gt; nu_global ; // degrees of freedom for the half -t priors for tau\r+ real \u0026lt; lower =1 \u0026gt; nu_local ; // degrees of freedom for the half - t priors for lambdas\r+ real \u0026lt; lower =0 \u0026gt; slab_scale ; // slab scale for the regularized horseshoe\r+ real \u0026lt; lower =0 \u0026gt; slab_df ; // slab degrees of freedom for the regularized horseshoe\r+ }\r+ transformed data {\r+ matrix[n, nX - 1] Xc; // centered version of X + vector[nX - 1] means_X; // column means of X before centering + for (i in 2:nX) { + means_X[i - 1] = mean(X[, i]); + Xc[, i - 1] = X[, i] - means_X[i - 1]; + } + }\r+ parameters {\r+ real logsigma ;\r+ real cbeta0 ;\r+ vector [ nX-1] z;\r+ real \u0026lt; lower =0 \u0026gt; tau ; // global shrinkage parameter\r+ vector \u0026lt; lower =0 \u0026gt;[ nX-1] lambda ; // local shrinkage parameter\r+ real \u0026lt; lower =0 \u0026gt; caux ;\r+ }\r+ transformed parameters {\r+ real \u0026lt; lower =0 \u0026gt; sigma ; // noise std\r+ vector \u0026lt; lower =0 \u0026gt;[ nX-1] lambda_tilde ; // truncated local shrinkage parameter\r+ real \u0026lt; lower =0 \u0026gt; c; // slab scale\r+ vector [ nX-1] beta ; // regression coefficients\r+ vector [ n] mu; // latent function values\r+ sigma = exp ( logsigma );\r+ c = slab_scale * sqrt ( caux );\r+ lambda_tilde = sqrt ( c ^2 * square ( lambda ) ./ (c ^2 + tau ^2* square ( lambda )) );\r+ beta = z .* lambda_tilde * tau ;\r+ mu = cbeta0 + Xc* beta ;\r+ }\r+ model {\r+ // half -t priors for lambdas and tau , and inverse - gamma for c ^2\r+ z ~ normal (0 , 1);\r+ lambda ~ student_t ( nu_local , 0, 1);\r+ tau ~ student_t ( nu_global , 0 , scale_global * sigma );\r+ caux ~ inv_gamma (0.5* slab_df , 0.5* slab_df );\r+ cbeta0 ~ normal (0 , scale_icept );\r+ Y ~ normal (mu , sigma );\r+ }\r+ generated quantities { + real beta0; // population-level intercept + vector[n] log_lik;\r+ beta0 = cbeta0 - dot_product(means_X, beta);\r+ for (i in 1:n) {\r+ log_lik[i] = normal_lpdf(Y[i] | Xc[i] * beta + cbeta0, sigma);\r+ }\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelStringHP, con = \u0026quot;linregModelHP.stan\u0026quot;)\rWe can now try to refit the model (additive) using this new specification.\n\u0026gt; X = model.matrix(~cx1 + cx2, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(Y = y, X = X, nX = ncol(X), n = nrow(data),\r+ scale_icept = 100, scale_global = 1, nu_global = 1, nu_local = 1, slab_scale = 2,\r+ slab_df = 4))\r\u0026gt; \u0026gt; data.rstan.sparsity \u0026lt;- stan(data = data.list, file = \u0026quot;linregModelHP.stan\u0026quot;, pars = params,\r+ chains = nChains, iter = nIter, warmup = burnInSteps, thin = thinSteps, save_dso = TRUE)\rSAMPLING FOR MODEL \u0026#39;linregModelHP\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 1: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 1: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 1: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 1: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 1: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 1: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 1: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 1: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 1: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 1: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 1: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.364 seconds (Warm-up)\rChain 1: 0.484 seconds (Sampling)\rChain 1: 0.848 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;linregModelHP\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 2: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 2: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 2: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 2: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 2: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 2: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 2: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 2: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 2: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 2: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 2: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.328 seconds (Warm-up)\rChain 2: 0.444 seconds (Sampling)\rChain 2: 0.772 seconds (Total)\rChain 2: \u0026gt; \u0026gt; tidyMCMC(data.rstan.sparsity, pars = c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;), conf.int = TRUE,\r+ conf.type = \u0026quot;HPDinterval\u0026quot;, rhat = TRUE, ess = TRUE)\r# A tibble: 2 x 7\rterm estimate std.error conf.low conf.high rhat ess\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 beta[1] 2.75 0.446 1.86 3.61 0.999 3138\r2 beta[2] 1.56 0.379 0.816 2.30 1.000 2782\r\u0026gt; \u0026gt; mcmc_areas(as.matrix(data.rstan.sparsity), regex_par = \u0026quot;beta\u0026quot;)\rObviously, these data are not really appropriate for model selection as there are only two predictors. Both predictors have substantial effects mass larger than zero.\n\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPiironen, Juho, Aki Vehtari, and others. 2017. “Sparsity Information and Regularization in the Horseshoe and Other Shrinkage Priors.” Electronic Journal of Statistics 11 (2): 5018–51.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\rVehtari, Aki, Andrew Gelman, and Jonah Gabry. 2017. “Practical Bayesian Model Evaluation Using Leave-One-Out Cross-Validation and Waic.” Statistics and Computing 27 (5): 1413–32.\n\r\r\r","date":1580782394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580782394,"objectID":"cf2ab91daa7cea269cd29aed1fb73155","permalink":"/stan/multiple-linear-regression-stan/multiple-linear-regression-stan/","publishdate":"2020-02-03T21:13:14-05:00","relpermalink":"/stan/multiple-linear-regression-stan/multiple-linear-regression-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","linear regression"],"title":"Multiple Linear Regression - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","linear regression","JAGS"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rMany clinicians get a little twitchy and nervous around mathematical and statistical formulae and nomenclature. Whilst it is possible to perform basic statistics without too much regard for the actual equation (model) being employed, as the complexity of the analysis increases, the need to understand the underlying model becomes increasingly important. Moreover, model specification in BUGS/JAGS/STAN (the language used to program Bayesian modelling) aligns very closely to the underlying formulae. Hence a good understanding of the underlying model is vital to be able to create a sensible Bayesian model. Consequently, I will always present the linear model formulae along with the analysis.\nTo introduce the philosophical and mathematical differences between classical (frequentist) and Bayesian statistics, based on previous works, we present a provocative yet compelling trend analysis of two hypothetical populations (A vs B). The temporal trend of population A shows very little variability from a very subtle linear decline (\\(n=10\\), \\(\\text{slope}=-0.10\\), \\(\\text{p-value}=0.048\\)). By contrast, the B population appears to decline more dramatically, yet has substantially more variability (\\(n=10\\), \\(\\text{slope}=-10.23\\), \\(\\text{p-value}=0.058\\)). From a traditional frequentist perspective, we would conclude that there is a “significant” relationship in Population A (\\(p\u0026lt;0.05\\)), yet not in Population B (\\(p\u0026gt;0.05\\)). However, if we consider a third population C which is exactly the same as populstion B but with a higher number of observations, then we may end up with a completely different conclusion compared with that based on population B (\\(n=100\\), \\(\\text{slope}=-10.47\\), \\(\\text{p-value}\u0026lt;0.001\\)).\nThe above illustrates a couple of things:\n\rstatistical significance does not necessarily translate into clinical importance. Indeed, population B is declining at nearly \\(10\\) times the rate of population A. That sounds rather important, yet on the basis of the hypothesis test, we would dismiss the decline in population B.\n\rthat a p-value is just the probability of detecting an effect or relationship - what is the probability that the sample size is large enough to pick up a difference.\n\r\rLet us now look at it from a Bayesian perspective, with a focus on population A and B. We would conclude that:\n\rthe mean (plus or minus CI) slopes for Population A and B are \\(-0.1 (-0.21,0)\\) and \\(-10.08 (-20.32,0.57)\\) respectively\n\rthe Bayesian approach allows us to query the posterior distribution is many other ways in order to ask sensible clinical questions. For example, we might consider that a rate of change of \\(5\\)% or greater represents an important biological impact. For population A and B, the probability that the rate is \\(5\\)% or greater is \\(0\\) and \\(0.85\\) respectively.\n\r\r\rLinear regression\rSimple linear regression is a linear modelling process that models a continuous response against a single continuous predictor. The linear model is expressed as:\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i, \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma),\\]\nwhere \\(y_i\\) is the response variable for each of the \\(i=1\\ldots,n\\) observations, \\(\\beta_0\\) is the intercept (value when \\(x=0\\)), \\(\\beta_1\\) is the slope (rate of change in \\(y\\) per unit change in \\(x\\)), \\(x_i\\) is the predictor variable, \\(\\epsilon_i\\) is the residual value (difference between the observed value and the value expected by the model). The parameters of the trendline \\(\\boldsymbol \\beta=(\\beta_0,\\beta_1)\\) are determined by Ordinary Least Squares (OLS) in which the sum of the squared residuals is minimized. A non-zero population slope is indicative of a relationship.\n\r\rData generation\rLets say we had set up an experiment in which we applied a continuous treatment (\\(x\\)) ranging in magnitude from \\(0\\) to \\(16\\) to a total of \\(16\\) sampling units (\\(n=16\\)) and then measured a response (\\(y\\)) from each unit. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 16\r\u0026gt; a \u0026lt;- 40 #intercept\r\u0026gt; b \u0026lt;- -1.5 #slope\r\u0026gt; sigma2 \u0026lt;- 25 #residual variance (sd=5)\r\u0026gt; x \u0026lt;- 1:n #values of the year covariate\r\u0026gt; eps \u0026lt;- rnorm(n, mean = 0, sd = sqrt(sigma2)) #residuals\r\u0026gt; y \u0026lt;- a + b * x + eps #response variable\r\u0026gt; # OR\r\u0026gt; y \u0026lt;- (model.matrix(~x) %*% c(a, b)) + eps\r\u0026gt; data \u0026lt;- data.frame(y, x) #dataset\r\u0026gt; head(data) #print out the first six rows of the data set\ry x\r1 35.69762 1\r2 35.84911 2\r3 43.29354 3\r4 34.35254 4\r5 33.14644 5\r6 39.57532 6\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the linear predictor (single continuous predictor).\nCentering the data\rWhen a linear model contains a covariate (continuous predictor variable) in addition to another predictor (continuous or categorical), it is nearly always advisable that the continuous predictor variables are centered prior to the analysis. Centering is a process by which the mean of a variable is subtracted from each of the values such that the scale of the variable is shifted so as to be centered around \\(0\\). Hence the mean of the new centered variable will be \\(0\\), yet it will retain the same variance.\nThere are multiple reasons for this:\nIt provides some clinical meaning to the \\(y\\)-intercept. Recall that the \\(y\\)-intercept is the value of \\(Y\\) when \\(X\\) is equal to zero. If \\(X\\) is centered, then the \\(y\\)-intercept represents the value of \\(Y\\) at the mid-point of the \\(X\\) range. The \\(y\\)-intercept of an uncentered \\(X\\) typically represents a unreal value of \\(Y\\) (as an \\(X\\) of \\(0\\) is often beyond the reasonable range of values).\n\rIn multiplicative models (in which predictors and their interactions are included), main effects and interaction terms built from centered predictors will not be correlated to one another.\n\rFor more complex models, centering the covariates can increase the likelihood that the modelling engine converges (arrives at a numerically stable and reliable outcome).\n\r\rNote, centering will not effect the slope estimates. In R, centering is easily achieved with the scale function.\n\u0026gt; data \u0026lt;- within(data, {\r+ cx \u0026lt;- as.numeric(scale(x, scale = FALSE))\r+ })\r\u0026gt; head(data)\ry x cx\r1 35.69762 1 -7.5\r2 35.84911 2 -6.5\r3 43.29354 3 -5.5\r4 34.35254 4 -4.5\r5 33.14644 5 -3.5\r6 39.57532 6 -2.5\r\r\rExploratory data analysis\rNormality\rEstimation and inference testing in linear regression assumes that the response is normally distributed in each of the populations. In this case, the populations are all possible measurements that could be collected at each level of \\(x\\) - hence there are \\(16\\) populations. Typically however, we only collect a single observation from each population (as is also the case here). How then can be evaluate whether each of these populations are likely to have been normal? For a given response, the population distributions should follow much the same distribution shapes. Therefore provided the single samples from each population are unbiased representations of those populations, a boxplot of all observations should reflect the population distributions.\n\rHomogeneity of variance\rSimple linear regression also assumes that each of the populations are equally varied. Actually, it is prospect of a relationship between the mean and variance of \\(y\\)-values across x-values that is of the greatest concern. Strictly the assumption is that the distribution of \\(y\\) values at each \\(x\\) value are equally varied and that there is no relationship between mean and variance. However, as we only have a single \\(y\\)-value for each \\(x\\)-value, it is difficult to directly determine whether the assumption of homogeneity of variance is likely to have been violated (mean of one value is meaningless and variability can’t be assessed from a single value). If we then plot the residuals (difference between observed values and those predicted by the trendline) against the predict values and observe a definite presence of a pattern, then it is indicative of issues with the assumption of homogeneity of variance.\nHence looking at the spread of values around a trendline on a scatterplot of \\(y\\) against \\(x\\) is a useful way of identifying gross violations of homogeneity of variance. Residual plots provide an even better diagnostic. The presence of a wedge shape is indicative that the population mean and variance are related.\n\rLinearity\rLinear regression fits a straight (linear) line through the data. Therefore, prior to fitting such a model, it is necessary to establish whether this really is the most sensible way of describing the relationship. That is, does the relationship appear to be linearly related or could some other non-linear function describe the relationship better. Scatterplots and residual plots are useful diagnostics.\n\rModel assumptions\rThe typical assumptions which need to be checked when fitting a standard linear regression model are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages\n\rThe response variable (and thus the residuals) should be normally distributed\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately)\n\rThe relationship between the linear predictor (right hand side of the regression formula) and the link function should be linear. A scatterplot with smoother can be useful for identifying possible non-linearity.\n\r\rSo lets explore normality, homogeneity of variances and linearity by constructing a scatterplot of the relationship between the response (\\(y\\)) and the predictor (\\(x\\)). We will also include a range of smoothers (linear and lowess) and marginal boxplots on the scatterplot to assist in exploring linearity and normality respectively.\n\u0026gt; # scatterplot\r\u0026gt; library(car)\r\u0026gt; scatterplot(y ~ x, data)\rConclusions:\nThere is no evidence that the response variable is non-normal. The spread of values around the trendline seems fairly even (hence it there is no evidence of non-homogeneity). The data seems well represented by the linear trendline. Furthermore, the lowess smoother does not appear to have a consistent shift trajectory. Obvious violations could be addressed either by:\n\rConsider a non-linear linear predictor (such as a polynomial, spline or other non-linear function)\n\rTransform the scale of the response variables (e.g. to address normality)\n\r\r\r\rModel fitting\rThe purpose of fitting a model in this case is to explore the relationship between \\(y\\) and \\(x\\). Since both \\(y\\) and \\(x\\) are continuous, a simple regression line is a good start. The observed response (\\(y_i\\)) are assumed to be drawn from a normal distribution with a given mean (\\(\\mu\\)) and standard deviation (\\(\\sigma\\)). The expected values (\\(\\mu\\)) are themselves determined by the linear predictor (\\(\\beta_0+\\beta_1\\)). In this case, \\(\\beta_0\\) represents the \\(y\\)-intercept (value of \\(y\\) when \\(x\\) is equal to zero) and \\(\\beta_1\\) represents the rate of change in \\(y\\) for every unit change in \\(x\\) (the effect).\nNote that in this form, the \\(y\\)-intercept is of little interest. Indeed for many applications, a value of x would be outside the domain of the collected data, outside the logical bounds of the actual variable or else outside the domain of interest. If however, we center the predictor variable (by subtracting the mean of \\(x\\) from each \\(x\\), then the \\(y\\)-intercept represents the value of \\(y\\) at the average value of \\(x\\). This certainly has more meaning. Note that centering the predictor does not effect the estimate of slope. MCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying “uninformative” priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important.\nFor this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (1000) for both the intercept and the treatment effect and a wide half-cauchy (\\(\\text{scale}=25\\)) for the standard deviation.\n\\[ y_i \\sim \\text{Normal}(\\mu_i, \\sigma),\\]\nwhere \\(\\mu_i=\\beta_0+\\beta_1x_i\\). Priors are specified as: \\(\\boldsymbol \\beta \\sim \\text{Normal}(0,1000)\\) and \\(\\sigma \\sim \\text{Cauchy}(0,25)\\). We will explore Bayesian modelling of simple linear regression using JAGS. Remember that in this software normal distributions are specified in terms of precision \\(\\tau\\) rather than standard deviation \\(\\sigma\\), where \\(\\tau=\\frac{1}{\\sigma^2}\\). In addition, we will derive the following quantities.\n\rThe percentage decline \\(\\left(100 \\times \\frac{(\\text{max}(x) - \\text{min}(x))\\beta_1 + \\text{min}(y)}{\\text{min}(y)} \\right)\\)\n\rThe probability that \\(y\\) decline by more than \\(25\\)%\n\rThe finite-population variance components\n\r\r\u0026gt; modelString = \u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- beta0+beta1*x[i]\r+ y.err[i] \u0026lt;- y[i] - mu[i]\r+ }\r+ + #Priors\r+ beta0 ~ dnorm(0.01,1.0E-6)\r+ beta1 ~ dnorm(0,1.0E-6)\r+ tau \u0026lt;- 1 / (sigma * sigma)\r+ sigma~dunif(0,100)\r+ + #Other Derived parameters + p.decline \u0026lt;- 1-step(beta1)\r+ ymin\u0026lt;-beta0+beta1*min(x) + xrange \u0026lt;- max(x) - min(x) + decline \u0026lt;- 100*((xrange*beta1)+ymin)/ymin + p.decline25 \u0026lt;- step(decline-25)\r+ + #finite-population variance components\r+ sd.x \u0026lt;- abs(beta1)*sd(x[])\r+ sd.resid \u0026lt;- sd(y.err)\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;ttestModel.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). As input, JAGS will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; data.list \u0026lt;- with(data, list(y = y, x = x, n = nrow(data)))\r\u0026gt; data.list\r$y\r[1] 35.69762 35.84911 43.29354 34.35254 33.14644 39.57532 31.80458 21.67469\r[9] 23.06574 22.77169 29.62041 23.79907 22.50386 19.55341 14.72079 24.93457\r$x\r[1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\r$n\r[1] 16\rDefine the initial values for the chain. Reasonable starting points can be gleaned from the data themselves.\n\u0026gt; inits \u0026lt;- rep(list(list(beta0 = mean(data$y), beta1 = diff(tapply(data$y,\r+ data$x, mean)), sigma = sd(data$y))), 2)\rDefine the nodes (parameters and derivatives) to monitor.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;, \u0026quot;sigma\u0026quot;)\rDefine the chain parameters.\n\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 3000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 15000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 10500\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rWhen using the jags function (R2jags package), it is not necessary to provide initial values. However, if they are to be supplied, the inital values must be provided as a list of the same length as the number of chains. Then print the results.\n\u0026gt; data.r2jags \u0026lt;- jags(data = data.list, inits = NULL, parameters.to.save = params, model.file = \u0026quot;ttestModel.txt\u0026quot;, n.chains = nChains, n.iter = nIter, n.burnin = burnInSteps, n.thin = thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 16\rUnobserved stochastic nodes: 3\rTotal graph size: 109\rInitializing model\r\u0026gt; \u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 40.332 2.779 34.814 38.547 40.341 42.142 45.768 1.001 15000\rbeta1 -1.390 0.283 -1.957 -1.571 -1.390 -1.209 -0.822 1.001 15000\rsigma 5.187 1.125 3.549 4.399 5.009 5.772 7.848 1.001 14000\rdeviance 96.319 2.919 93.005 94.208 95.578 97.595 103.875 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 4.3 and DIC = 100.6\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example. When there are a lot of parameters, this can result in a very large number of traceplots. To focus on just certain parameters, e.g. \\(\\boldsymbol \\beta\\).\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\r\u0026gt; traplot(data.r2jags, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\u0026gt; data.mcmc = as.mcmc(data.r2jags)\r\u0026gt; #Raftery diagnostic\r\u0026gt; raftery.diag(data.mcmc)\r[[1]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta0 3 4115 3746 1.10 beta1 2 3855 3746 1.03 deviance 3 4026 3746 1.07 sigma 4 4907 3746 1.31 [[2]]\rQuantile (q) = 0.025\rAccuracy (r) = +/- 0.005\rProbability (s) = 0.95 Burn-in Total Lower bound Dependence\r(M) (N) (Nmin) factor (I)\rbeta0 2 3938 3746 1.05 beta1 2 3770 3746 1.01 deviance 2 3811 3746 1.02 sigma 4 4853 3746 1.30 \rThe Raftery diagnostics for each chain estimate that we would require no more than \\(5000\\) samples to reach the specified level of confidence in convergence. As we have \\(10500\\) samples, we can be confidence that convergence has occurred.\n\u0026gt; #Autocorrelation diagnostic\r\u0026gt; autocorr.diag(data.mcmc)\rbeta0 beta1 deviance sigma\rLag 0 1.000000000 1.0000000000 1.000000000 1.00000000\rLag 1 -0.007010696 0.0009369893 0.397147648 0.46491253\rLag 5 0.002086800 0.0011849092 0.049133264 0.05413994\rLag 10 0.005430778 0.0054667236 0.008226042 0.01218053\rLag 50 -0.011848951 -0.0054465800 -0.014357351 -0.01271746\rA lag of 10 appears to be sufficient to avoid autocorrelation (poor mixing).\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model.\nAlthough residuals can be computed directly within R2jags, we can calculate them manually from the posteriors to be consistent across other approaches.\n\u0026gt; library(ggplot2)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rResiduals against predictors\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data$x))\rAnd now for studentized residuals\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit))\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i,\r+ ], mcmc[i, \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep),\r+ fill = \u0026quot;Model\u0026quot;), alpha = 0.5) + geom_density(data = data,\r+ aes(x = y, fill = \u0026quot;Obs\u0026quot;), alpha = 0.5)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 10500 iterations (first 3000 discarded)\rn.sims = 15000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 40.332 2.779 34.814 38.547 40.341 42.142 45.768 1.001 15000\rbeta1 -1.390 0.283 -1.957 -1.571 -1.390 -1.209 -0.822 1.001 15000\rsigma 5.187 1.125 3.549 4.399 5.009 5.772 7.848 1.001 14000\rdeviance 96.319 2.919 93.005 94.208 95.578 97.595 103.875 1.001 15000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 4.3 and DIC = 100.6\rDIC is an estimate of expected predictive error (lower deviance is better).\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 4 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 beta0 40.3 2.78 34.9 45.8 2 beta1 -1.39 0.283 -1.94 -0.812\r3 deviance 96.3 2.92 92.8 102. 4 sigma 5.19 1.13 3.31 7.38 \rA one unit increase in \\(x\\) is associated with a \\(-1.39\\) change in \\(y\\). That is, \\(y\\) declines at a rate of \\(-1.39\\) per unit increase in \\(x\\). The \\(95\\)% confidence interval for the slope does not overlap with \\(0\\) implying a significant effect of \\(x\\) on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta1\u0026quot;)])\r[1] 0\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group. We do this by loading functions in the package dplyr.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = seq(min(data$x, na.rm = TRUE), max(data$x, na.rm = TRUE),\r+ len = 1000))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data, aes(y = y,\r+ x = x), color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X\u0026quot;) +\r+ theme_classic()\r\rEffect sizes\rLets explore a range of effect sizes:\n\rRaw effect size between the largest and smallest \\(x\\)\n\rCohen’s D\n\rPercentage change between the largest and smallest \\(x\\)\n\rFractional change between the largest and smallest \\(x\\)\n\rProbability that a change in \\(x\\) is associated with greater than a \\(25\\)% decline in \\(y\\).\n\r\rClearly, in order to explore this inference, we must first express the change in \\(y\\) as a percentage. This in turn requires us to calculate start and end points from which to calculate the magnitude of the effect (amount of decline in \\(y\\)) as well as the percentage decline. Hence, we start by predicting the distribution of \\(y\\) at the lowest and highest values of \\(x\\).\n\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; newdata = data.frame(x = c(min(data$x, na.rm = TRUE), max(data$x, na.rm = TRUE)))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## Raw effect size\r\u0026gt; (RES = tidyMCMC(as.mcmc(fit[, 2] - fit[, 1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -20.9 4.24 -29.2 -12.2\r\u0026gt; ## Cohen\u0026#39;s D\r\u0026gt; cohenD = (fit[, 2] - fit[, 1])/mcmc[, \u0026quot;sigma\u0026quot;]\r\u0026gt; (cohenDES = tidyMCMC(as.mcmc(cohenD), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -4.19 1.14 -6.40 -1.94\r\u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ESp = 100 * (fit[, 2] - fit[, 1])/fit[, 1]\r\u0026gt; (PES = tidyMCMC(as.mcmc(ESp), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -53.2 8.25 -69.4 -36.5\r\u0026gt; # Probability that the effect is greater than 25% (a decline of \u0026gt;25%)\r\u0026gt; sum(-1 * ESp \u0026gt; 25)/length(ESp)\r[1] 0.9964667\r\u0026gt; ## fractional change\r\u0026gt; fit = fit[fit[, 2] \u0026gt; 0, ]\r\u0026gt; (FES = tidyMCMC(as.mcmc(fit[, 2]/fit[, 1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.468 0.0825 0.306 0.635\rConclusions\n\rOn average, \\(Y\\) declines by \\(-20.9\\) over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between \\(-29.2\\) and \\(-12.2\\).\n\rThe Cohen’s D associated with a change over the observed range of \\(x\\) is \\(-4.19\\).\n\rOn average, \\(Y\\) declines by \\(-53.2\\)% over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between \\(-69.4\\)% and \\(-36.5\\)%.\n\rThe probability that \\(Y\\) declines by more than \\(25\\)% over the observed range of \\(x\\) is \\(0.996\\).\n\rOn average, \\(Y\\) declines by a factor of \\(0.468\\)% over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between a factor of \\(0.306\\)% and \\(0.635\\)%.\n\r\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 6.62 1.35 3.87 9.26\r2 sd.resid 4.72 0.279 4.54 5.28\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 59.3 5.71 46.6 63.9\r2 sd.resid 40.7 5.71 36.1 53.4\rApproximately \\(59.3\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta1\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.649 0.106 0.433 0.758\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ x, data))\rCall:\rlm(formula = y ~ x, data = data)\rResiduals:\rMin 1Q Median 3Q Max -7.5427 -3.3510 -0.3309 2.0411 7.5791 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.3328 2.4619 16.382 1.58e-10 ***\rx -1.3894 0.2546 -5.457 8.45e-05 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 4.695 on 14 degrees of freedom\rMultiple R-squared: 0.6802, Adjusted R-squared: 0.6574 F-statistic: 29.78 on 1 and 14 DF, p-value: 8.448e-05\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1580695994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580695994,"objectID":"6a51dbc0c0120e11a262bc317c7fdc6e","permalink":"/jags/simple-linear-regression-jags/simple-linear-regression-jags/","publishdate":"2020-02-02T21:13:14-05:00","relpermalink":"/jags/simple-linear-regression-jags/simple-linear-regression-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","linear regression"],"title":"Simple Linear Regression - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","linear regression","STAN"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nOverview\rIntroduction\rMany clinicians get a little twitchy and nervous around mathematical and statistical formulae and nomenclature. Whilst it is possible to perform basic statistics without too much regard for the actual equation (model) being employed, as the complexity of the analysis increases, the need to understand the underlying model becomes increasingly important. Moreover, model specification in BUGS/JAGS/STAN (the language used to program Bayesian modelling) aligns very closely to the underlying formulae. Hence a good understanding of the underlying model is vital to be able to create a sensible Bayesian model. Consequently, I will always present the linear model formulae along with the analysis.\nTo introduce the philosophical and mathematical differences between classical (frequentist) and Bayesian statistics, based on previous works, we present a provocative yet compelling trend analysis of two hypothetical populations (A vs B). The temporal trend of population A shows very little variability from a very subtle linear decline (\\(n=10\\), \\(\\text{slope}=-0.10\\), \\(\\text{p-value}=0.048\\)). By contrast, the B population appears to decline more dramatically, yet has substantially more variability (\\(n=10\\), \\(\\text{slope}=-10.23\\), \\(\\text{p-value}=0.058\\)). From a traditional frequentist perspective, we would conclude that there is a “significant” relationship in Population A (\\(p\u0026lt;0.05\\)), yet not in Population B (\\(p\u0026gt;0.05\\)). However, if we consider a third population C which is exactly the same as populstion B but with a higher number of observations, then we may end up with a completely different conclusion compared with that based on population B (\\(n=100\\), \\(\\text{slope}=-10.47\\), \\(\\text{p-value}\u0026lt;0.001\\)).\nThe above illustrates a couple of things:\n\rstatistical significance does not necessarily translate into clinical importance. Indeed, population B is declining at nearly \\(10\\) times the rate of population A. That sounds rather important, yet on the basis of the hypothesis test, we would dismiss the decline in population B.\n\rthat a p-value is just the probability of detecting an effect or relationship - what is the probability that the sample size is large enough to pick up a difference.\n\r\rLet us now look at it from a Bayesian perspective, with a focus on population A and B. We would conclude that:\n\rthe mean (plus or minus CI) slopes for Population A and B are \\(-0.1 (-0.21,0)\\) and \\(-10.08 (-20.32,0.57)\\) respectively\n\rthe Bayesian approach allows us to query the posterior distribution is many other ways in order to ask sensible clinical questions. For example, we might consider that a rate of change of \\(5\\)% or greater represents an important biological impact. For population A and B, the probability that the rate is \\(5\\)% or greater is \\(0\\) and \\(0.85\\) respectively.\n\r\r\rLinear regression\rSimple linear regression is a linear modelling process that models a continuous response against a single continuous predictor. The linear model is expressed as:\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon_i, \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma),\\]\nwhere \\(y_i\\) is the response variable for each of the \\(i=1\\ldots,n\\) observations, \\(\\beta_0\\) is the intercept (value when \\(x=0\\)), \\(\\beta_1\\) is the slope (rate of change in \\(y\\) per unit change in \\(x\\)), \\(x_i\\) is the predictor variable, \\(\\epsilon_i\\) is the residual value (difference between the observed value and the value expected by the model). The parameters of the trendline \\(\\boldsymbol \\beta=(\\beta_0,\\beta_1)\\) are determined by Ordinary Least Squares (OLS) in which the sum of the squared residuals is minimized. A non-zero population slope is indicative of a relationship.\n\r\rData generation\rLets say we had set up an experiment in which we applied a continuous treatment (\\(x\\)) ranging in magnitude from \\(0\\) to \\(16\\) to a total of \\(16\\) sampling units (\\(n=16\\)) and then measured a response (\\(y\\)) from each unit. As this section is mainly about the generation of artificial data (and not specifically about what to do with the data), understanding the actual details are optional and can be safely skipped.\n\u0026gt; set.seed(123)\r\u0026gt; n \u0026lt;- 16\r\u0026gt; a \u0026lt;- 40 #intercept\r\u0026gt; b \u0026lt;- -1.5 #slope\r\u0026gt; sigma2 \u0026lt;- 25 #residual variance (sd=5)\r\u0026gt; x \u0026lt;- 1:n #values of the year covariate\r\u0026gt; eps \u0026lt;- rnorm(n, mean = 0, sd = sqrt(sigma2)) #residuals\r\u0026gt; y \u0026lt;- a + b * x + eps #response variable\r\u0026gt; # OR\r\u0026gt; y \u0026lt;- (model.matrix(~x) %*% c(a, b)) + eps\r\u0026gt; data \u0026lt;- data.frame(y, x) #dataset\r\u0026gt; head(data) #print out the first six rows of the data set\ry x\r1 35.69762 1\r2 35.84911 2\r3 43.29354 3\r4 34.35254 4\r5 33.14644 5\r6 39.57532 6\rWith these sort of data, we are primarily interested in investigating whether there is a relationship between the continuous response variable and the linear predictor (single continuous predictor).\nCentering the data\rWhen a linear model contains a covariate (continuous predictor variable) in addition to another predictor (continuous or categorical), it is nearly always advisable that the continuous predictor variables are centered prior to the analysis. Centering is a process by which the mean of a variable is subtracted from each of the values such that the scale of the variable is shifted so as to be centered around \\(0\\). Hence the mean of the new centered variable will be \\(0\\), yet it will retain the same variance.\nThere are multiple reasons for this:\nIt provides some clinical meaning to the \\(y\\)-intercept. Recall that the \\(y\\)-intercept is the value of \\(Y\\) when \\(X\\) is equal to zero. If \\(X\\) is centered, then the \\(y\\)-intercept represents the value of \\(Y\\) at the mid-point of the \\(X\\) range. The \\(y\\)-intercept of an uncentered \\(X\\) typically represents a unreal value of \\(Y\\) (as an \\(X\\) of \\(0\\) is often beyond the reasonable range of values).\n\rIn multiplicative models (in which predictors and their interactions are included), main effects and interaction terms built from centered predictors will not be correlated to one another.\n\rFor more complex models, centering the covariates can increase the likelihood that the modelling engine converges (arrives at a numerically stable and reliable outcome).\n\r\rNote, centering will not effect the slope estimates. In R, centering is easily achieved with the scale function.\n\u0026gt; data \u0026lt;- within(data, {\r+ cx \u0026lt;- as.numeric(scale(x, scale = FALSE))\r+ })\r\u0026gt; head(data)\ry x cx\r1 35.69762 1 -7.5\r2 35.84911 2 -6.5\r3 43.29354 3 -5.5\r4 34.35254 4 -4.5\r5 33.14644 5 -3.5\r6 39.57532 6 -2.5\r\r\rExploratory data analysis\rNormality\rEstimation and inference testing in linear regression assumes that the response is normally distributed in each of the populations. In this case, the populations are all possible measurements that could be collected at each level of \\(x\\) - hence there are \\(16\\) populations. Typically however, we only collect a single observation from each population (as is also the case here). How then can be evaluate whether each of these populations are likely to have been normal? For a given response, the population distributions should follow much the same distribution shapes. Therefore provided the single samples from each population are unbiased representations of those populations, a boxplot of all observations should reflect the population distributions.\n\rHomogeneity of variance\rSimple linear regression also assumes that each of the populations are equally varied. Actually, it is prospect of a relationship between the mean and variance of \\(y\\)-values across x-values that is of the greatest concern. Strictly the assumption is that the distribution of \\(y\\) values at each \\(x\\) value are equally varied and that there is no relationship between mean and variance. However, as we only have a single \\(y\\)-value for each \\(x\\)-value, it is difficult to directly determine whether the assumption of homogeneity of variance is likely to have been violated (mean of one value is meaningless and variability can’t be assessed from a single value). If we then plot the residuals (difference between observed values and those predicted by the trendline) against the predict values and observe a definite presence of a pattern, then it is indicative of issues with the assumption of homogeneity of variance.\nHence looking at the spread of values around a trendline on a scatterplot of \\(y\\) against \\(x\\) is a useful way of identifying gross violations of homogeneity of variance. Residual plots provide an even better diagnostic. The presence of a wedge shape is indicative that the population mean and variance are related.\n\rLinearity\rLinear regression fits a straight (linear) line through the data. Therefore, prior to fitting such a model, it is necessary to establish whether this really is the most sensible way of describing the relationship. That is, does the relationship appear to be linearly related or could some other non-linear function describe the relationship better. Scatterplots and residual plots are useful diagnostics.\n\rModel assumptions\rThe typical assumptions which need to be checked when fitting a standard linear regression model are:\n\rAll of the observations are independent - this must be addressed at the design and collection stages\n\rThe response variable (and thus the residuals) should be normally distributed\n\rThe response variable should be equally varied (variance should not be related to mean as these are supposed to be estimated separately)\n\rThe relationship between the linear predictor (right hand side of the regression formula) and the link function should be linear. A scatterplot with smoother can be useful for identifying possible non-linearity.\n\r\rSo lets explore normality, homogeneity of variances and linearity by constructing a scatterplot of the relationship between the response (\\(y\\)) and the predictor (\\(x\\)). We will also include a range of smoothers (linear and lowess) and marginal boxplots on the scatterplot to assist in exploring linearity and normality respectively.\n\u0026gt; # scatterplot\r\u0026gt; library(car)\r\u0026gt; scatterplot(y ~ x, data)\rConclusions:\nThere is no evidence that the response variable is non-normal. The spread of values around the trendline seems fairly even (hence it there is no evidence of non-homogeneity). The data seems well represented by the linear trendline. Furthermore, the lowess smoother does not appear to have a consistent shift trajectory. Obvious violations could be addressed either by:\n\rConsider a non-linear linear predictor (such as a polynomial, spline or other non-linear function)\n\rTransform the scale of the response variables (e.g. to address normality)\n\r\r\r\rModel fitting\rWhilst Gibbs sampling provides an elegantly simple MCMC sampling routine, very complex hierarchical models can take enormous numbers of iterations (often prohibitory large) to converge on a stable posterior distribution. To address this, Andrew Gelman (and other collaborators) have implemented a variation on Hamiltonian Monte Carlo (HMC): a sampler that selects subsequent samples in a way that reduces the correlation between samples, thereby speeding up convergence) called the No-U-Turn (NUTS) sampler. All of these developments are brought together into a tool called Stan. By design (to appeal to the vast BUGS/JAGS users), STAN models are defined in a manner reminiscent of BUGS/JAGS. STAN first converts these models into C++ code which is then compiled to allow very rapid computation. Consistent with this, the model must be accompanied by variable declarations for all inputs and parameters.\nNote the following important characteristics of a STAN code:\n\rA STAN model file comprises a number of blocks (not all of which are compulsory).\n\rThe STAN language is an intermediary between (R/BUGS and c++) and requires all types (integers, vectors, matrices etc) to be declared prior to use and it uses c++ commenting (// and /* */)\n\rCode order is important, objects must be declared before they are used. When a type is declared in one block, it is available in subsequent blocks.\n\r\r\rdata {\r// declare the input data / parameters\r}\rtransformed data {\r// optional - for transforming/scaling input data\r}\rparameters {\r// define model parameters\r}\rtransformed parameters {\r// optional - for deriving additional non-model parameters\r// note however, as they are part of the sampling chain\r// transformed parameters slow sampling down.\r}\rmodel {\r// specifying priors and likelihood as well as the linear predictor\r}\rgenerated quantities {\r// optional - derivatives (posteriors) of the samples\r}\r\rThe minimum model in STAN required to fit the above simple regression follows. Note the following modifications from the model defined in JAGS:\n\rThe normal distribution is defined by standard deviation rather than precision\n\rRather than using a uniform prior for \\(\\sigma\\), I am using a half-Cauchy\n\r\rWe now translate the likelihood model into STAN code.\n\u0026gt; modelString = \u0026quot;\r+ data {\r+ int\u0026lt;lower=0\u0026gt; n;\r+ vector [n] y;\r+ vector [n] x;\r+ }\r+ parameters {\r+ real beta0;\r+ real beta;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ model {\r+ vector [n] mu;\r+ #Priors\r+ beta0 ~ normal(0,10000);\r+ beta ~ normal(0,10000);\r+ sigma ~ cauchy(0,5);\r+ + mu = beta0+beta*x;\r+ + #Likelihood\r+ y~normal(mu,sigma);\r+ }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelString, con = \u0026quot;linregModel.stan\u0026quot;)\rThe No-U-Turn sampler operates much more efficiently if all predictors are centered. Although it is possible to pre-center all predictors that are passed to STAN, it is then often necessary to later convert back to the original scale for graphing and further analyses. Since centering is a routine procedure, arguably it should be built into the STAN we generate. Furthermore, we should also include the back-scaling as well. In this version, the data are to be supplied as a model matrix (so as to leverage various vectorized and matrix multiplier routines). The transformed data block is used to center the non-intercept columns of the predictor model matrix. The model is fit on centered data thereby generating a slope and intercept. This intercept parameter is also expressed back on the non-centered scale (generated properties block).\n\u0026gt; modelStringv2 = \u0026quot;\r+ data { + int\u0026lt;lower=1\u0026gt; n; // total number of observations + vector[n] Y; // response variable + int\u0026lt;lower=1\u0026gt; nX; // number of effects + matrix[n, nX] X; // model matrix + } + transformed data { + matrix[n, nX - 1] Xc; // centered version of X + vector[nX - 1] means_X; // column means of X before centering + + for (i in 2:nX) { + means_X[i - 1] = mean(X[, i]); + Xc[, i - 1] = X[, i] - means_X[i - 1]; + } + } + parameters { + vector[nX-1] beta; // population-level effects + real cbeta0; // center-scale intercept + real\u0026lt;lower=0\u0026gt; sigma; // residual SD + } + transformed parameters { + } + model { + vector[n] mu; + mu = Xc * beta + cbeta0; + // prior specifications + beta ~ normal(0, 100); + cbeta0 ~ normal(0, 100); + sigma ~ cauchy(0, 5); + // likelihood contribution + Y ~ normal(mu, sigma); + } + generated quantities { + real beta0; // population-level intercept + beta0 = cbeta0 - dot_product(means_X, beta); + }\r+ + \u0026quot;\r\u0026gt; ## write the model to a stan file \u0026gt; writeLines(modelStringv2, con = \u0026quot;linregModelv2.stan\u0026quot;)\rArrange the data as a list (as required by STAN). As input, STAN will need to be supplied with: the response variable, the predictor variable, the total number of observed items. This all needs to be contained within a list object. We will create two data lists, one for each of the hypotheses.\n\u0026gt; Xmat \u0026lt;- model.matrix(~x, data = data)\r\u0026gt; data.list \u0026lt;- with(data, list(Y = y, X = Xmat, nX = ncol(Xmat), n = nrow(data)))\r\u0026gt; data.list\r$Y\r[1] 35.69762 35.84911 43.29354 34.35254 33.14644 39.57532 31.80458 21.67469\r[9] 23.06574 22.77169 29.62041 23.79907 22.50386 19.55341 14.72079 24.93457\r$X\r(Intercept) x\r1 1 1\r2 1 2\r3 1 3\r4 1 4\r5 1 5\r6 1 6\r7 1 7\r8 1 8\r9 1 9\r10 1 10\r11 1 11\r12 1 12\r13 1 13\r14 1 14\r15 1 15\r16 1 16\rattr(,\u0026quot;assign\u0026quot;)\r[1] 0 1\r$nX\r[1] 2\r$n\r[1] 16\rDefine the initial values for the chain. Reasonable starting points can be gleaned from the data themselves.\n\u0026gt; inits \u0026lt;- rep(list(list(beta0 = mean(data$y), beta1 = diff(tapply(data$y,\r+ data$x, mean)), sigma = sd(data$y))), 2)\rDefine the nodes (parameters and derivatives) to monitor.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta\u0026quot;,\u0026quot;beta0\u0026quot;, \u0026quot;cbeta0\u0026quot;, \u0026quot;sigma\u0026quot;)\rDefine the chain parameters.\n\u0026gt; nChains = 2\r\u0026gt; burnInSteps = 1000\r\u0026gt; thinSteps = 1\r\u0026gt; numSavedSteps = 3000 #across all chains\r\u0026gt; nIter = ceiling(burnInSteps + (numSavedSteps * thinSteps)/nChains)\r\u0026gt; nIter\r[1] 2500\rStart the STAN model (check the model, load data into the model, specify the number of chains and compile the model). Load the rstan package.\n\u0026gt; library(rstan)\rWhen using the stan function (rstan package), it is not necessary to provide initial values. However, if they are to be supplied, the inital values must be provided as a list of the same length as the number of chains.\n\u0026gt; data.rstan \u0026lt;- stan(data = data.list, file = \u0026quot;linregModelv2.stan\u0026quot;, + chains = nChains, iter = nIter, warmup = burnInSteps,\r+ thin = thinSteps, save_dso = TRUE)\rSAMPLING FOR MODEL \u0026#39;linregModelv2\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 1: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 1: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 1: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 1: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 1: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 1: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 1: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 1: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 1: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 1: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 1: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.027 seconds (Warm-up)\rChain 1: 0.035 seconds (Sampling)\rChain 1: 0.062 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;linregModelv2\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 2500 [ 0%] (Warmup)\rChain 2: Iteration: 250 / 2500 [ 10%] (Warmup)\rChain 2: Iteration: 500 / 2500 [ 20%] (Warmup)\rChain 2: Iteration: 750 / 2500 [ 30%] (Warmup)\rChain 2: Iteration: 1000 / 2500 [ 40%] (Warmup)\rChain 2: Iteration: 1001 / 2500 [ 40%] (Sampling)\rChain 2: Iteration: 1250 / 2500 [ 50%] (Sampling)\rChain 2: Iteration: 1500 / 2500 [ 60%] (Sampling)\rChain 2: Iteration: 1750 / 2500 [ 70%] (Sampling)\rChain 2: Iteration: 2000 / 2500 [ 80%] (Sampling)\rChain 2: Iteration: 2250 / 2500 [ 90%] (Sampling)\rChain 2: Iteration: 2500 / 2500 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.028 seconds (Warm-up)\rChain 2: 0.034 seconds (Sampling)\rChain 2: 0.062 seconds (Total)\rChain 2: \r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.rstan)\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\r\u0026gt; denplot(mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;,\u0026quot;cbeta0\u0026quot;,\u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;,\u0026quot;cbeta0\u0026quot;,\u0026quot;sigma\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space. We can also look at just the density plot computed from the bayesplot package.\n\u0026gt; library(bayesplot)\r\u0026gt; mcmc_dens(as.array(data.rstan))\rDensity plots sugggest mean or median would be appropriate to describe the fixed posteriors and median is appropriate for the \\(\\sigma\\) posterior.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model.\nAlthough residuals can be computed directly within rstan, we can calculate them manually from the posteriors to be consistent across other approaches.\n\u0026gt; library(ggplot2)\r\u0026gt; mcmc = as.matrix(data.rstan)[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rResiduals against predictors\n\u0026gt; mcmc = as.matrix(data.rstan)[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = data$x))\rAnd now for studentized residuals\n\u0026gt; mcmc = as.matrix(data.rstan)[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; sresid = resid/sd(resid)\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = sresid, x = fit))\rFor this simple model, the studentized residuals yield the same pattern as the raw residuals (or the Pearson residuals for that matter). Lets see how well data simulated from the model reflects the raw data.\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; # generate a model matrix\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## draw samples from this model\r\u0026gt; yRep = sapply(1:nrow(mcmc), function(i) rnorm(nrow(data), fit[i, ], mcmc[i,\r+ \u0026quot;sigma\u0026quot;]))\r\u0026gt; ggplot() + geom_density(data = NULL, aes(x = as.vector(yRep), fill = \u0026quot;Model\u0026quot;),\r+ alpha = 0.5) + geom_density(data = data, aes(x = y, fill = \u0026quot;Obs\u0026quot;),\r+ alpha = 0.5)\r\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; summary(data.rstan)\r$summary\rmean se_mean sd 2.5% 25% 50%\rbeta[1] -1.386241 0.005409925 0.2628701 -1.928032 -1.556143 -1.390692\rcbeta0 28.526455 0.025241285 1.2563021 26.053580 27.679148 28.517154\rsigma 4.938850 0.022620333 0.9747690 3.433777 4.255653 4.800261\rbeta0 40.309502 0.051054981 2.5104697 35.305689 38.660487 40.321813\rlp__ -32.392865 0.038016453 1.2930877 -35.617366 -32.976932 -32.063282\r75% 97.5% n_eff Rhat\rbeta[1] -1.216324 -0.8695824 2361.021 1.0010917\rcbeta0 29.358476 31.0250363 2477.224 1.0000293\rsigma 5.472441 7.1969472 1856.972 1.0020160\rbeta0 41.901624 45.2722391 2417.874 0.9999759\rlp__ -31.431890 -30.9164925 1156.945 1.0014468\r$c_summary\r, , chains = chain:1\rstats\rparameter mean sd 2.5% 25% 50% 75%\rbeta[1] -1.395354 0.2663176 -1.938168 -1.570786 -1.397259 -1.224694\rcbeta0 28.499907 1.2671111 25.965301 27.665662 28.499904 29.339459\rsigma 4.974297 1.0354718 3.403207 4.248213 4.814835 5.545663\rbeta0 40.360414 2.4961956 35.294178 38.744797 40.418903 41.921210\rlp__ -32.448925 1.3633114 -35.893989 -33.121738 -32.073215 -31.438407\rstats\rparameter 97.5%\rbeta[1] -0.8701744\rcbeta0 31.0552336\rsigma 7.3827875\rbeta0 45.2489270\rlp__ -30.9157752\r, , chains = chain:2\rstats\rparameter mean sd 2.5% 25% 50% 75%\rbeta[1] -1.377128 0.2591452 -1.911379 -1.544377 -1.385973 -1.203797\rcbeta0 28.553004 1.2452556 26.163699 27.717229 28.540569 29.378535\rsigma 4.903404 0.9089921 3.457094 4.261745 4.785809 5.423194\rbeta0 40.258590 2.5244684 35.319104 38.595264 40.250020 41.864964\rlp__ -32.336805 1.2167003 -35.405972 -32.883087 -32.042686 -31.424106\rstats\rparameter 97.5%\rbeta[1] -0.8699495\rcbeta0 31.0050930\rsigma 7.0778361\rbeta0 45.2803661\rlp__ -30.9173256\r\u0026gt; \u0026gt; # OR\r\u0026gt; library(broom)\r\u0026gt; tidyMCMC(data.rstan, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;, rhat = TRUE, ess = TRUE)\r# A tibble: 4 x 7\rterm estimate std.error conf.low conf.high rhat ess\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt;\r1 beta[1] -1.39 0.263 -1.90 -0.856 1.00 2361\r2 cbeta0 28.5 1.26 26.2 31.1 1.00 2477\r3 sigma 4.94 0.975 3.31 6.96 1.00 1857\r4 beta0 40.3 2.51 35.3 45.2 1.000 2418\rA one unit increase in \\(x\\) is associated with a \\(-1.39\\) change in \\(y\\). That is, \\(y\\) declines at a rate of \\(-1.39\\) per unit increase in \\(x\\). The \\(95\\)% confidence interval for the slope does not overlap with \\(0\\) implying a significant effect of \\(x\\) on \\(y\\). While workers attempt to become comfortable with a new statistical framework, it is only natural that they like to evaluate and comprehend new structures and output alongside more familiar concepts. One way to facilitate this is via Bayesian p-values that are somewhat analogous to the frequentist p-values for investigating the hypothesis that a parameter is equal to zero.\nAlso note that since our STAN model incorporated predictor centering, we have estimates of the intercept based on both centered (cbeta0) and uncentered data (beta0). Since the intercept from uncentered data is beyond the domain of our sampling data it has very little interpretability. However, the intercept based on centered data can be interpreted as the estimate of the response at the mean predictor (in this case \\(28.5\\)).\n\u0026gt; mcmcpvalue \u0026lt;- function(samp) {\r+ ## elementary version that creates an empirical p-value for the\r+ ## hypothesis that the columns of samp have mean zero versus a general\r+ ## multivariate distribution with elliptical contours.\r+ + ## differences from the mean standardized by the observed\r+ ## variance-covariance factor\r+ + ## Note, I put in the bit for single terms\r+ if (length(dim(samp)) == 0) {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - mean(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/length(samp)\r+ } else {\r+ std \u0026lt;- backsolve(chol(var(samp)), cbind(0, t(samp)) - colMeans(samp),\r+ transpose = TRUE)\r+ sqdist \u0026lt;- colSums(std * std)\r+ sum(sqdist[-1] \u0026gt; sqdist[1])/nrow(samp)\r+ }\r+ + }\r\u0026gt; ## since values are less than zero\r\u0026gt; mcmcpvalue(as.matrix(data.rstan)[, c(\u0026quot;beta[1]\u0026quot;)])\r[1] 0\rWith a p-value of essentially \\(0\\), we would conclude that there is almost no evidence that the slope was likely to be equal to zero, suggesting there is a relationship.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group. We do this by loading functions in the package dplyr.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = seq(min(data$x, na.rm = TRUE), max(data$x, na.rm = TRUE),\r+ len = 1000))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data, aes(y = y,\r+ x = x), color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low,\r+ ymax = conf.high), fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) +\r+ scale_x_continuous(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_line() + geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\r+ fill = \u0026quot;blue\u0026quot;, alpha = 0.3) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_continuous(\u0026quot;X\u0026quot;) +\r+ theme_classic()\r\rEffect sizes\rLets explore a range of effect sizes:\n\rRaw effect size between the largest and smallest \\(x\\)\n\rCohen’s D\n\rPercentage change between the largest and smallest \\(x\\)\n\rFractional change between the largest and smallest \\(x\\)\n\rProbability that a change in \\(x\\) is associated with greater than a \\(25\\)% decline in \\(y\\).\n\r\rClearly, in order to explore this inference, we must first express the change in \\(y\\) as a percentage. This in turn requires us to calculate start and end points from which to calculate the magnitude of the effect (amount of decline in \\(y\\)) as well as the percentage decline. Hence, we start by predicting the distribution of \\(y\\) at the lowest and highest values of \\(x\\).\n\u0026gt; mcmc = as.matrix(data.rstan)\r\u0026gt; newdata = data.frame(x = c(min(data$x, na.rm = TRUE), max(data$x, na.rm = TRUE)))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; ## Raw effect size\r\u0026gt; (RES = tidyMCMC(as.mcmc(fit[, 2] - fit[, 1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -20.8 3.94 -28.5 -12.8\r\u0026gt; ## Cohen\u0026#39;s D\r\u0026gt; cohenD = (fit[, 2] - fit[, 1])/mcmc[, \u0026quot;sigma\u0026quot;]\r\u0026gt; (cohenDES = tidyMCMC(as.mcmc(cohenD), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -4.37 1.14 -6.68 -2.27\r\u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ESp = 100 * (fit[, 2] - fit[, 1])/fit[, 1]\r\u0026gt; (PES = tidyMCMC(as.mcmc(ESp), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -53.1 7.81 -68.5 -37.5\r\u0026gt; # Probability that the effect is greater than 25% (a decline of \u0026gt;25%)\r\u0026gt; sum(-1 * ESp \u0026gt; 25)/length(ESp)\r[1] 0.998\r\u0026gt; ## fractional change\r\u0026gt; fit = fit[fit[, 2] \u0026gt; 0, ]\r\u0026gt; (FES = tidyMCMC(as.mcmc(fit[, 2]/fit[, 1]), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.469 0.0781 0.315 0.625\rConclusions\n\rOn average, \\(Y\\) declines by \\(-20.8\\) over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between \\(-28.5\\) and \\(-12.8\\).\n\rThe Cohen’s D associated with a change over the observed range of \\(x\\) is \\(-4.37\\).\n\rOn average, \\(Y\\) declines by \\(-53.1\\)% over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between \\(-68.5\\)% and \\(-37.5\\)%.\n\rThe probability that \\(Y\\) declines by more than \\(25\\)% over the observed range of \\(x\\) is \\(0.998\\).\n\rOn average, \\(Y\\) declines by a factor of \\(0.469\\)% over the observed range of \\(x\\). We are \\(95\\)% confident that the decline is between a factor of \\(0.315\\)% and \\(0.625\\)%.\n\r\r\rFinite population standard deviations\rVariance components, the amount of added variance attributed to each influence, are traditionally estimated for so called random effects. These are the effects for which the levels employed in the design are randomly selected to represent a broader range of possible levels. For such effects, effect sizes (differences between each level and a reference level) are of little value. Instead, the “importance” of the variables are measured in units of variance components. On the other hand, regular variance components for fixed factors (those whose measured levels represent the only levels of interest) are not logical - since variance components estimate variance as if the levels are randomly selected from a larger population. Nevertheless, in order to compare and contrast the scale of variability of both fixed and random factors, it is necessary to measure both on the same scale (sample or population based variance).\nFinite-population variance components assume that the levels of all factors (fixed and random) in the design are all the possible levels available (Gelman and others (2005)). In other words, they are assumed to represent finite populations of levels. Sample (rather than population) statistics are then used to calculate these finite-population variances (or standard deviations). Since standard deviation (and variance) are bound at zero, standard deviation posteriors are typically non-normal. Consequently, medians and HPD intervals are more robust estimates.\n# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 6.60 1.25 4.07 9.04\r2 sd.resid 4.70 0.243 4.54 5.18\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 59.3 5.30 47.8 63.9\r2 sd.resid 40.7 5.30 36.1 52.2\rApproximately \\(59.3\\)% of the total finite population standard deviation is due to \\(x\\).\n\rR squared\rIn a frequentist context, the \\(R^2\\) value is seen as a useful indicator of goodness of fit. Whilst it has long been acknowledged that this measure is not appropriate for comparing models (for such purposes information criterion such as AIC are more appropriate), it is nevertheless useful for estimating the amount (percent) of variance explained by the model. In a frequentist context, \\(R^2\\) is calculated as the variance in predicted values divided by the variance in the observed (response) values. Unfortunately, this classical formulation does not translate simply into a Bayesian context since the equivalently calculated numerator can be larger than the an equivalently calculated denominator - thereby resulting in an \\(R^2\\) greater than \\(100\\)%. Gelman et al. (2019) proposed an alternative formulation in which the denominator comprises the sum of the explained variance and the variance of the residuals.\nSo in the standard regression model notation of:\n\\[ y_i \\sim \\text{Normal}(\\boldsymbol X \\boldsymbol \\beta, \\sigma),\\]\nthe \\(R^2\\) could be formulated as\n\\[ R^2 = \\frac{\\sigma^2_f}{\\sigma^2_f + \\sigma^2_e},\\]\nwhere \\(\\sigma^2_f=\\text{var}(\\boldsymbol X \\boldsymbol \\beta)\\), and for normal models \\(\\sigma^2_e=\\text{var}(y-\\boldsymbol X \\boldsymbol \\beta)\\)\n\u0026gt; mcmc \u0026lt;- as.matrix(data.rstan)\r\u0026gt; Xmat = model.matrix(~x, data)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[1]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; resid = sweep(fit, 2, data$y, \u0026quot;-\u0026quot;)\r\u0026gt; var_f = apply(fit, 1, var)\r\u0026gt; var_e = apply(resid, 1, var)\r\u0026gt; R2 = var_f/(var_f + var_e)\r\u0026gt; tidyMCMC(as.mcmc(R2), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 0.652 0.0982 0.456 0.758\r\u0026gt; \u0026gt; # for comparison with frequentist\r\u0026gt; summary(lm(y ~ x, data))\rCall:\rlm(formula = y ~ x, data = data)\rResiduals:\rMin 1Q Median 3Q Max -7.5427 -3.3510 -0.3309 2.0411 7.5791 Coefficients:\rEstimate Std. Error t value Pr(\u0026gt;|t|) (Intercept) 40.3328 2.4619 16.382 1.58e-10 ***\rx -1.3894 0.2546 -5.457 8.45e-05 ***\r---\rSignif. codes: 0 \u0026#39;***\u0026#39; 0.001 \u0026#39;**\u0026#39; 0.01 \u0026#39;*\u0026#39; 0.05 \u0026#39;.\u0026#39; 0.1 \u0026#39; \u0026#39; 1\rResidual standard error: 4.695 on 14 degrees of freedom\rMultiple R-squared: 0.6802, Adjusted R-squared: 0.6574 F-statistic: 29.78 on 1 and 14 DF, p-value: 8.448e-05\r\rReferences\rGelman, Andrew, Ben Goodrich, Jonah Gabry, and Aki Vehtari. 2019. “R-Squared for Bayesian Regression Models.” The American Statistician 73 (3): 307–9.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2005. “Analysis of Variance—Why It Is More Important Than Ever.” The Annals of Statistics 33 (1): 1–53.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\r\r\r","date":1580695994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580695994,"objectID":"666c1c78dfb81a8f95a5900a901bc33b","permalink":"/stan/simple-linear-regression-stan/simple-linear-regression-stan/","publishdate":"2020-02-02T21:13:14-05:00","relpermalink":"/stan/simple-linear-regression-stan/simple-linear-regression-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to fit simple linear regression models. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","linear regression"],"title":"Simple Linear Regression - STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R","one sample t-test","JAGS"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to explore differences between two populations. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThe BUGS/JAGS/STAN languages and algorithms are very powerful and flexible. However, the cost of this power and flexibility is complexity and the need for a firm understanding of the model you wish to fit as well as the priors to be used. The algorithms requires the following inputs.\n\rWithin the model:\nThe likelihood function relating the response to the predictors.\n\rThe definition of the priors.\n\r\rChain properties:\nThe number of chains.\n\rThe length of chains (number of iterations).\n\rThe burn-in length (number of initial iterations to ignore).\n\rThe thinning rate (number of iterations to count on before storing a sample).\n\r\rThe initial estimates to start an MCMC chain. If there are multiple chains, these starting values can differ between chains.\n\rThe list of model parameters and derivatives to monitor (and return the posterior distributions of)\n\r\rThis tutorial will demonstrate how to fit models in JAGS (Plummer (2004)) using the package R2jags (Su et al. (2015)) as interface, which also requires to load some other packages.\nData generation\rWe will start by generating a random data set. Note, I am creating two versions of the predictor variable (a numeric version and a factorial version).\n\u0026gt; set.seed(123)\r\u0026gt; nA \u0026lt;- 60 #sample size from Population A\r\u0026gt; nB \u0026lt;- 40 #sample size from Population B\r\u0026gt; muA \u0026lt;- 105 #population mean of Population A\r\u0026gt; muB \u0026lt;- 77.5 #population mean of Population B\r\u0026gt; sigma \u0026lt;- 3 #standard deviation of both populations (equally varied)\r\u0026gt; yA \u0026lt;- rnorm(nA, muA, sigma) #Population A sample\r\u0026gt; yB \u0026lt;- rnorm(nB, muB, sigma) #Population B sample\r\u0026gt; y \u0026lt;- c(yA, yB)\r\u0026gt; x \u0026lt;- factor(rep(c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), c(nA, nB))) #categorical listing of the populations\r\u0026gt; xn \u0026lt;- as.numeric(x) #numerical version of the population category for means parameterization. # Should not start at 0.\r\u0026gt; data \u0026lt;- data.frame(y, x, xn) # dataset\rLet inspect the first few rows of the dataset using the command head\n\u0026gt; head(data)\ry x xn\r1 103.3186 A 1\r2 104.3095 A 1\r3 109.6761 A 1\r4 105.2115 A 1\r5 105.3879 A 1\r6 110.1452 A 1\rWe can also perform some exploratory data analysis - in this case, a boxplot of the response for each level of the predictor.\n\u0026gt; boxplot(y ~ x, data)\r\rThe One Sample t-test\rA t-test is essentially just a simple regression model in which the categorical predictor is represented by a binary variable in which one level is coded as \\(0\\) and the other \\(1\\). For the model itself, the observed response \\(y_i\\) are assumed to be drawn from a normal distribution with a given mean \\(\\mu\\) and standard deviation \\(\\sigma\\). The expected values are themselves determined by the linear predictor \\(\\mu_i=\\beta_0+\\beta_1x_i\\), where \\(\\beta_0\\) represents the mean of the first treatment group and \\(\\beta_1\\) represents the difference between the mean of the first group and the mean of the second group (the effect of interest).\nMCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying “uninformative” priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(1000\\)) for both the intercept and the treatment effect and a wide half-cauchy (scale=\\(25\\)) for the standard deviation (Gelman and others (2006)).\n\\[y_i \\sim \\text{Normal}(\\mu_i, \\sigma), \\]\nwhere \\(\\mu_i=\\beta_0+\\beta_1x_i\\).\nPriors are defined as:\n\\[ \\beta_j \\sim \\text{Normal}(0,1000), \\;\\;\\; \\text{and} \\;\\;\\; \\sigma \\sim \\text{Cauchy}(0,25), \\]\nfor \\(j=0,1\\).\nFitting the model in JAGS\rBroadly, there are two ways of parameterising (expressing the unknown (to be estimated) components of a model) a model. Either we can estimate the means of each group (Means parameterisation) or we can estimate the mean of one group and the difference between this group and the other group(s) (Effects parameterisation). The latter is commonly used for frequentist null hypothesis testing as its parameters are more consistent with the null hypothesis of interest (that the difference between the two groups equals zero).\nEffects parameterisation\r\r\\[ y_i = \\beta_0 + \\beta_{j}x_i + \\epsilon_i, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma). \\]\nEach \\(y_i\\) is modelled by an intercept \\(\\beta_0\\) (mean of group A) plus a difference parameter \\(\\beta_j\\) (difference between mean of group A and group B) multiplied by an indicator of which group the observation came from (\\(x_i\\)), plus a residual drawn from a normal distribution with mean \\(0\\) and standard deviation \\(\\sigma\\). Actually, there are as many \\(\\beta_j\\) parameters as there are groups but one of them (typically the first) is set to be equal to zero (to avoid over-parameterization). Expected values of \\(y\\) are modelled assuming they are drawn from a normal distribution whose mean is determined by a linear combination of effect parameters and whose variance is defined by the degree of variability in this mean. The parameters are: \\(\\beta_0\\), \\(\\beta_1\\) and \\(\\sigma\\).\nMeans parameterisation\r\r\\[ y_i = \\beta_{j} + \\epsilon_i, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma). \\]\nEach \\(y_i\\) is modelled as the mean \\(\\beta_j\\) of each group (\\(j=1,2\\)) plus a residual drawn from a normal distribution with a mean of zero and a standard deviation of \\(\\sigma\\). Actually, \\(\\boldsymbol \\beta\\) is a set of \\(j\\) coefficients corresponding to the \\(j\\) dummy coded factor levels. Expected values of \\(y\\) are modelled assuming they are drawn from a normal distribution whose mean is determined by a linear combination of means parameters and whose variance is defined by the degree of variability in this mean. The parameters are: \\(\\beta_1\\), \\(\\beta_2\\) and \\(\\sigma\\).\nIn JAGS, distributions are defined by their precision \\(\\tau\\) rather than their standard deviation \\(\\sigma\\). Precision is just the inverse of variance (\\(\\tau=\\frac{1}{\\sigma^2}\\)) and are chosen as they permit the gamma distribution to be used as the conjugate prior of the variance of a normal distribution. Bayesian analyses require that priors are specified for all the parameters. We will define vague (non-informative) priors for each of the parameters such that the posterior distributions are almost entirely influenced by the likelihood (and thus the data). Hence, appropriate (conjugate) priors for the effects parameterisation could be:\n\r\\(\\boldsymbol \\beta \\sim \\text{Normal}(0,1.0\\text{E-}6)\\) - a very flat normal distribution centered around zero. Note, \\(1.0\\text{E-}6\\) is scientific notation for \\(0.000001\\).\n\r\\(\\tau \\sim \\text{Gamma}(0.1,0.1)\\) a vague gamma distribution with a shape parameter close to zero (must be greater than \\(0\\)).\n\r\rThe JAGS language very closely matches the above model and prior definitions - hence the importance on understanding the model you wish to fit. The JAGS language resembles R in many respects. It basically consists of:\n\rstochastic nodes - those that appear on the left hand side of \\(\\sim\\)\n\rdeterministic nodes - those that appear on the left hand side of \u0026lt;-\n\r\\(R\\)-like for loops and functions to transform and summarise the data\n\r\rThat said, JAGS is based on a declarative language, which means: the order with which statements appear in the model definition are not important; nodes should not be defined more than once (you cannot change a value).We are now in a good position to define the model (Likelihood function and prior distributions).\nEffects Parameterisation\n\u0026gt; modelString = \u0026quot; + model {\r+ #Likelihood\r+ for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- beta0+beta[x[i]]\r+ }\r+ + #Priors\r+ beta0 ~ dnorm(0,1.0E-06)\r+ beta[1] \u0026lt;- 0\r+ beta[2] ~ dnorm(0,1.0E-06)\r+ tau ~ dgamma(0.1,0.1)\r+ sigma\u0026lt;-1/sqrt(tau)\r+ + #Other Derived parameters + # Group means (note, beta is a vector)\r+ Group.means \u0026lt;-beta0+beta + }\r+ \u0026quot;\r\u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString, con = \u0026quot;ttestModel.txt\u0026quot;)\rMeans Parameterisation\n\u0026gt; modelString.means = \u0026quot; + model {\r+ #Likelihood + for (i in 1:n) {\r+ y[i]~dnorm(mu[i],tau)\r+ mu[i] \u0026lt;- beta[x[i]]\r+ }\r+ + #Priors\r+ for (j in min(x):max(x)) {\r+ beta[j] ~ dnorm(0,0.001)\r+ }\r+ + tau~dgamma(0.1,0.1)\r+ sigma\u0026lt;-1/sqrt(tau)\r+ + #Other Derived parameters + effect \u0026lt;-beta[2]-beta[1]\r+ }\r+ \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file\r\u0026gt; writeLines(modelString.means, con = \u0026quot;ttestModelMeans.txt\u0026quot;)\rArrange the data as a list (as required by JAGS). Note, all variables must be numeric, therefore we use the numeric version of \\(x\\). Furthermore, the first level must be \\(1\\).\n\u0026gt; data.list \u0026lt;- with(data, list(y = y, x = xn, n = nrow(data)))\r\u0026gt; data.list.means \u0026lt;- with(data, list(y = y, x = xn, n = nrow(data)))\rDefine the initial values for the chain. Reasonable starting points can be gleaned from the data themselves.\n\u0026gt; inits \u0026lt;- list(beta0 = mean(data$y), beta = c(NA, diff(tapply(data$y,\r+ data$x, mean))), sigma = sd(data$y/2))\r\u0026gt; inits.means \u0026lt;- list(beta = tapply(data$y, data$x, mean), sigma = sd(data$y/2))\rDefine the nodes (parameters and derivatives) to monitor.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;Group.means\u0026quot;)\r\u0026gt; params.means \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;effect\u0026quot;, \u0026quot;sigma\u0026quot;)\rDefine the chain parameters.\n\u0026gt; adaptSteps = 1000 # the number of steps over which to establish a good stepping distance\r\u0026gt; burnInSteps = 2000 # the number of initial samples to discard\r\u0026gt; nChains = 2 # the number of independed sampling chains to perform \u0026gt; numSavedSteps = 50000 # the total number of samples to store\r\u0026gt; thinSteps = 1 # the thinning rate\r\u0026gt; nIter = ceiling((numSavedSteps * thinSteps)/nChains)\rStart the JAGS model (check the model, load data into the model, specify the number of chains and compile the model). Load the R2jags package.\n\u0026gt; library(R2jags)\rWhen using the jags function (R2jags package), it is not necessary to provide initial values. However, if they are to be supplied, the inital values must be provided as a list of the same length as the number of chains.\nEffects Parameterisation\n\u0026gt; data.r2jags \u0026lt;- jags(data=data.list,\r+ inits=NULL, #or inits=list(inits,inits) # since there are two chains\r+ parameters.to.save=params,\r+ model.file=\u0026quot;ttestModel.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 3\rTotal graph size: 214\rInitializing model\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.r2jags)\rInference for Bugs model at \u0026quot;ttestModel.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\rGroup.means[1] 105.200 0.357 104.497 104.959 105.201 105.441 105.900 1.001\rGroup.means[2] 77.882 0.438 77.018 77.589 77.882 78.174 78.746 1.001\rbeta[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\rbeta[2] -27.318 0.563 -28.426 -27.696 -27.315 -26.943 -26.212 1.001\rbeta0 105.200 0.357 104.497 104.959 105.201 105.441 105.900 1.001\rsigma 2.771 0.202 2.408 2.630 2.759 2.900 3.198 1.001\rdeviance 487.192 2.485 484.376 485.370 486.547 488.331 493.506 1.001\rn.eff\rGroup.means[1] 46000\rGroup.means[2] 15000\rbeta[1] 1\rbeta[2] 35000\rbeta0 46000\rsigma 46000\rdeviance 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.1 and DIC = 490.3\rDIC is an estimate of expected predictive error (lower deviance is better).\rMeans Parameterisation\n\u0026gt; data.r2jags.means \u0026lt;- jags(data=data.list.means,\r+ inits=NULL, #or inits=list(inits.means,inits.means) # since there are two chains\r+ parameters.to.save=params.means,\r+ model.file=\u0026quot;ttestModelMeans.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 3\rTotal graph size: 211\rInitializing model\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.r2jags.means)\rInference for Bugs model at \u0026quot;ttestModelMeans.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta[1] 105.184 0.357 104.481 104.947 105.184 105.423 105.884 1.001 46000\rbeta[2] 77.867 0.439 77.001 77.575 77.866 78.160 78.736 1.001 39000\reffect -27.317 0.566 -28.433 -27.696 -27.317 -26.940 -26.197 1.001 46000\rsigma 2.768 0.201 2.408 2.626 2.755 2.897 3.192 1.001 34000\rdeviance 487.195 2.498 484.360 485.377 486.540 488.323 493.721 1.001 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.1 and DIC = 490.3\rDIC is an estimate of expected predictive error (lower deviance is better).\rNotes\n\rIf inits=NULL the jags function will generate vaguely sensible initial values for each chain based on the data.\n\rIn addition to the mean and quantiles of each of the sample nodes, the jags function will calculate.\nThe effective sample size for each sample - if n.eff for a node is substantially less than the number of iterations, then it suggests poor mixing.\n\rThe Potential scale reduction factor or Rhat values for each sample - these are a convergence diagnostic (values of \\(1\\) indicate full convergence, values greater than \\(1.01\\) are indicative of non-convergence.\n\rAn information criteria (DIC) for model selection.\n\r\r\rThe total number samples collected is \\(46000\\). That is, there are \\(46000\\) samples collected from the multidimensional posterior distribution and thus, \\(46000\\) samples collected from the posterior distributions of each parameter. The effective number of samples column indicates the number of independent samples represented in the total. It is clear that for all parameters the chains were well mixed.\n\r\rMCMC diagnostics\rIn addition to the regular model diagnostic checks (such as residual plots), for Bayesian analyses, it is necessary to explore the characteristics of the MCMC chains and the sampler in general. Recall that the purpose of MCMC sampling is to replicate the posterior distribution of the model likelihood and priors by drawing a known number of samples from this posterior (thereby formulating a probability distribution). This is only reliable if the MCMC samples accurately reflect the posterior. Unfortunately, since we only know the posterior in the most trivial of circumstances, it is necessary to rely on indirect measures of how accurately the MCMC samples are likely to reflect the likelihood. I will briefly outline the most important diagnostics.\n\rTraceplots for each parameter illustrate the MCMC sample values after each successive iteration along the chain. Bad chain mixing (characterised by any sort of pattern) suggests that the MCMC sampling chains may not have completely traversed all features of the posterior distribution and that more iterations are required to ensure the distribution has been accurately represented.\n\rAutocorrelation plot for each parameter illustrate the degree of correlation between MCMC samples separated by different lags. For example, a lag of \\(0\\) represents the degree of correlation between each MCMC sample and itself (obviously this will be a correlation of \\(1\\)). A lag of \\(1\\) represents the degree of correlation between each MCMC sample and the next sample along the chain and so on. In order to be able to generate unbiased estimates of parameters, the MCMC samples should be independent (uncorrelated).\n\rPotential scale reduction factor (Rhat) statistic for each parameter provides a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of \\(1.05\\) or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentially slower than it could have been but, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\r\rPrior to examining the summaries, we should have explored the convergence diagnostics. We use the package mcmcplots to obtain density and trace plots for the effects model as an example.\n\u0026gt; library(mcmcplots)\r\u0026gt; denplot(data.r2jags, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta[2]\u0026quot;,\u0026quot;sigma\u0026quot;))\r\u0026gt; traplot(data.r2jags, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta[2]\u0026quot;,\u0026quot;sigma\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\rModel validation\rModel validation involves exploring the model diagnostics and fit to ensure that the model is broadly appropriate for the data. As such, exploration of the residuals should be routine. Ideally, a good model should also be able to predict the data used to fit the model.\nResiduals are not computed directly within R2jags. However, we can calculate them manually form the posteriors and plot them using the package ggplot2.\n\u0026gt; library(ggplot2)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rThere is no evidence that the mcmc chain did not converge on a stable posterior distribution. We are now in a position to examine the summaries of the parameters.\n\rParameter estimates\rAlthough all parameters in a Bayesian analysis are considered random and are considered a distribution, rarely would it be useful to present tables of all the samples from each distribution. On the other hand, plots of the posterior distributions have some use. Nevertheless, most workers prefer to present simple statistical summaries of the posteriors. Popular choices include the median (or mean) and \\(95\\)% credibility intervals.\n\u0026gt; library(broom)\r\u0026gt; tidyMCMC(as.mcmc(data.r2jags), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 7 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 Group.means[1] 105. 0.357 105. 106. 2 Group.means[2] 77.9 0.438 77.0 78.7 3 beta[1] 0 0 0 0 4 beta[2] -27.3 0.563 -28.4 -26.2 5 beta0 105. 0.357 105. 106. 6 deviance 487. 2.49 484. 492. 7 sigma 2.77 0.202 2.39 3.17\rThe Group A is typically \\(27.3\\) units greater than Group B. The \\(95\\)% confidence interval for the difference between Group A and B does not overlap with \\(0\\) implying a significant difference between the two groups.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group. We do this by loading functions in the package dplyr.\n\u0026gt; library(dplyr)\r\u0026gt; mcmc = data.r2jags$BUGSoutput$sims.matrix\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = levels(data$x))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta0\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data, aes(y = y,\r+ x = x), color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\r\rEffect sizes\rIn addition to deriving the distribution means for the second group, we could make use of the Bayesian framework to derive the distribution of the effect size. There are multiple ways of calculating an effect size, but the most common are:\n\rRaw effect size - the difference between two groups (as already calculated)\n\rCohen’s D - the effect size standardised by division with the pooled standard deviation\n\rPercent - the effect size expressed as a percent of the reference group mean\n\r\rCalculating the percent effect size involves division by an estimate of \\(\\beta_0\\). The very first sample collected of each parameter (including \\(\\beta_0\\)) is based on the initial values supplied. If inits=NULL the jags function appears to generate initial values from the priors. Recall that in the previous model definition, \\(\\beta_0\\) was deemed to be distributed as a normal distribution with a mean of \\(0\\). Hence, \\(\\beta_0\\) would initially be assigned a value of \\(0\\). Division by zero is of course illegal and thus an error would be thrown. There are two ways to overcome this:\n\rModify the prior such that it has a mean close to zero (and thus the first \\(\\beta_0\\) sample is not zero), yet not actually zero (such as \\(0.0001\\)). This is the method used here.\n\rDefine initial values that are based on the observed data (and not zero).\n\r\r\u0026gt; paramsv2 \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;Group.means\u0026quot;, \u0026quot;cohenD\u0026quot;, \u0026quot;ES\u0026quot;, \u0026quot;p10\u0026quot;)\r\u0026gt; data.r2jagsv2 \u0026lt;- jags(data=data.list,\r+ inits=NULL, #or inits=list(inits,inits) # since there are two chains\r+ parameters.to.save=paramsv2,\r+ model.file=\u0026quot;ttestModelv2.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 3\rTotal graph size: 224\rInitializing model\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.r2jagsv2)\rInference for Bugs model at \u0026quot;ttestModelv2.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\rES -25.965 0.488 -26.918 -26.294 -25.967 -25.637 -24.992 1.001\rGroup.means[1] 105.197 0.358 104.495 104.957 105.199 105.437 105.900 1.001\rGroup.means[2] 77.881 0.439 77.020 77.586 77.882 78.174 78.748 1.001\rbeta[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\rbeta[2] -27.316 0.567 -28.428 -27.696 -27.317 -26.934 -26.191 1.001\rbeta0 105.197 0.358 104.495 104.957 105.199 105.437 105.900 1.001\rcohenD -9.914 0.736 -11.390 -10.402 -9.905 -9.413 -8.503 1.001\rp10 1.000 0.000 1.000 1.000 1.000 1.000 1.000 1.000\rsigma 2.770 0.199 2.413 2.631 2.758 2.897 3.190 1.001\rdeviance 487.184 2.473 484.372 485.370 486.546 488.317 493.572 1.001\rn.eff\rES 46000\rGroup.means[1] 46000\rGroup.means[2] 46000\rbeta[1] 1\rbeta[2] 46000\rbeta0 46000\rcohenD 46000\rp10 1\rsigma 46000\rdeviance 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.1 and DIC = 490.2\rDIC is an estimate of expected predictive error (lower deviance is better).\rThe Cohen’s D value is \\(-9.91\\). This value is far greater than the nominal “large effect” guidelines outlined by Cohen and thus we might proclaim the treatment as having a large negative effect. The effect size expressed as a percentage of the Group A mean is \\(-27.3\\). Hence the treatment was associated with a \\(27.3\\)% reduction.\n\rProbability statements\rBayesian statistics provide a natural means to generate probability statements. For example, we could calculate the probability that there is an effect of the treatment. Moreover, we could calculate the probability that the treatment effect exceeds some threshold (which might be based on a measure of clinically important difference or other compliance guidelines for example).\n\u0026gt; mcmc = data.r2jagsv2$BUGSoutput$sims.matrix\r\u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ES = 100 * mcmc[, \u0026quot;beta[2]\u0026quot;]/mcmc[, \u0026quot;beta0\u0026quot;]\r\u0026gt; hist(ES)\r\u0026gt; \u0026gt; # Probability that the effect is greater than 10% (a decline of \u0026gt;10%)\r\u0026gt; sum(-1 * ES \u0026gt; 10)/length(ES)\r[1] 1\r\u0026gt; # Probability that the effect is greater than 25% (a decline of \u0026gt;25%)\r\u0026gt; sum(-1 * ES \u0026gt; 25)/length(ES)\r[1] 0.9741304\rWe have defined two additional probability derivatives, both of which utilize the step function (which generates a binary vector based on whether values evaluate less than zero or not).\n\rP0 - the probability (mean of 1-step()) that the raw effect is greater than zero.\rP25 - the probability (mean of 1-step()) that the percent effect size is greater than \\(25\\)%.\r\r\u0026gt; paramsv3 \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;Group.means\u0026quot;, \u0026quot;cohenD\u0026quot;, \u0026quot;ES\u0026quot;, \u0026quot;P0\u0026quot;, \u0026quot;P25\u0026quot;)\r\u0026gt; data.r2jagsv3 \u0026lt;- jags(data=data.list,\r+ inits=NULL, #or inits=list(inits,inits) # since there are two chains\r+ parameters.to.save=paramsv3,\r+ model.file=\u0026quot;ttestModelv3.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 3\rTotal graph size: 225\rInitializing model\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.r2jagsv3)\rInference for Bugs model at \u0026quot;ttestModelv3.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat\rES -25.964 0.489 -26.920 -26.293 -25.965 -25.637 -24.999 1.001\rGroup.means[1] 105.197 0.359 104.485 104.959 105.196 105.435 105.897 1.001\rGroup.means[2] 77.882 0.441 77.022 77.585 77.881 78.178 78.748 1.001\rP0 1.000 0.000 1.000 1.000 1.000 1.000 1.000 1.000\rP25 0.975 0.156 0.000 1.000 1.000 1.000 1.000 1.001\rbeta[1] 0.000 0.000 0.000 0.000 0.000 0.000 0.000 1.000\rbeta[2] -27.315 0.568 -28.427 -27.696 -27.314 -26.935 -26.195 1.001\rbeta0 105.197 0.359 104.485 104.959 105.196 105.435 105.897 1.001\rcohenD -9.912 0.740 -11.385 -10.405 -9.903 -9.412 -8.477 1.001\rsigma 2.770 0.200 2.411 2.631 2.758 2.896 3.198 1.001\rdeviance 487.202 2.492 484.364 485.378 486.557 488.334 493.696 1.001\rn.eff\rES 46000\rGroup.means[1] 46000\rGroup.means[2] 46000\rP0 1\rP25 46000\rbeta[1] 1\rbeta[2] 46000\rbeta0 46000\rcohenD 37000\rsigma 27000\rdeviance 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.1 and DIC = 490.3\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rFinite population standard deviations\rIt is often useful to be able to estimate the relative amount of variability associated with each predictor (or term) in a model. This can provide a sort of relative importance measure for each predictor.\nIn frequentist statistics, such measures are only available for so called random factors (factors whose observational levels are randomly selected to represent all possible levels rather than to represent specific treatment levels). For such random factors, the collective variances (or standard deviation) of each factor are known as the variance components. Each component can also be expressed as a percentage of the total so as to provide a percentage breakdown of the relative contributions of each scale of sampling. Frequentist approaches model random factors according to the variance they add to the model, whereas fixed factors are modelled according to their effects (deviations from reference means). The model does not seek to generalise beyond the observed levels of a given fixed factor (such as control vs treatment) and thus it apparently does not make sense to estimate the population variability between levels (which is what variance components estimate).\nThe notion of “fixed” and “random” factors is somewhat arbitrary and does not really have any meaning within a Bayesian context (as all parameters and thus factors are considered random). Instead, the spirit of what many consider is that the difference between fixed and random factors can be captured by conceptualising whether the levels of a factor are drawn from a finite population (from which the observed factor levels are the only ones possible) or a superpopulation (from which the observed factor levels are just a random selection of the infinite possible levels possible). Hence, variance components could be defined in terms of either finite population or superpopulation standard deviations. Superpopulation standard deviations have traditionally been used to describe the relative scale of sampling variation (e.g. where is the greatest source of variability; plots, subplots within plots, individual quadrats within subplots, …. or years, months within years, weeks within months, days within weeks, …) and are most logically applicable to factors that have a relatively large number of levels (such as spatial or temporal sampling units). On the other hand, finite population standard deviations can be used to explore the relative impact or effect of a set of (fixed) treatments.\nCalculate the amount of unexplained (residual) variance absorbed by the factor. This is generated by fitting a model with (full model) and without (reduced model) the term and subtracting the standard deviations of the residuals one another.\n\\[ \\sigma_A = \\sigma_{reduced} - \\sigma_{full} \\]\nThis approach works fine for models that only include fixed factors (indeed it is somewhat analogous to the partitioning of variance employed by an ANOVA table), but cannot be used when the model includes random factors.\n\u0026gt; data.lmFull \u0026lt;- lm(y ~ x, data)\r\u0026gt; data.lmRed \u0026lt;- lm(y ~ 1, data)\r\u0026gt; sd.a \u0026lt;- sd(data.lmRed$resid) - sd(data.lmFull$resid)\r\u0026gt; sd.resid \u0026lt;- sd(data.lmFull$resid)\r\u0026gt; sds \u0026lt;- c(sd.a, sd.resid)\r\u0026gt; 100 * sds/sum(sds)\r[1] 80.05772 19.94228\rHowever, options are somewhat limiting if we want to estimate the relative impacts of a mixture of “fixed” and “random” terms. For example, we may wish to explore the relative importance of a treatment compared to the spatial and/or temporal sampling heterogeneity. The Bayesian framework provides a relatively simple way to generate both finite population and superpopulation standard deviation estimates for all factors.\n\rFinite populations. The standard deviations of the MCMC samples across each of the parameters associated with a factor (eg, \\(\\beta_1\\) and \\(\\beta_2\\) in the effects parameterisation model) provide natural estimates of the variability between group levels (and thus the finite population standard deviation).\n\rSuperpopulation. The mechanism of defining priors also provides a mechanism for calculating infinite population standard deviations. Recall that in the means model, the prior for \\(\\beta_0\\) specifies that each of the \\(\\beta_0\\) values are drawn from a normal distribution with a particular mean and a certain level of precision (reciprocal of variability). We could further parameterise this prior into an estimatable mean and precision via hyperpriors \\(\\beta_0 \\sim \\text{Normal}(\\mu,\\tau)\\), with \\(\\mu \\sim \\text{Normal}(0,1.0\\text{E}-6)\\) and \\(\\tau \\sim \\text{Gamma}(0.1,0.1)\\). Since the normal distribution in line one above represents the distribution from which the (infinite) population means are drawn, \\(\\tau\\) provides a direct measure of the variability of the population from which the means are drawn.\n\r\rWhen the number of levels of a factor are large, the finite population and superpopulation standard deviation point estimates will be very similar. However, when the number of factor levels is small (such as two levels), the finite population estimate will be very precise whereas the superpopulation standard deviation estimate will be very imprecise (highly varied). For this reason, if the purpose of estimating standard deviations is to compare relative contributions of various predictors (some of which have small numbers of levels and others large), then it is best to use finite population standard deviation estimates.\n\u0026gt; paramsv4 \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;sd.a\u0026quot;, \u0026quot;sd.resid\u0026quot;, \u0026quot;sigma.a\u0026quot;)\r\u0026gt; data.r2jagsv4 \u0026lt;- jags(data=data.list,\r+ inits=NULL, #or inits=list(inits,inits) # since there are two chains\r+ parameters.to.save=paramsv4,\r+ model.file=\u0026quot;ttestModelv4.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=thinSteps)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 4\rTotal graph size: 319\rInitializing model\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.r2jagsv4)\rInference for Bugs model at \u0026quot;ttestModelv4.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75%\rbeta[1] 0.000000e+00 0.000000e+00 0.000 0.000 0.000 0.000\rbeta[2] -2.731400e+01 5.670000e-01 -28.417 -27.694 -27.314 -26.937\rbeta0 1.051970e+02 3.590000e-01 104.490 104.955 105.198 105.440\rsd.a 1.931400e+01 4.010000e-01 18.521 19.047 19.314 19.583\rsd.resid 2.751000e+00 2.000000e-02 2.737 2.738 2.743 2.755\rsigma 2.769000e+00 1.990000e-01 2.411 2.629 2.757 2.895\rsigma.a 1.095446e+22 1.956638e+24 0.323 1.712 13.394 440.403\rdeviance 4.871890e+02 2.480000e+00 484.365 485.386 486.550 488.303\r97.5% Rhat n.eff\rbeta[1] 0.000 1.000 1\rbeta[2] -26.193 1.001 46000\rbeta0 105.899 1.001 46000\rsd.a 20.094 1.001 46000\rsd.resid 2.808 1.001 46000\rsigma 3.187 1.001 46000\rsigma.a 43469187.743 1.001 46000\rdeviance 493.637 1.001 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 3.1 and DIC = 490.3\rDIC is an estimate of expected predictive error (lower deviance is better).\rThe between group (finite population) standard deviation is \\(20.1\\) whereas the within group standard deviation is \\(2.81\\). These equate to respectively. Compared to the finite population standard deviation, the superpopulation between group standard deviation estimate (\\(\\sigma_a\\)) is both very large and highly variable. This is to be expected, whilst the finite population standard deviation represents the degree of variation between the observed levels, the superpopulation standard deviation seeks to estimate the variability of the population from which the group means of the observed levels AND all other possible levels are drawn. There are only two levels from which to estimate this standard deviation and therefore, its value and variability are going to be higher than those pertaining only to the scope of the current data.\nExamination of the quantiles for \\(\\sigma_a\\) suggest that its samples are not distributed normally. Consequently, the mean is not an appropriate measure of its location. We will instead characterise the superpopulation between group and within group standard deviations via their respective medians and as percent medians. The contrast between finite population and superpopulation standard deviations is also emphasised by the respective estimates for the residuals. The residuals are of course a “random” factor with a large number of observed levels. It is therefore not surprising that the point estimates for the residuals variance components are very similar. However, also notice that the precision of the finite population standard deviation estimate is substantially higher (lower standard deviation of the standard deviation estimate) than that of the superpopulation estimate.\n\rUnequally varied populations\rWe can also generate data assuming two populations with different variances, e.g. between male and female subgroups.\n\u0026gt; set.seed(123)\r\u0026gt; n1 \u0026lt;- 60 #sample size from population 1\r\u0026gt; n2 \u0026lt;- 40 #sample size from population 2\r\u0026gt; mu1 \u0026lt;- 105 #population mean of population 1\r\u0026gt; mu2 \u0026lt;- 77.5 #population mean of population 2\r\u0026gt; sigma1 \u0026lt;- 3 #standard deviation of population 1\r\u0026gt; sigma2 \u0026lt;- 2 #standard deviation of population 2\r\u0026gt; n \u0026lt;- n1 + n2 #total sample size\r\u0026gt; y1 \u0026lt;- rnorm(n1, mu1, sigma1) #population 1 sample\r\u0026gt; y2 \u0026lt;- rnorm(n2, mu2, sigma2) #population 2 sample\r\u0026gt; y \u0026lt;- c(y1, y2)\r\u0026gt; x \u0026lt;- factor(rep(c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), c(n1, n2))) #categorical listing of the populations\r\u0026gt; xn \u0026lt;- rep(c(0, 1), c(n1, n2)) #numerical version of the population category\r\u0026gt; data2 \u0026lt;- data.frame(y, x, xn) # dataset\r\u0026gt; head(data2) #print out the first six rows of the data set\ry x xn\r1 103.3186 A 0\r2 104.3095 A 0\r3 109.6761 A 0\r4 105.2115 A 0\r5 105.3879 A 0\r6 110.1452 A 0\rStart by defining the model\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon, \\]\nwhere \\(\\epsilon_1 \\sim \\text{Normal}(0,\\sigma_1)\\) for \\(x_1=0\\) (females), and \\(\\epsilon_2 \\sim \\text{Normal}(0,\\sigma_2)\\) for \\(x_2=1\\) (males). In JAGS code, the model becomes:\n\u0026gt; modelStringv5=\u0026quot;\r+ model {\r+ #Likelihood\r+ for (i in 1:n1) {\r+ y1[i]~dnorm(mu1,tau1)\r+ }\r+ for (i in 1:n2) {\r+ y2[i]~dnorm(mu2,tau2)\r+ }\r+ + #Priors\r+ mu1 ~ dnorm (0,0.001)\r+ mu2 ~ dnorm(0,0.001)\r+ tau1 \u0026lt;- 1 / (sigma1 * sigma1)\r+ sigma1~dunif(0,100)\r+ tau2 \u0026lt;- 1 / (sigma2 * sigma2)\r+ sigma2~dunif(0,100)\r+ + #Other Derived parameters + delta \u0026lt;- mu2 - mu1\r+ }\r+ \u0026quot;\r\u0026gt; ## write the model to a text file \u0026gt; writeLines(modelStringv5,con=\u0026quot;ttestModelv5.txt\u0026quot;)\rWe specify priors directly on \\(\\sigma_1\\) and \\(\\sigma_2\\) using Uniform distributions between \\(0\\) and \\(100\\), and then express \\(\\tau\\) as a deterministic function of \\(\\sigma\\). Next, arrange the data as a list (as required by JAGS) and define the MCMC parameters. Note, all variables must be numeric, therefore we use the numeric version of \\(x\\). Define the initial values for two chains so that the initial values list must include two elements (if provided).\n\u0026gt; data2.list \u0026lt;- with(data2,list(y1=y[xn==0], y2=y[xn==1], + n1=length(y[xn==0]), n2=length(y[xn==1])))\r\u0026gt; inits \u0026lt;- list(list(mu1=rnorm(1), mu2=rnorm(1), sigma1=rlnorm(1), sigma2=rlnorm(1)),\r+ list(mu1=rnorm(1), mu2=rnorm(1), sigma1=rlnorm(1), sigma2=rlnorm(1)))\r\u0026gt; paramsv5 \u0026lt;- c(\u0026quot;mu1\u0026quot;,\u0026quot;mu2\u0026quot;,\u0026quot;delta\u0026quot;,\u0026quot;sigma1\u0026quot;,\u0026quot;sigma2\u0026quot;)\r\u0026gt; adaptSteps = 1000\r\u0026gt; burnInSteps = 2000\r\u0026gt; nChains = 2\r\u0026gt; numSavedSteps = 50000\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = ceiling((numSavedSteps * thinSteps)/nChains)\rFinally, fit the model in JAGS and print the results.\n\u0026gt; data2.r2jagsv5 \u0026lt;- jags(data=data2.list,\r+ inits=NULL, #or inits=list(inits,inits) # since there are two chains\r+ parameters.to.save=paramsv5,\r+ model.file=\u0026quot;ttestModelv5.txt\u0026quot;,\r+ n.chains=nChains,\r+ n.iter=nIter,\r+ n.burnin=burnInSteps,\r+ n.thin=1)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 4\rTotal graph size: 115\rInitializing model\r\u0026gt; \u0026gt; print(data2.r2jagsv5)\rInference for Bugs model at \u0026quot;ttestModelv5.txt\u0026quot;, fit using jags,\r2 chains, each with 25000 iterations (first 2000 discarded)\rn.sims = 46000 iterations saved\rmu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff\rdelta -27.435 0.473 -28.367 -27.755 -27.433 -27.116 -26.508 1.001 27000\rmu1 105.181 0.360 104.478 104.937 105.181 105.422 105.891 1.001 44000\rmu2 77.746 0.306 77.142 77.543 77.748 77.948 78.347 1.001 46000\rsigma1 2.787 0.265 2.328 2.602 2.767 2.951 3.361 1.001 16000\rsigma2 1.913 0.225 1.534 1.753 1.893 2.049 2.414 1.001 21000\rdeviance 455.879 2.945 452.217 453.714 455.215 457.354 463.257 1.001 46000\rFor each parameter, n.eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor (at convergence, Rhat=1).\rDIC info (using the rule, pD = var(deviance)/2)\rpD = 4.3 and DIC = 460.2\rDIC is an estimate of expected predictive error (lower deviance is better).\r\rReferences\rGelman, Andrew, and others. 2006. “Prior Distributions for Variance Parameters in Hierarchical Models (Comment on Article by Browne and Draper).” Bayesian Analysis 1 (3): 515–34.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1580609594,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580609594,"objectID":"00731120d746a637f0fe73b289c5a893","permalink":"/jags/comparing-two-populations-jags/comparing-two-populations-jags/","publishdate":"2020-02-01T21:13:14-05:00","relpermalink":"/jags/comparing-two-populations-jags/comparing-two-populations-jags/","section":"JAGS","summary":"This tutorial will focus on the use of Bayesian estimation to explore differences between two populations. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","JAGS","population differences"],"title":"Comparing Two Populations - JAGS","type":"JAGS"},{"authors":["Andrea Gabrio"],"categories":["R","one sample t-test","STAN"],"content":"\r\rThis tutorial will focus on the use of Bayesian estimation to explore differences between two populations. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.\n\rSTAN - a dedicated Bayesian modelling framework written in C++ and implementing Hamiltonian MCMC samplers.\n\r\rWhilst the above programs can be used stand-alone, they do offer the rich data pre-processing and graphical capabilities of R, and thus, they are best accessed from within R itself. As such there are multiple packages devoted to interfacing with the various software implementations:\n\rR2OpenBUGS - interfaces with OpenBUGS\n\rR2jags - interfaces with JAGS\n\rrstan - interfaces with STAN\n\r\rThe BUGS/JAGS/STAN languages and algorithms are very powerful and flexible. However, the cost of this power and flexibility is complexity and the need for a firm understanding of the model you wish to fit as well as the priors to be used. The algorithms requires the following inputs.\n\rWithin the model:\nThe likelihood function relating the response to the predictors.\n\rThe definition of the priors.\n\r\rChain properties:\nThe number of chains.\n\rThe length of chains (number of iterations).\n\rThe burn-in length (number of initial iterations to ignore).\n\rThe thinning rate (number of iterations to count on before storing a sample).\n\r\rThe initial estimates to start an MCMC chain. If there are multiple chains, these starting values can differ between chains.\n\rThe list of model parameters and derivatives to monitor (and return the posterior distributions of)\n\r\rThis tutorial will demonstrate how to fit models in STAN (Gelman, Lee, and Guo (2015)) using the package rstan (Stan Development Team (2018)) as interface, which also requires to load some other packages.\nData generation\rWe will start by generating a random data set. Note, I am creating two versions of the predictor variable (a numeric version and a factorial version).\n\u0026gt; set.seed(123)\r\u0026gt; nA \u0026lt;- 60 #sample size from Population A\r\u0026gt; nB \u0026lt;- 40 #sample size from Population B\r\u0026gt; muA \u0026lt;- 105 #population mean of Population A\r\u0026gt; muB \u0026lt;- 77.5 #population mean of Population B\r\u0026gt; sigma \u0026lt;- 3 #standard deviation of both populations (equally varied)\r\u0026gt; yA \u0026lt;- rnorm(nA, muA, sigma) #Population A sample\r\u0026gt; yB \u0026lt;- rnorm(nB, muB, sigma) #Population B sample\r\u0026gt; y \u0026lt;- c(yA, yB)\r\u0026gt; x \u0026lt;- factor(rep(c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), c(nA, nB))) #categorical listing of the populations\r\u0026gt; xn \u0026lt;- as.numeric(x) #numerical version of the population category for means parameterization. # Should not start at 0.\r\u0026gt; data \u0026lt;- data.frame(y, x, xn) # dataset\rLet inspect the first few rows of the dataset using the command head\n\u0026gt; head(data)\ry x xn\r1 103.3186 A 1\r2 104.3095 A 1\r3 109.6761 A 1\r4 105.2115 A 1\r5 105.3879 A 1\r6 110.1452 A 1\rWe can also perform some exploratory data analysis - in this case, a boxplot of the response for each level of the predictor.\n\u0026gt; boxplot(y ~ x, data)\r\rThe One Sample t-test\rA t-test is essentially just a simple regression model in which the categorical predictor is represented by a binary variable in which one level is coded as \\(0\\) and the other \\(1\\). For the model itself, the observed response \\(y_i\\) are assumed to be drawn from a normal distribution with a given mean \\(\\mu\\) and standard deviation \\(\\sigma\\). The expected values are themselves determined by the linear predictor \\(\\mu_i=\\beta_0+\\beta_1x_i\\), where \\(\\beta_0\\) represents the mean of the first treatment group and \\(\\beta_1\\) represents the difference between the mean of the first group and the mean of the second group (the effect of interest).\nMCMC sampling requires priors on all parameters. We will employ weakly informative priors. Specifying “uninformative” priors is always a bit of a balancing act. If the priors are too vague (wide) the MCMC sampler can wander off into nonscence areas of likelihood rather than concentrate around areas of highest likelihood (desired when wanting the outcomes to be largely driven by the data). On the other hand, if the priors are too strong, they may have an influence on the parameters. In such a simple model, this balance is very forgiving - it is for more complex models that prior choice becomes more important. For this simple model, we will go with zero-centered Gaussian (normal) priors with relatively large standard deviations (\\(1000\\)) for both the intercept and the treatment effect and a wide half-cauchy (scale=\\(25\\)) for the standard deviation (Gelman and others (2006)).\n\\[y_i \\sim \\text{Normal}(\\mu_i, \\sigma), \\]\nwhere \\(\\mu_i=\\beta_0+\\beta_1x_i\\).\nPriors are defined as:\n\\[ \\beta_j \\sim \\text{Normal}(0,1000), \\;\\;\\; \\text{and} \\;\\;\\; \\sigma \\sim \\text{Cauchy}(0,25), \\]\nfor \\(j=0,1\\).\nFitting the model in STAN\rBroadly, there are two ways of parameterising (expressing the unknown (to be estimated) components of a model) a model. Either we can estimate the means of each group (Means parameterisation) or we can estimate the mean of one group and the difference between this group and the other group(s) (Effects parameterisation). The latter is commonly used for frequentist null hypothesis testing as its parameters are more consistent with the null hypothesis of interest (that the difference between the two groups equals zero).\nEffects parameterisation\r\r\\[ y_i = \\beta_0 + \\beta_{j}x_i + \\epsilon_i, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma). \\]\nEach \\(y_i\\) is modelled by an intercept \\(\\beta_0\\) (mean of group A) plus a difference parameter \\(\\beta_j\\) (difference between mean of group A and group B) multiplied by an indicator of which group the observation came from (\\(x_i\\)), plus a residual drawn from a normal distribution with mean \\(0\\) and standard deviation \\(\\sigma\\). Actually, there are as many \\(\\beta_j\\) parameters as there are groups but one of them (typically the first) is set to be equal to zero (to avoid over-parameterization). Expected values of \\(y\\) are modelled assuming they are drawn from a normal distribution whose mean is determined by a linear combination of effect parameters and whose variance is defined by the degree of variability in this mean. The parameters are: \\(\\beta_0\\), \\(\\beta_1\\) and \\(\\sigma\\).\nMeans parameterisation\r\r\\[ y_i = \\beta_{j} + \\epsilon_i, \\;\\;\\; \\text{with} \\;\\;\\; \\epsilon_i \\sim \\text{Normal}(0,\\sigma). \\]\nEach \\(y_i\\) is modelled as the mean \\(\\beta_j\\) of each group (\\(j=1,2\\)) plus a residual drawn from a normal distribution with a mean of zero and a standard deviation of \\(\\sigma\\). Actually, \\(\\boldsymbol \\beta\\) is a set of \\(j\\) coefficients corresponding to the \\(j\\) dummy coded factor levels. Expected values of \\(y\\) are modelled assuming they are drawn from a normal distribution whose mean is determined by a linear combination of means parameters and whose variance is defined by the degree of variability in this mean. The parameters are: \\(\\beta_1\\), \\(\\beta_2\\) and \\(\\sigma\\).\nWhilst the STAN language broadly resembles BUGS/JAGS, there are numerous important differences. Some of these differences are to support translation to c++ for compilation (such as declaring variables). Others reflect leveraging of vectorization to speed up run time. Here are some important notes about STAN:\n\rAll variables must be declared\n\rVariables declared in the parameters block will be collected\n\rAnything in the transformed block will be collected as samples. Also, checks will be made every loop\n\r\rNow I will demonstrate fitting the models with STAN. Note, I am using the refresh=0 option so as to suppress the larger regular output in the interest of keeping output to what is necessary for this tutorial. When running outside of a tutorial context, the regular verbose output is useful as it provides a way to gauge progress.\nEffects Parameterisation\n\u0026gt; stanString = \u0026quot; + data {\r+ int n;\r+ vector [n] y;\r+ vector [n] x;\r+ }\r+ parameters {\r+ real \u0026lt;lower=0, upper=100\u0026gt; sigma;\r+ real beta0;\r+ real beta;\r+ }\r+ transformed parameters {\r+ }\r+ model {\r+ vector [n] mu;\r+ + //Priors\r+ beta0 ~ normal(0,1000);\r+ beta ~ normal(0,1000);\r+ sigma ~ cauchy(0,25);\r+ + mu = beta0 + beta*x;\r+ //Likelihood\r+ y ~ normal(mu, sigma);\r+ }\r+ generated quantities {\r+ vector [2] Group_means;\r+ real CohensD;\r+ //Other Derived parameters + //# Group means (note, beta is a vector)\r+ Group_means[1] = beta0;\r+ Group_means[2] = beta0+beta;\r+ + CohensD = beta /sigma; + }\r+ + \u0026quot;\r\u0026gt; ## write the model to a text file\r\u0026gt; writeLines(stanString, con = \u0026quot;ttestModel.stan\u0026quot;)\rMeans Parameterisation\n\u0026gt; stanString.means = \u0026quot; + data {\r+ int n;\r+ int nX;\r+ vector [n] y;\r+ matrix [n,nX] x;\r+ }\r+ parameters {\r+ real \u0026lt;lower=0, upper=100\u0026gt; sigma;\r+ vector [nX] beta;\r+ }\r+ transformed parameters {\r+ }\r+ model {\r+ vector [n] mu;\r+ + //Priors\r+ beta ~ normal(0,1000);\r+ sigma ~ cauchy(0,25);\r+ + mu = x*beta;\r+ //Likelihood\r+ y ~ normal(mu, sigma);\r+ }\r+ generated quantities {\r+ vector [2] Group_means;\r+ real CohensD;\r+ + //Other Derived parameters + Group_means[1] = beta[1];\r+ Group_means[2] = beta[1]+beta[2];\r+ + CohensD = beta[2] /sigma; + }\r+ + \u0026quot;\r\u0026gt; ## write the model to a text file\r\u0026gt; writeLines(stanString.means, con = \u0026quot;ttestModelMeans.stan\u0026quot;)\rArrange the data as a list (as required by STAN).\n\u0026gt; data.list \u0026lt;- with(data, list(y = y, x = (xn - 1), n = nrow(data)))\r\u0026gt; X \u0026lt;- model.matrix(~x, data)\r\u0026gt; data.list.means = with(data, list(y = y, x = X, n = nrow(data), nX = ncol(X)))\rDefine the initial values for the chain. Reasonable starting points can be gleaned from the data themselves.\n\u0026gt; inits \u0026lt;- list(beta0 = mean(data$y), beta = c(NA, diff(tapply(data$y,\r+ data$x, mean))), sigma = sd(data$y/2))\r\u0026gt; inits.means \u0026lt;- list(beta = tapply(data$y, data$x, mean), sigma = sd(data$y/2))\rDefine the nodes (parameters and derivatives) to monitor.\n\u0026gt; params \u0026lt;- c(\u0026quot;beta0\u0026quot;, \u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;)\r\u0026gt; params.means \u0026lt;- c(\u0026quot;beta\u0026quot;, \u0026quot;sigma\u0026quot;, \u0026quot;Group_means\u0026quot;,\u0026quot;CohensD\u0026quot;)\rDefine the chain parameters.\n\u0026gt; burnInSteps = 500 # the number of initial samples to discard\r\u0026gt; nChains = 2 # the number of independed sampling chains to perform \u0026gt; thinSteps = 1 # the thinning rate\r\u0026gt; nIter = 2000\rStart the STAN model (check the model, load data into the model, specify the number of chains and compile the model). Load the rstan package.\n\u0026gt; library(rstan)\rWhen using the stan function (rtsan package), it is not necessary to provide initial values. However, if they are to be supplied, the inital values must be provided as a list of the same length as the number of chains.\nEffects Parameterisation\n\u0026gt; data.stan = stan(file = \u0026quot;ttestModel.stan\u0026quot;, + data = data.list, + pars = params,\r+ iter = nIter,\r+ warmup = burnInSteps, + chains = nChains, + thin = thinSteps, + init = \u0026quot;random\u0026quot;, #or inits=list(inits,inits)\r+ refresh = 0)\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.stan)\rInference for Stan model: ttestModel.\r2 chains, each with iter=2000; warmup=500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5%\rbeta0 105.20 0.01 0.36 104.47 104.95 105.20 105.44 105.91\rbeta -27.32 0.01 0.57 -28.43 -27.72 -27.33 -26.93 -26.22\rsigma 2.79 0.00 0.21 2.41 2.64 2.77 2.92 3.23\rGroup_means[1] 105.20 0.01 0.36 104.47 104.95 105.20 105.44 105.91\rGroup_means[2] 77.88 0.01 0.45 77.01 77.59 77.87 78.18 78.76\rCohensD -9.85 0.02 0.75 -11.36 -10.35 -9.86 -9.35 -8.36\rlp__ -150.78 0.04 1.25 -154.05 -151.31 -150.44 -149.88 -149.34\rn_eff Rhat\rbeta0 1802 1\rbeta 1731 1\rsigma 2187 1\rGroup_means[1] 1802 1\rGroup_means[2] 2826 1\rCohensD 2238 1\rlp__ 1272 1\rSamples were drawn using NUTS(diag_e) at Mon Feb 10 14:10:29 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\rMeans Parameterisation\n\u0026gt; data.stan.means = stan(file = \u0026quot;ttestModelMeans.stan\u0026quot;, + data = data.list.means, + pars = params.means,\r+ iter = nIter,\r+ warmup = burnInSteps, + chains = nChains, + thin = thinSteps, + init = \u0026quot;random\u0026quot;, #or inits=list(inits.means,inits.means)\r+ refresh = 0)\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.stan.means)\rInference for Stan model: ttestModelMeans.\r2 chains, each with iter=2000; warmup=500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5%\rbeta[1] 105.21 0.01 0.37 104.51 104.96 105.20 105.44 105.92\rbeta[2] -27.33 0.01 0.58 -28.47 -27.71 -27.31 -26.93 -26.23\rsigma 2.78 0.00 0.20 2.43 2.64 2.76 2.90 3.22\rGroup_means[1] 105.21 0.01 0.37 104.51 104.96 105.20 105.44 105.92\rGroup_means[2] 77.88 0.01 0.44 77.02 77.59 77.88 78.17 78.77\rCohensD -9.88 0.02 0.74 -11.35 -10.40 -9.89 -9.40 -8.40\rlp__ -150.74 0.03 1.26 -153.85 -151.33 -150.42 -149.83 -149.33\rn_eff Rhat\rbeta[1] 1439 1\rbeta[2] 1654 1\rsigma 1955 1\rGroup_means[1] 1439 1\rGroup_means[2] 3595 1\rCohensD 2056 1\rlp__ 1397 1\rSamples were drawn using NUTS(diag_e) at Mon Feb 10 14:11:08 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\rNotes\n\rIf inits=\"random\" the stan function will randomly generate initial values between \\(-2\\) and \\(2\\) on the unconstrained support. The optional additional parameter init_r can be set to some value other than \\(2\\) to change the range of the randomly generated inits. Other available options include: set inits=\"0\" to initialize all parameters to zero on the unconstrained support; set inital values by providing a list equal in length to the number of chains; set initial values by providing a function that returns a list for specifying the initial values of parameters for a chain.\n\rIn addition to the mean and quantiles of each of the sample nodes, the stan function will calculate.\nThe effective sample size for each sample - if n.eff for a node is substantially less than the number of iterations, then it suggests poor mixing.\n\rThe Potential scale reduction factor or Rhat values for each sample - these are a convergence diagnostic (values of \\(1\\) indicate full convergence, values greater than \\(1.01\\) are indicative of non-convergence.\n\r\r\rThe total number samples collected is \\(3000\\). That is, there are \\(3000\\) samples collected from the multidimensional posterior distribution and thus, \\(3000\\) samples collected from the posterior distributions of each parameter. The effective number of samples column indicates the number of independent samples represented in the total. It is clear that for all parameters the chains were well mixed.\n\r\rMCMC diagnostics\rAgain, prior to examining the summaries, we should have explored the convergence diagnostics. There are numerous ways of working with STAN model fits (for exploring diagnostics and summarisation).\nextract the mcmc samples and convert them into a mcmc.list to leverage the various mcmcplots routines\n\ruse the numerous routines that come with the rstan package\n\ruse the routines that come with the bayesplot package\n\r\rWe will explore all of these.\n\rmcmcplots\r\rFirst, we need to convert the rtsan object into an mcmc.list object to apply the functions in the mcmcplots package.\n\u0026gt; library(mcmcplots)\r\u0026gt; s = as.array(data.stan.means)\r\u0026gt; mcmc \u0026lt;- do.call(mcmc.list, plyr:::alply(s[, , -(length(s[1, 1, ]))], 2, as.mcmc))\rNext we look at density and trace plots.\n\u0026gt; denplot(mcmc, parms = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\r\u0026gt; traplot(mcmc, parms = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\rThese plots show no evidence that the chains have not reasonably traversed the entire multidimensional parameter space.\n\rrstan\r\rMCMC diagnostic measures that can be directly applied to rstan objects via the rstan package include: traceplots, autocorrelation, effective sample size and Rhat diagnostics.\n\u0026gt; #traceplots\r\u0026gt; stan_trace(data.stan.means, pars = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\r\u0026gt; \u0026gt; #autocorrelation\r\u0026gt; stan_ac(data.stan.means, pars = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\r\u0026gt; \u0026gt; #rhat\r\u0026gt; stan_rhat(data.stan.means, pars = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\r\u0026gt; \u0026gt; #ess\r\u0026gt; stan_ess(data.stan.means, pars = c(\u0026quot;Group_means\u0026quot;, \u0026quot;CohensD\u0026quot;))\rNote:\n\rRhat values are a measure of sampling efficiency/effectiveness. Ideally, all values should be less than \\(1.05\\). If there are values of 1.05 or greater it suggests that the sampler was not very efficient or effective. Not only does this mean that the sampler was potentiall slower than it could have been, more importantly, it could indicate that the sampler spent time sampling in a region of the likelihood that is less informative. Such a situation can arise from either a misspecified model or overly vague priors that permit sampling in otherwise nonscence parameter space.\n\rESS indicates the number samples (or proportion of samples that the sampling algorithm) deamed effective. The sampler rejects samples on the basis of certain criterion and when it does so, the previous sample value is used. Hence while the MCMC sampling chain may contain \\(1000\\) samples, if there are only \\(10\\) effective samples (\\(1\\)%), the estimated properties are not likely to be reliable.\n\rbayesplot\n\r\rAnother alternative is to use the package bayesplot, which provides a range of standardised diagnostic measures for assessing MCMC convergence and issues, which can be directly applied to the rstan object.\n\u0026gt; library(bayesplot)\r\u0026gt; \u0026gt; #density and trace plots\r\u0026gt; mcmc_combo(as.array(data.stan.means), regex_pars = \u0026quot;Group_means|CohensD\u0026quot;)\r\rModel validation\rResiduals are not computed directly within rstan. However, we can calculate them manually form the posteriors.\n\u0026gt; library(ggplot2)\r\u0026gt; mcmc = as.matrix(data.stan.means)[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; # generate a model matrix\r\u0026gt; newdata = data.frame(x = data$x)\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; ## get median parameter estimates\r\u0026gt; coefs = apply(mcmc, 2, median)\r\u0026gt; fit = as.vector(coefs %*% t(Xmat))\r\u0026gt; resid = data$y - fit\r\u0026gt; ggplot() + geom_point(data = NULL, aes(y = resid, x = fit))\rThere is no evidence that the mcmc chain did not converge on a stable posterior distribution. We are now in a position to examine the summaries of the parameters.\n\rParameter estimates\rA quick look at posterior summaries can be obtained through the command summary which can be directly applied to our rstan object.\n\u0026gt; summary(data.stan.means)\r$summary\rmean se_mean sd 2.5% 25%\rbeta[1] 105.205981 0.009650332 0.3660680 104.512893 104.95847\rbeta[2] -27.327670 0.014175541 0.5765494 -28.471465 -27.70858\rsigma 2.779295 0.004564259 0.2017951 2.425126 2.63877\rGroup_means[1] 105.205981 0.009650332 0.3660680 104.512893 104.95847\rGroup_means[2] 77.878310 0.007293288 0.4372737 77.017179 77.58974\rCohensD -9.883908 0.016318680 0.7398548 -11.345145 -10.39596\rlp__ -150.744310 0.033765022 1.2622380 -153.847632 -151.32845\r50% 75% 97.5% n_eff Rhat\rbeta[1] 105.197887 105.442341 105.923970 1438.928 1.0006369\rbeta[2] -27.313058 -26.929462 -26.228003 1654.222 0.9996207\rsigma 2.761057 2.904130 3.220382 1954.702 1.0008448\rGroup_means[1] 105.197887 105.442341 105.923970 1438.928 1.0006369\rGroup_means[2] 77.881198 78.173471 78.765424 3594.677 0.9997923\rCohensD -9.893648 -9.396558 -8.403284 2055.526 1.0013095\rlp__ -150.420841 -149.826519 -149.327836 1397.489 1.0006469\r$c_summary\r, , chains = chain:1\rstats\rparameter mean sd 2.5% 25% 50%\rbeta[1] 105.194598 0.3722763 104.485138 104.943830 105.189222\rbeta[2] -27.316749 0.5909082 -28.503315 -27.700926 -27.303076\rsigma 2.787113 0.2017944 2.439039 2.649487 2.769964\rGroup_means[1] 105.194598 0.3722763 104.485138 104.943830 105.189222\rGroup_means[2] 77.877849 0.4452879 76.953676 77.589838 77.884335\rCohensD -9.851471 0.7306980 -11.291742 -10.351622 -9.856804\rlp__ -150.774304 1.3031195 -154.143552 -151.358639 -150.446011\rstats\rparameter 75% 97.5%\rbeta[1] 105.430335 105.928130\rbeta[2] -26.900706 -26.189346\rsigma 2.905763 3.220038\rGroup_means[1] 105.430335 105.928130\rGroup_means[2] 78.167639 78.777570\rCohensD -9.358039 -8.394201\rlp__ -149.844014 -149.328052\r, , chains = chain:2\rstats\rparameter mean sd 2.5% 25% 50%\rbeta[1] 105.217363 0.3595164 104.544008 104.970466 105.208509\rbeta[2] -27.338592 0.5618086 -28.444722 -27.716894 -27.323423\rsigma 2.771476 0.2015598 2.417028 2.631247 2.750654\rGroup_means[1] 105.217363 0.3595164 104.544008 104.970466 105.208509\rGroup_means[2] 77.878771 0.4292579 77.031912 77.589743 77.878030\rCohensD -9.916344 0.7477366 -11.431004 -10.435551 -9.924630\rlp__ -150.714316 1.2196850 -153.673281 -151.305580 -150.383196\rstats\rparameter 75% 97.5%\rbeta[1] 105.450568 105.916257\rbeta[2] -26.963106 -26.265061\rsigma 2.898644 3.219905\rGroup_means[1] 105.450568 105.916257\rGroup_means[2] 78.179664 78.753253\rCohensD -9.430001 -8.422613\rlp__ -149.795340 -149.327597\rThe Group A is typically \\(27.3\\) units greater than Group B. The \\(95\\)% confidence interval for the difference between Group A and B does not overlap with \\(0\\) implying a significant difference between the two groups.\n\rGraphical summaries\rA nice graphic is often a great accompaniment to a statistical analysis. Although there are no fixed assumptions associated with graphing (in contrast to statistical analyses), we often want the graphical summaries to reflect the associated statistical analyses. After all, the sample is just one perspective on the population(s). What we are more interested in is being able to estimate and depict likely population parameters/trends. Thus, whilst we could easily provide a plot displaying the raw data along with simple measures of location and spread, arguably, we should use estimates that reflect the fitted model. In this case, it would be appropriate to plot the credibility interval associated with each group. We do this by loading functions in the package broom and dplyr.\n\u0026gt; library(broom)\r\u0026gt; library(dplyr)\r\u0026gt; mcmc = as.matrix(data.stan.means)\r\u0026gt; ## Calculate the fitted values\r\u0026gt; newdata = data.frame(x = levels(data$x))\r\u0026gt; Xmat = model.matrix(~x, newdata)\r\u0026gt; coefs = mcmc[, c(\u0026quot;beta[1]\u0026quot;, \u0026quot;beta[2]\u0026quot;)]\r\u0026gt; fit = coefs %*% t(Xmat)\r\u0026gt; newdata = newdata %\u0026gt;% cbind(tidyMCMC(fit, conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;))\r\u0026gt; newdata\rx estimate std.error conf.low conf.high\r1 A 105.20598 0.3660680 104.52503 105.93588\r2 B 77.87831 0.4372737 76.99792 78.74455\r\u0026gt; \u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_pointrange(aes(ymin = conf.low,\r+ ymax = conf.high)) + scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) +\r+ theme_classic()\rIf you wanted to represent sample data on the figure in such a simple example (single predictor) we could simply over- (or under-) lay the raw data.\n\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = data, aes(y = y,\r+ x = x), color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\rA more general solution would be to add the partial residuals to the figure. Partial residuals are the fitted values plus the residuals. In this simple case, that equates to exactly the same as the raw observations since \\(\\text{resid}=\\text{obs}−\\text{fitted}\\) and the fitted values depend only on the single predictor we are interested in.\n\u0026gt; ## Calculate partial residuals fitted values\r\u0026gt; fdata = rdata = data\r\u0026gt; fMat = rMat = model.matrix(~x, fdata)\r\u0026gt; fit = as.vector(apply(coefs, 2, median) %*% t(fMat))\r\u0026gt; resid = as.vector(data$y - apply(coefs, 2, median) %*% t(rMat))\r\u0026gt; rdata = rdata %\u0026gt;% mutate(partial.resid = resid + fit)\r\u0026gt; ggplot(newdata, aes(y = estimate, x = x)) + geom_point(data = rdata, aes(y = partial.resid),\r+ color = \u0026quot;gray\u0026quot;) + geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +\r+ scale_y_continuous(\u0026quot;Y\u0026quot;) + scale_x_discrete(\u0026quot;X\u0026quot;) + theme_classic()\r\rEffect sizes\rWe can compute summaries for our effect size of interest (e.g. Cohen’s or the percentage ES) by post-processing our posterior distributions.\n\u0026gt; mcmc = as.matrix(data.stan.means)\r\u0026gt; ## Cohen\u0026#39;s D\r\u0026gt; cohenD = mcmc[, \u0026quot;beta[2]\u0026quot;]/mcmc[, \u0026quot;sigma\u0026quot;]\r\u0026gt; tidyMCMC(as.mcmc(cohenD), conf.int = TRUE, conf.method = \u0026quot;HPDinterval\u0026quot;)\r# A tibble: 1 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 var1 -9.88 0.740 -11.3 -8.38\r\u0026gt; \u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ES = 100 * mcmc[, \u0026quot;beta[2]\u0026quot;]/mcmc[, \u0026quot;beta[1]\u0026quot;]\r\u0026gt; \u0026gt; # Probability that the effect is greater than 10% (a decline of \u0026gt;10%)\r\u0026gt; sum(-1 * ES \u0026gt; 10)/length(ES)\r[1] 1\r\rProbability statements\rAny sort of probability statements of interest about our effect size can be computed in a relatively easy way by playing around with the posteriors.\n\u0026gt; mcmc = as.matrix(data.stan.means)\r\u0026gt; \u0026gt; # Percentage change (relative to Group A)\r\u0026gt; ES = 100 * mcmc[, \u0026quot;beta[2]\u0026quot;]/mcmc[, \u0026quot;beta[1]\u0026quot;]\r\u0026gt; hist(ES)\r\u0026gt; \u0026gt; # Probability that the effect is greater than 10% (a decline of \u0026gt;10%)\r\u0026gt; sum(-1 * ES \u0026gt; 10)/length(ES)\r[1] 1\r\u0026gt; \u0026gt; # Probability that the effect is greater than 25% (a decline of \u0026gt;25%)\r\u0026gt; sum(-1 * ES \u0026gt; 25)/length(ES)\r[1] 0.978\r\rFinite population standard deviations\rEstimates for the variability associated with between and within group differences can also be easily obtained.\n# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 19.3 0.408 18.5 20.1 2 sd.resid 2.75 0.0207 2.74 2.79\r# A tibble: 2 x 5\rterm estimate std.error conf.low conf.high\r\u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r1 sd.x 87.5 0.238 87.1 87.8\r2 sd.resid 12.5 0.238 12.2 12.9\r\rUnequally varied populations\rWe can also generate data assuming two populations with different variances, e.g. between male and female subgroups.\n\u0026gt; set.seed(123)\r\u0026gt; n1 \u0026lt;- 60 #sample size from population 1\r\u0026gt; n2 \u0026lt;- 40 #sample size from population 2\r\u0026gt; mu1 \u0026lt;- 105 #population mean of population 1\r\u0026gt; mu2 \u0026lt;- 77.5 #population mean of population 2\r\u0026gt; sigma1 \u0026lt;- 3 #standard deviation of population 1\r\u0026gt; sigma2 \u0026lt;- 2 #standard deviation of population 2\r\u0026gt; n \u0026lt;- n1 + n2 #total sample size\r\u0026gt; y1 \u0026lt;- rnorm(n1, mu1, sigma1) #population 1 sample\r\u0026gt; y2 \u0026lt;- rnorm(n2, mu2, sigma2) #population 2 sample\r\u0026gt; y \u0026lt;- c(y1, y2)\r\u0026gt; x \u0026lt;- factor(rep(c(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;), c(n1, n2))) #categorical listing of the populations\r\u0026gt; xn \u0026lt;- rep(c(0, 1), c(n1, n2)) #numerical version of the population category\r\u0026gt; data2 \u0026lt;- data.frame(y, x, xn) # dataset\r\u0026gt; head(data2) #print out the first six rows of the data set\ry x xn\r1 103.3186 A 0\r2 104.3095 A 0\r3 109.6761 A 0\r4 105.2115 A 0\r5 105.3879 A 0\r6 110.1452 A 0\rStart by defining the model\n\\[ y_i = \\beta_0 + \\beta_1x_i + \\epsilon, \\]\nwhere \\(\\epsilon_1 \\sim \\text{Normal}(0,\\sigma_1)\\) for \\(x_1=0\\) (females), and \\(\\epsilon_2 \\sim \\text{Normal}(0,\\sigma_2)\\) for \\(x_2=1\\) (males). In STAN code, the model becomes:\n\u0026gt; stanStringv3 = \u0026quot; + data {\r+ int n;\r+ vector [n] y;\r+ vector [n] x;\r+ int\u0026lt;lower=1,upper=2\u0026gt; xn[n];\r+ }\r+ parameters {\r+ vector \u0026lt;lower=0, upper=100\u0026gt;[2] sigma;\r+ real beta0;\r+ real beta;\r+ }\r+ transformed parameters {\r+ }\r+ model {\r+ vector [n] mu;\r+ //Priors\r+ beta0 ~ normal(0,1000);\r+ beta ~ normal(0,1000);\r+ sigma ~ cauchy(0,25);\r+ + mu = beta0 + beta*x;\r+ //Likelihood\r+ for (i in 1:n) y[i] ~ normal(mu[i], sigma[xn[i]]);\r+ }\r+ generated quantities {\r+ vector [2] Group_means;\r+ real CohensD;\r+ real CLES;\r+ + Group_means[1] = beta0;\r+ Group_means[2] = beta0+beta;\r+ CohensD = beta /(sum(sigma)/2);\r+ CLES = normal_cdf(beta /sum(sigma),0,1); + }\r+ + \u0026quot;\r\u0026gt; \u0026gt; ## write the model to a text file \u0026gt; writeLines(stanStringv3,con=\u0026quot;ttestModelv3.stan\u0026quot;)\rWe specify priors directly on \\(\\sigma_1\\) and \\(\\sigma_2\\) using Cauchy distributions with a scale of \\(25\\). Next, arrange the data as a list (as required by STAN) and define the MCMC parameters.\n\u0026gt; data2.list \u0026lt;- with(data, list(y = y, x = (xn - 1), xn = xn, n = nrow(data)))\r\u0026gt; paramsv3 \u0026lt;- c(\u0026quot;beta0\u0026quot;,\u0026quot;beta\u0026quot;,\u0026quot;sigma\u0026quot;,\u0026quot;Group_means\u0026quot;,\u0026quot;CohensD\u0026quot;, \u0026quot;CLES\u0026quot;)\r\u0026gt; burnInSteps = 500\r\u0026gt; nChains = 2\r\u0026gt; thinSteps = 1\r\u0026gt; nIter = 2000\rFinally, fit the model in STAN and print the results.\n\u0026gt; data.stanv3 = stan(file = \u0026quot;ttestModelv3.stan\u0026quot;, + data = data2.list, + pars = paramsv3,\r+ iter = nIter,\r+ warmup = burnInSteps, + chains = nChains, + thin = thinSteps, + init = \u0026quot;random\u0026quot;, #or inits=list(inits,inits)\r+ refresh = 0)\r\u0026gt; \u0026gt; #print results\r\u0026gt; print(data.stanv3)\rInference for Stan model: ttestModelv3.\r2 chains, each with iter=2000; warmup=500; thin=1; post-warmup draws per chain=1500, total post-warmup draws=3000.\rmean se_mean sd 2.5% 25% 50% 75% 97.5%\rbeta0 105.21 0.01 0.36 104.51 104.97 105.21 105.44 105.92\rbeta -27.34 0.01 0.57 -28.45 -27.71 -27.35 -26.96 -26.21\rsigma[1] 2.79 0.01 0.27 2.31 2.60 2.77 2.97 3.38\rsigma[2] 2.88 0.01 0.34 2.31 2.63 2.84 3.07 3.65\rGroup_means[1] 105.21 0.01 0.36 104.51 104.97 105.21 105.44 105.92\rGroup_means[2] 77.86 0.01 0.44 77.00 77.57 77.86 78.15 78.75\rCohensD -9.70 0.02 0.76 -11.23 -10.23 -9.69 -9.17 -8.26\rCLES 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00\rlp__ -150.30 0.04 1.42 -153.88 -151.02 -149.99 -149.25 -148.53\rn_eff Rhat\rbeta0 2426 1\rbeta 2359 1\rsigma[1] 2166 1\rsigma[2] 2547 1\rGroup_means[1] 2426 1\rGroup_means[2] 3478 1\rCohensD 2468 1\rCLES 1875 1\rlp__ 1277 1\rSamples were drawn using NUTS(diag_e) at Mon Feb 10 14:11:55 2020.\rFor each parameter, n_eff is a crude measure of effective sample size,\rand Rhat is the potential scale reduction factor on split chains (at convergence, Rhat=1).\r\rReferences\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rGelman, Andrew, and others. 2006. “Prior Distributions for Variance Parameters in Hierarchical Models (Comment on Article by Browne and Draper).” Bayesian Analysis 1 (3): 515–34.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\r\r\r","date":1580609594,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580609594,"objectID":"1800c435d174d6f0595943438a103ae4","permalink":"/stan/comparing-two-populations-stan/comparing-two-populations-stan/","publishdate":"2020-02-01T21:13:14-05:00","relpermalink":"/stan/comparing-two-populations-stan/comparing-two-populations-stan/","section":"STAN","summary":"This tutorial will focus on the use of Bayesian estimation to explore differences between two populations. BUGS (Bayesian inference Using Gibbs Sampling) is an algorithm and supporting language (resembling R) dedicated to performing the Gibbs sampling implementation of Markov Chain Monte Carlo (MCMC) method. Dialects of the BUGS language are implemented within three main projects:\nOpenBUGS - written in component pascal.\n\rJAGS - (Just Another Gibbs Sampler) - written in C++.","tags":["tutorials","STAN","population differences"],"title":"Comparing Two Populations - STAN","type":"STAN"},{"authors":["A Gabrio"],"categories":null,"content":"","date":1580515200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580515200,"objectID":"a259569c4eec6977fc373574bdeecc7e","permalink":"/publication/gabrio2020/","publishdate":"2019-11-22T00:00:00Z","relpermalink":"/publication/gabrio2020/","section":"publication","summary":"Statistical modelling of sports data has become more and more popular in the recent years and different types of models have been proposed to achieve a variety of objectives: from identifying the key characteristics which lead a team to win or lose to predicting the outcome of a game or the team rankings in national leagues. Although not as popular as football or basketball, volleyball is a team sport with both national and international level competitions in almost every country. However, there is almost no study investigating the prediction of volleyball game outcomes and team rankings in national leagues. We propose a Bayesian hierarchical model for the prediction of the rankings of volleyball national teams, which also allows to estimate the results of each match in the league. We consider two alternative model specifications of different complexity which are validated using data from the women's volleyball Italian Serie A1 2017-2018 season.","tags":["Bayesian methods","Volleyball","Hierarchical Models"],"title":"Bayesian Hierarchical Models for the Prediction of Volleyball Results","type":"publication"},{"authors":["Andrea Gabrio"],"categories":["news","talks","PRIMENT"],"content":"The new year is finally taking off for me and I have a couple of updates. First, I would like to remind everyone about the exciting new course \u0026ldquo;understanding health economics in clinical trials\u0026rdquo; that me and the rest of our research team HEART have put together to support the dissemination of health economics among all people involved in the design and analysis of clinical trials. I look forward to deliver this one-day short course together with my colleagues from the UCL PCPH department which will be structured into different sessions during the day of Feb 11th at the UCL CCTU - 2nd Floor, 90 High Holborn, London. The course is specifically intended for those who would like to know more about health economics, which has become an important component in the design, analysis and most crucially, for the funding approval of clinical trials. The course will focus on the following aspects:\n  A short intorduction to the basic concepts of health economics and why these can be relevent to different people\n  A review of different types of intruments and tools used to collect health economic data in clinical trials\n  A quick look at decision models with some examples\n  A summary of the typical results from health economic analyses and how to interpret them\n  The course is still in its pilot form and therfore it is free of charge. If there are still places available, you are very welcome to join and give us your feedback!.\nSecond, I am happy to announce that my recent paper about the use of Bayesian Hierarchical Models for the Prediction of Volleyball Results has finally been published on the Journal of Applied Statistics. I am really proud of this paper as it is my first solo paper publiched and because I have always been very invested in the general topic of predicting sport results using probability models. To be able to publish something about this based on my own efforts is very rewarding in terms of the (small) contribution to research that I hope I was able to provide.\nFinally, I have submitted an abstract to the 2020 European Health Economics Association Conference, which this year will be held in Oslo, Norway.\nI have now to patiently wait for the review of the abstracts and see if my work made it, either as an oral presenation or as a poster. Fingers crossed!.\n","date":1580515200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580556843,"objectID":"1a17de6f401df35d356e42a6fcb7311e","permalink":"/post/update-february/","publishdate":"2020-02-01T00:00:00Z","relpermalink":"/post/update-february/","section":"post","summary":"The new year is finally taking off for me and I have a couple of updates. First, I would like to remind everyone about the exciting new course \u0026ldquo;understanding health economics in clinical trials\u0026rdquo; that me and the rest of our research team HEART have put together to support the dissemination of health economics among all people involved in the design and analysis of clinical trials. I look forward to deliver this one-day short course together with my colleagues from the UCL PCPH department which will be structured into different sessions during the day of Feb 11th at the UCL CCTU - 2nd Floor, 90 High Holborn, London.","tags":["News","Academic","Publication"],"title":"Finally here ...","type":"post"},{"authors":[],"categories":null,"content":"","date":1580210100,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1580210100,"objectID":"834821180f97e5e82b96a2f72eda0a02","permalink":"/talk/priment2020/","publishdate":"2019-11-24T00:00:00Z","relpermalink":"/talk/priment2020/","section":"talk","summary":"Invited presentation","tags":["Economic Evaluations","Missing Data"],"title":"Choosing the Missing Data Method in Trial-Based Economic Evaluations. How to Make the Right Choice?","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["news","talks","PRIMENT"],"content":"After the terrible start of this year, things are going ok now and I am quite busy with different projects that I left a bit behind. First, I can confirm that me and my colleagues from the HEART group are going to give an introductory course to health economic evaluations next month for different groups of people from academia and clinical trial units. The course has been generally structured based on our \u0026ldquo;pilot\u0026rdquo; we gave last year (which went really well by the way) and involves many different topics that will cover the entire day of February 11th. The attending list is already full and thw waiting list is also quite big; happy to see so much interest in economic evaluations.\nSecond, I will give a talk at the PRIMENT statistics and health economics and methodology seminar about an on-going project on missing data in trial-based analysis on Tuesday 28th, at UCL PRIMENT CTU. I am really happy to be back at these seminars which I feel I really nice and where you have the opportunity to interact with people from different backgrounds and job positions who may give some useful feedback on my work. Hopefully, people will find my research interesting!. I would also like to mention the fact that one of my HEART colleague, Marie, will give another talk at the same seminar just before me. Her topic is the economic analysis plan for a trial she has been involved with and I think she is really good, so may worth check her presentaiton out.\nThird, I have finalised a long-waited submission for a paper which has been discussed, written and re-written many times. I really hope we can get some useful feedback on it as I personally worked very hard to keep this work alive. Let see if my efforts have not been in vain and fingers crossed!\nFourth, as a side note, I have recently bought a new book on missing data called Semiparametric Thoery and Missing Data by Tsiatis, which looks very interesting. To be honest, the book is quite technical with many theoretical concpets and proofs which sometimes I find hard to follow. However, so far it gives a nice introduction to semiparametric models and I look forward to see how it approaches the missing data topic from a non likelihood-based approach. If you are into non/semiparametric statistics and want to find out more about this, I recommend the reading.\nFinally, more work is also coming up in the next weeks and some of this is not going to be very enjoyable, I think. Anyway, let us go through this busy period at our best and see how things will go.\n","date":1578528000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578569643,"objectID":"86a4b6d8880e417ff7d095dfbed94999","permalink":"/post/update-january2/","publishdate":"2020-01-09T00:00:00Z","relpermalink":"/post/update-january2/","section":"post","summary":"After the terrible start of this year, things are going ok now and I am quite busy with different projects that I left a bit behind. First, I can confirm that me and my colleagues from the HEART group are going to give an introductory course to health economic evaluations next month for different groups of people from academia and clinical trial units. The course has been generally structured based on our \u0026ldquo;pilot\u0026rdquo; we gave last year (which went really well by the way) and involves many different topics that will cover the entire day of February 11th.","tags":["News","Academic","talks"],"title":"Let us do some work","type":"post"},{"authors":[],"categories":null,"content":"","date":1575896400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575896400,"objectID":"ef55746dc1f839190eecabdfbe1d4252","permalink":"/talk/priment2019/","publishdate":"2019-11-24T00:00:00Z","relpermalink":"/talk/priment2019/","section":"talk","summary":"Invited presentation","tags":null,"title":"MissingHE An R package to deal with missing data in trial based health economic evaluations","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["news","2020"],"content":"After some nice holiday break, I came back to work ready for an exciting 2020 \u0026hellip; or so I thought. Unfortunately, I have recently been caught by a terrible flu which forced me to postpone my flight back to London of a week. The worst part is that I was basically a dead corpse moving around with high fever and an awful condition for more than 4 days. It was quite a bad experience which I rarely had in my life. I am just glad I survived this.\nGoing back to more interesting news. Before my cursed period, I was smart enough to work on different things and I am happy to announce a new update for my missingHE package, which is available both on my GitHub page and on the CRAN repository. Its new version is 1.3.2 and has the nice addition of making available more choices for the parametric distributions that can be selected in all main functions of the package to handle missing data in trial-based economic evaluations. In particular, it is now possible to choose among new probability distributions for the health outcomes, including continuous (Gamma, Weibull, Exponential, Logistic), discrete (Poisson, Negative Binomial) and binary (Bernoulli) distributions. These may be useful when the analysis is not based on utilities scores but some other types of effects, such as survival time, number of events or binary outcomes. I have also included some examples for each type of outcome in the MenSS dataset (available directly once installed the package on your machine) so that people can play around with the new distributions.\nAnother good news is that the last paper written with Michael about missing data handling in economic evaluations will soon be publiched in the February issue of JRSSA, which will make the final and official version of the article that can be cited, I think.\nFinally, an announcement about the one-day course I am holding together with my mates from the HEART group about an introduction to economic evaluations to people who are not familiar with health economics. The course will take place next month, I believe on Feb 11th, in central London (soon an update about the exact location) and, as the previous edition, I am happy to see that all spots have been taken and everything is sold out (well, to be precise the course is free \u0026hellip;). Need to meet up with the others to make the last changes and prepare the slides but I am quite excited about this, given also the good response we got last time.\nNow I am (hopefully) ready to start the new year and there are many things already piling up on my list of things to do in the next days. Let\u0026rsquo;s try again 2020.\n","date":1575849600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575891243,"objectID":"8839c0783a511af23ea9bcb595ecdbf7","permalink":"/post/update-january/","publishdate":"2019-12-09T00:00:00Z","relpermalink":"/post/update-january/","section":"post","summary":"After some nice holiday break, I came back to work ready for an exciting 2020 \u0026hellip; or so I thought. Unfortunately, I have recently been caught by a terrible flu which forced me to postpone my flight back to London of a week. The worst part is that I was basically a dead corpse moving around with high fever and an awful condition for more than 4 days. It was quite a bad experience which I rarely had in my life.","tags":["News","Academic"],"title":"Not a very good start...","type":"post"},{"authors":["A Gabrio"],"categories":null,"content":"","date":1574380800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1574380800,"objectID":"303356de7837fb8e5dc4516c3402f840","permalink":"/publication/gabrio2019e/","publishdate":"2019-11-22T00:00:00Z","relpermalink":"/publication/gabrio2019e/","section":"publication","summary":"Statistical modelling of sports data has become more and more popular in the recent years and different types of models have been proposed to achieve a variety of objectives: from identifying the key characteristics which lead a team to win or lose to predicting the outcome of a game or the team rankings in national leagues. Although not as popular as football or basketball, volleyball is a team sport with both national and international level competitions in almost every country. However, there is almost no study investigating the prediction of volleyball game outcomes and team rankings in national leagues. We propose a Bayesian hierarchical model for the prediction of the rankings of volleyball national teams, which also allows to estimate the results of each match in the league. We consider two alternative model specifications of different complexity which are validated using data from the women's volleyball Italian Serie A1 2017-2018 season.","tags":["Bayesian methods","Volleyball","Hierarchical Models"],"title":"Bayesian Hierarchical Models for the Prediction of Volleyball Results","type":"publication"},{"authors":["Andrea Gabrio"],"categories":["news","Christmas"],"content":"I did not have much time to post anything this month until now as it has been a quite busy period. I have been involved in many different works and I have also involved other people in what I think could be some very interesting new projects. Not that I complain about having many different things to do (most of them are actually cool) but doing everything in a short period is not the best.\nA couple of things have come/are coming up. First, I have seriously started working on the coding of a decision model for some health economic evaluation project I have been involved in since last year. Everything seems ok after I spent lots of days and time fixing some small bugs in my code. I am about half way through the model and I hope I will be able to finish it before Christmas (I doubt it though).\nSecond, I have finished reviewing an interesting paper about some new methods for improving current practice for dealing with missing data, which I kinda enjoy reading (very good!).\nThird, I would like to quickly summarise my first experience at ISPOR Europe in Copenhagen. I was really excited to attend this conference which, as expected, revealed itself as huge with people coming from all over the world and with many interesting sessions and discussion topics. I had the chance to meet new and old people, such as professor Andrea Manca and the always very kind Chris Sampson for whom I was like a stalker asking for more and more information about himself and his work. I also met some of my old collegues from MapiGroup, now under ICON plc. It was very fun to hang out with these old friends and see what they have been up to during this time. Among them, I gladly caught up with my dear friend Ryan Pulleyblank, now doing a PhD at the University of Southern Denmark. My poster was a success with (unexpectedly) many people stopping by and asking for more information on my work. I was genuinely surprised by this as ISPOR is mostly a conference dedicated to companies rather than academic works and networking. To sum up, it was a very nice and fun experience and despite the level of statistical methodology was not particularly high I enjoyed my time there and I also had the chance to visit Copenhagen for the first time.\nFinally, as a side note, I have found the time to upload on my arXiv page a nice application of Bayesian hierarchical models for the prediction of volleyball matches which I have been working on the past summer, taking inspiration from the work of Gianluca about predicting football macthes. I hope my work can turn out in something cool as well.\nThis is all for the moment but soon I will be heading back to another quite busy period for me. I hope this will be the last for some time, especially given that Christmas is coming and I would like to have some free time to properly enjoy this period, which I really like, even more than Christmas itself.\n","date":1573257600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1573299243,"objectID":"4d4989c8f96fb85ba1f81a1451bbaa83","permalink":"/post/update-november/","publishdate":"2019-11-09T00:00:00Z","relpermalink":"/post/update-november/","section":"post","summary":"I did not have much time to post anything this month until now as it has been a quite busy period. I have been involved in many different works and I have also involved other people in what I think could be some very interesting new projects. Not that I complain about having many different things to do (most of them are actually cool) but doing everything in a short period is not the best.","tags":["News","Academic","Christmas"],"title":"Too many things, again....","type":"post"},{"authors":[],"categories":null,"content":"","date":1572872400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572872400,"objectID":"a980e034b0bf0d1396268ed836bcf343","permalink":"/talk/isporeu2019/","publishdate":"2019-08-02T00:00:00Z","relpermalink":"/talk/isporeu2019/","section":"talk","summary":"Contibuted poster","tags":["Economic Evaluations","Missing Data"],"title":"A Bayesian Parametric Approach to Handle Missing Longitudinal Outcome Data in Trial-Based Health Economic Evaluations","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["news","conferences"],"content":"Finally the time of ISPOR Europe 2019 has arrived and I will depart in a few days for Copenhagen, where the conference is held this year. I am actually looking forward to this as I am curious to see what type of conference ISPOR is, that is, whether I will be able to find some interesting works and have some \u0026ldquo;applied statistics\u0026rdquo;-related discussions or the attention is more placed on \u0026ldquo;economics and clinical\u0026rdquo; matters. From what I heard by other people who routinely attend the conference, there should be a bit of both sides, even though I really hope I will be able to see some intersting methods and engage in discussion with some authors.\nI know the conference is mainly related to address the needs of pharmaceutical and consultancy companies, but I hope I will be able to see some familiar faces there. Well, to be honest I know that some people I already know are going, which is good considering that their work is really cool. As for me, I will present the same work that I showed at ICTMC 2019 (some slides available here), but this time in the format of a poster, of which I am kind of very proud in terms of the final output, if I may say so.\nApart from this nice event, there are many things coming up when I will be back from the conference, which I really need to start working on. Mostly, these are related to some routine work for some trial analyses at PRIMENT, which by the way is advertising a new health economist job vacancy for those who might be interested. Other tasks include writing down and code a decision model on which I have been working since ages, papers review, other collaborations with different people, starting my co-supervison for a new PhD student at stats and, after I can find some free time, do some reasearch work on my beloved missing data. Am I ready? not sure about that \u0026hellip;\n","date":1572220800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1572262443,"objectID":"4290b3a1cb0e2b13693c9588a7c6a6cd","permalink":"/post/update3-october/","publishdate":"2019-10-28T00:00:00Z","relpermalink":"/post/update3-october/","section":"post","summary":"Finally the time of ISPOR Europe 2019 has arrived and I will depart in a few days for Copenhagen, where the conference is held this year. I am actually looking forward to this as I am curious to see what type of conference ISPOR is, that is, whether I will be able to find some interesting works and have some \u0026ldquo;applied statistics\u0026rdquo;-related discussions or the attention is more placed on \u0026ldquo;economics and clinical\u0026rdquo; matters.","tags":["News","Academic","Conferences"],"title":"Copenhagen, I am coming ...","type":"post"},{"authors":["Andrea Gabrio"],"categories":["news","conferences"],"content":"Just a quick update about some talks I gave/am about to give to advertise my research work. The one in Brighton, which I gave a couple of weeks a go at ICTMC, went really well and I was glad to hear that some people were very interested in what I presented. For more info, here a link to my presentation about missing data methods for trial-based economic evaluations that I discussed. Honestly, since the conference was mainly directed towards people working in clinical trials, I did not expect a huge interest in the use of Bayesian methods for economic evaluations, but apparently (and I am happy about that) I was wrong.\nI had the chance to chat a bit with few people that I did not know, including William Hollingworth from Bristol and Ines Rombach from Oxford, with whom I had very nice conversations about my work and other interesting topics. I was also glad to meet some known faces, including the always lovely Catrin Plumpton from Bangor University, who I met for the first time at HESG this summer and with whom I share the interest in missing data methods (even though she is a STATA and multiple imputation user, sadly). I am also glad that I met my previous PhD secondary supervisor, Alexina Mason, with whom it is always a pleasure to talk with. Unfortunately, we both missed the talk of each other becuase of time problems but it was good to catch up with her again. I am also sad that I could not attend Baptiste\u0026lsquo;s presentation which was the last day of the conference (I had to leave the same day of my talk, the first day) and I was not also able to actually meet him. I hope we will be able to see him soon at some other conference in the near future.\nGiven this past experience, I am now looking forward to meet new people at my next conference at the Bella Center in Copenhagen (thumbnail) where this year ISPOR Europe 2019 will be held. However, I believe this will be a much larger conference and therefore I will probably not have many chances to talk with people as I did at ICTMC. Plus I am only preseting a poster this time, so it will be less likely that some people will actually notice my work, especially given the typically huge amount of presenters of this type of conferences. In the wrost case, I will enjoy Copenhagen and meet up with some old friends who live in Denmark and who will come at ISPOR to present some other work.\n","date":1571097600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1571139243,"objectID":"2d6798f4902280dea56962da08530a02","permalink":"/post/update2-october/","publishdate":"2019-10-15T00:00:00Z","relpermalink":"/post/update2-october/","section":"post","summary":"Just a quick update about some talks I gave/am about to give to advertise my research work. The one in Brighton, which I gave a couple of weeks a go at ICTMC, went really well and I was glad to hear that some people were very interested in what I presented. For more info, here a link to my presentation about missing data methods for trial-based economic evaluations that I discussed.","tags":["News","Academic","Publication"],"title":"Conferences updates and news","type":"post"},{"authors":[],"categories":null,"content":"","date":1570446000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570446000,"objectID":"df74c48b54aa2fc2fe3c5c3c71c7f2a8","permalink":"/talk/ictmc2019/","publishdate":"2019-08-01T00:00:00Z","relpermalink":"/talk/ictmc2019/","section":"talk","summary":"Contibuted presentation","tags":["Economic Evaluations","Missing Data"],"title":"A Bayesian Parametric Approach to Handle Missing Longitudinal Outcome Data in Trial-Based Health Economic Evaluations","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["news","conferences"],"content":"I have got two news coming up. First, the paper I wrote with Michael and Gianluca on Bayesian methdos for longitudinal data in trial-based economic evaluations has finally been published as early view on JRSSA. As I said in some earlier posts, I am super happy about this collaboration and I hope I can continue working on similar projects in the future.\nSecond, I will soon give a talk about this work at the ICTMC conference in Brighton, next Monday. This will be the first time at this conference and unfortunately I will only be able to remain around for one day as I need to go back to London pretty soon. I hope I will be able to enjoy my day at the conference, even though I will miss the talks of Baptiste and Alexina which are scheduled for the last day of the conference. I hope I can at least have a quick chat with them the day I am around.\nI am also excited to visit Brighton, since many people keep telling me that I should go and visit this sort of british version of \u0026ldquo;Rimini\u0026rdquo;. To be honest, I do not expect to find a nice wheather, given that in this period it is raining a lot in London, but I hope I will be lucky and get the only sunny day of the week.\nFinally, I have started a rubric called missing data on my website, where I try to describe some of the most popular methods to handle missing data and to provide some references for anyone who could be interested in this field. I am really fascinated by statistical methods for dealing with missingness, perhaps because it was the main focus of my PhD, but I am eager to review different methods and see if I can find something really interesting. Of course, to complete this it will take more time, which I hope I will be able to find in the next months.\n","date":1569888000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569929643,"objectID":"4c3b10d9662be9e28d6bd91a6e8d7d29","permalink":"/post/update-october/","publishdate":"2019-10-01T00:00:00Z","relpermalink":"/post/update-october/","section":"post","summary":"I have got two news coming up. First, the paper I wrote with Michael and Gianluca on Bayesian methdos for longitudinal data in trial-based economic evaluations has finally been published as early view on JRSSA. As I said in some earlier posts, I am super happy about this collaboration and I hope I can continue working on similar projects in the future.\nSecond, I will soon give a talk about this work at the ICTMC conference in Brighton, next Monday.","tags":["News","Academic","Publication"],"title":"More good news...","type":"post"},{"authors":["Andrea Gabrio"],"categories":["package","R"],"content":"I have finally found some time to update the version for my R package missingHE, for which version 1.2.1 is now available on CRAN. I included two main features to the previous version of the package.\nFirst, I have added a new type of identifying restriction when fitting pattern mixture models through the function \u0026ldquo;pattern\u0026rdquo;. Before, only the complete case restriction was available, which identifies the distributions of the missing data with those from the completers. Now the alternative available case restriction is can also be selected, which relies on the distributions that can be identified among the non-completers to identify the distributions of the missing data. In this way, people can choose among at least two options for the type of restrictions and compare how this choice may affect the final estimates.\nSecond, I added a new accessory function called \u0026ldquo;ppc\u0026rdquo;, which allows to perform posterior predictive checks using the conditional parameters saved from the fitted model to generate replications of the data at each posterior iteration of the model. The function implements a relatively large number of checks, mostly taken from the R package bayesplot, which allow to assess the fit of the model to the observed data by type of outcome (effects and costs) and treatment group (control and intervention). For example, overalyed density plots can be generated to compare the empirical and replicated densities of the data to detect possible failures of the model.\n\rDensity plots for the observed and replicated data\r\r\rI feel this is very important as when fitting a Bayesian model it is crucial to assess whether the model seems to adequately capture the different characteristics of the observed data (e.g. skewness, structural values, etc.). A wide range of predictive checks are available, including histograms (see thumbnail pciture), scatterplots, error intervals, empirical cumulative distribution fucntions, statistcis of interest and many others. In addition , these checks can be performed for each type of missingness model and parametric distribution chosen within missingHE.\nOf course, it is important to remember that, when dealing with missing data the fit of the model can only be checked with respect to the observed values and therefore this check is only partial since the fit to the unibserved values can never be checked. This is also why it is not meaningful to assess the fit of a model fitted under a missing not at random assumption because this is based on information which is not directly available from the data at hand and thus impossible to check.\n","date":1569369600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569411243,"objectID":"cbb05f40714cf0203644f57a8c8c1d48","permalink":"/post/missinghe-version121/","publishdate":"2019-09-25T00:00:00Z","relpermalink":"/post/missinghe-version121/","section":"post","summary":"I have finally found some time to update the version for my R package missingHE, for which version 1.2.1 is now available on CRAN. I included two main features to the previous version of the package.\nFirst, I have added a new type of identifying restriction when fitting pattern mixture models through the function \u0026ldquo;pattern\u0026rdquo;. Before, only the complete case restriction was available, which identifies the distributions of the missing data with those from the completers.","tags":["Academic","Health economics","Missing data"],"title":"MissingHE 1.2.1","type":"post"},{"authors":["Andrea Gabrio"],"categories":["thesis"],"content":"I have been kindly invited by the amazing person Chris Sampson to talk about the work I inlcuded in my PhD thesis for his monthly rubric entitled \u0026ldquo;Thesis Thursday\u0026rdquo; on the The Academic Health Economists blog.\nI happily accepted Chris\u0026rsquo;s invitation as I beleive this initiative is really interesting and represents a nice way for newly graduated PhD students to advertise their work while also giving the chance to people interested in health economics to read about some academic work which is typically freely available to everyone.\nHere you can find the full interview, which is not very long and resolves around 5 questions that Chris asked me about my work. I already new this blog but I have never had a proper chance to read through its posts carefully, which is a shame.\nI shall promise myself to try to check it more often from now on, using this interview as a nice motivation to do so. In fact, there are not many blogs around health economics matters (here a non-comprehensive list), among which The Academic Health Economists and Gianluca\u0026rsquo;s blog are my favourites.\nI hope I will be able to find some time to write some nice posts about some health economic applications of my work in the next future as this is still the most interesting field for me at the moment. I am also the maintainer of another small blog called the Health Economics Analysis and Research Methods Team (HEART) blog, where I occasionally write some posts on health economics together with my colleagues from the UCL department of Primary Care and Population Health. The blog is still new but I hope it can become more active in the next months.\n","date":1568505600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568547243,"objectID":"a40e8115aed0c811b887304de7afd3e2","permalink":"/post/update-interview/","publishdate":"2019-09-15T00:00:00Z","relpermalink":"/post/update-interview/","section":"post","summary":"I have been kindly invited by the amazing person Chris Sampson to talk about the work I inlcuded in my PhD thesis for his monthly rubric entitled \u0026ldquo;Thesis Thursday\u0026rdquo; on the The Academic Health Economists blog.\nI happily accepted Chris\u0026rsquo;s invitation as I beleive this initiative is really interesting and represents a nice way for newly graduated PhD students to advertise their work while also giving the chance to people interested in health economics to read about some academic work which is typically freely available to everyone.","tags":["Academic","Health Economics","Interview"],"title":"Discussing my thesis","type":"post"},{"authors":["Andrea Gabrio"],"categories":["publication"],"content":"With the approaching of the new academic here I have received some good news for my most recently submitted paper on Bayesian parametric modelling in health economics for missing longitudinal data, which at the moment is only available on arXiv.\nI am happy to announce that, after a couple of rounds of reviews, the paper has been finally accepted for publication in JSS: Series A. I believe that the reviewers provided a very nice feedback for improving the work and I am quite satisfied with the final version of the article which, I hope, will be of interest for anyone involved in the analsysi of partially-observed longitudinal data. I hope the pre-print of the paper will be available soon and I will \u0026ldquo;advertise\u0026rdquo; my work in two conferences in the next couple of months, where I will present the content of the paper, namely ICTMC this October in Brighton, and ISPOR Europe this November in Copenhagen.\nI am really excited about this paper which represented the last part of my PhD thesis and on which I worked really hard in the last year of my studies. Here you can find a general summary of the content of the article, while here there are some slides that describe the main idea behind the proposed model.\nI just want to conlcude with some thanks with my co-authors of the paper, Michael and Ginaluca, without whom I would have not been able to write this paper. This was my first work with Mike, with whom I had a wonderful collaboration and I was able to visit the beatiful city of Gainesville (FL) during my first visiting period at the University of Florida (see thumbnail picture). I hope this will be the first of many works together in the furture!.\n","date":1567296000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1567337643,"objectID":"f8c1f56f754f503c6c6cba3c2d501be9","permalink":"/post/update-september/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/post/update-september/","section":"post","summary":"With the approaching of the new academic here I have received some good news for my most recently submitted paper on Bayesian parametric modelling in health economics for missing longitudinal data, which at the moment is only available on arXiv.\nI am happy to announce that, after a couple of rounds of reviews, the paper has been finally accepted for publication in JSS: Series A. I believe that the reviewers provided a very nice feedback for improving the work and I am quite satisfied with the final version of the article which, I hope, will be of interest for anyone involved in the analsysi of partially-observed longitudinal data.","tags":["Academic","Publication"],"title":"Some good news...","type":"post"},{"authors":["Andrea Gabrio"],"categories":["discussion"],"content":"Today, I would like to briefly comment an interesting research article written by Goodman, who provided a clear and exemplary discussion about the typical incorrect interpretation of a standard frequentist analysis in the field of medical research. I will now briefly summarise the main argument of the paper and then add some personal comments.\nEssentially, the article describes the characteristics of the dominant school of medical statistics and highlights the logical fallacy at the heart of the typical frequentist analysis in clinical studies. This is based on a deductive inferential approach, which starts with a given hypothesis and makes conclusions under the assumption that the hypothesis is true. This is in contrast with a inductive approach, which uses the observed evidence to evaluate what hypothesis is most tenable. The two most popular methods of the frequentist paradigm are the P value proposed by Fisher and the hypothesis testing developed by Neyman and Pearson.\nThe P value is defined as the probability, under the assumption of no effect (null hypothesis), of obtaining a result equal to or more extreme than what was actually observed. Fisher proposed it as an informal index to be used as a measure of discrepancy between the data and the null hypothesis and therefore should not be interpreted as a formal inferential method. For example, since the P value can only be calculated on the assumption that the null hypothesis is true, it cannot be a direct measure of the probability that the null hypothesis is false. However, the main criticism to the P value is perhaps that it does not take into account the size of the observed effect, i.e. a small effect in a study with a large sample size can have the same P value as a large effect in a small study.\nHypothesis testing was proposed by Neyman and Pearson as an alternative approach to the P value, which assumes the existence of a null hypothesis (e.g. no effect) and an alternative hypothesis (e.g. nonzero effect). The outcome of the test is then simply to reject one hypothesis in favour of the other, solely based on the data. This exposes the researcher to two types of errors: type I error or false-positive ($\\alpha$) and type II error or false-negative ($\\beta$) result. Rather than focussing on single experiments, like the P value, hypothesis testing is effectively based on a deductive approach to minimise the errors over a large number of experiments. However, the price to pay to obtain this objectivity is the impossibility to make any inferential statement about a single experiment. The procedure only guarantees that in the long run, i.e. after considering many experiments, we shall not often be wrong.\nOver time a combination between the P value and hypothesis testing was developed under the assumption that the two approaches can be complementary. The idea was that the P value could be used to measure evidence in a single experiment while not violating the long run logic of hypothesis testing. The combined method is characterized by setting $\\alpha$ and power $\\beta$ before the experiment, then calculating a P value and rejecting the null hypothesis if the P value is less than the preset type I error rate. This means that the P value is considered a false-positive error rate specific to the data and also a measure of evidence against the null hypothesis. The P value fallacy is born from this statement, which assumes that an event can be seen simultaneously from a long run perspective (where the observed results are put together with other results that might have occurred in hypothetical repetitions of the experiment) and from a short run perspective (where the observed results are interpreted only with respect to the single experiment). However, these views are not reconcilable since a result cannot be at the same time an interchangeable (long-run) and unique (short-run) member of a group of results.\nI personally find this discussion fascinating and I believe that it is important to recognise the inconsistencies between the two alternative approaches to inference. The original authors of the two paradigms were well aware of the implications of their methods and never supported the combination of these. However, the combined approach has somehow become widely accepted in practice while its internal inconsistencies and conceptual limitations are hardly recognised.\nI feel that, since the two methods are perceived as \u0026ldquo;objective\u0026rdquo;, it is generally accepted that, if combined, they can produce reliable conclusions. This, however, is not necessarily true. Accepting at face value the significance result as a binary indicator of whether or not a relation is real is dangeroues and potentially misleading. This practice wants to show that conclusions are being drawn directly from the data, without any external influence, because direct inference from data to hypothesis is thought to result in mistaken conclusions only rarely and is therefore regarded as \u0026ldquo;scientific\u0026rdquo;.\nThis misguided approach has led to a much stronger emphasis towards the quantitative results alone (without any external input). In contrast, I believe that such perspective has the serious drawback of ignoring potentially useful information which is available (e.g. relevant medical knowledge or historical data) and which should be included in the analysis. Of course, I am aware of the potential issues that may arise from the selection and incorporation of external evidence, but I believe this should not be considered as \u0026ldquo;less reliable\u0026rdquo; or \u0026ldquo;more prone to mistakes\u0026rdquo; compared with the evidence from the available data. It is important that an agreement is reached about the selection of the type of evidence and methods to be used to perform the analysis solely based on their relevance with respect to the context analysed.\n","date":1564790400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1565004843,"objectID":"2e3b25e6b65aa152b5e106f8693672fa","permalink":"/post/p-value-fallacy/","publishdate":"2019-08-03T00:00:00Z","relpermalink":"/post/p-value-fallacy/","section":"post","summary":"Today, I would like to briefly comment an interesting research article written by Goodman, who provided a clear and exemplary discussion about the typical incorrect interpretation of a standard frequentist analysis in the field of medical research. I will now briefly summarise the main argument of the paper and then add some personal comments.\nEssentially, the article describes the characteristics of the dominant school of medical statistics and highlights the logical fallacy at the heart of the typical frequentist analysis in clinical studies.","tags":["Academic","Frequentist statistics"],"title":"The P value fallacy","type":"post"},{"authors":[],"categories":null,"content":"","date":1562256000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562256000,"objectID":"83ff58a85903f76d2402e728102afadf","permalink":"/talk/hesg2019/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/hesg2019/","section":"talk","summary":"Contibuted presentation","tags":["Economic Evaluations","Missing Data"],"title":"Adjusting for partially-observed utilities and costs in trial-based cost-effectiveness analysis: a comparison of different methods and their performance","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["R"],"content":"\rThe focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using STAN via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is STAN?\rStan provides full Bayesian inference for continuous-variable models through Markov Chain Monte Carlo methods such as the No-U-Turn sampler, an adaptive form of Hamiltonian Monte Carlo sampling\nSTAN is a program for analysis of Bayesian models using Markov Chain Monte Carlo (MCMC) methods (Gelman, Lee, and Guo (2015)). STAN is a free software and a probabilistic programming language for specifying statistical models using a specific class of MCMC algorithms known as Hamiltonian Monte Carlo methods (HMC). The latest version of STAN can be dowloaded from the web repository and is available for different OS. There are different R packages which function as frontends for STAN. These packages make it easy to process the output of Bayesian models and present it in publication-ready form. In this brief introduction, I will specifically focus on the rstan package (Stan Development Team (2018)) and show how to fit STAN models using this package.\n\rInstalling STAN and rstan\rUnlike other Bayesian software, such as JAGS or OpenBUGS, it is not required to separately install the program and the corresponding frontend R package. Indeed, installing the R package rstan will automatically install STAN on your machine. However, you will also need to make sure to having installed on your pc a C++ compiler which is used by rstan to fit the models. Under a Windows OS, for example, this can be done by installing Rtools, a collection of resources for building packages for R, which is freely available from the web repository.\nNext, install the package rstan from within R or Rstudio, via the package installer or by typing in the command line\n\u0026gt; install.packages(\u0026quot;rstan\u0026quot;, dependencies = TRUE)\rThe dependencies = TRUE option will automatically install all the packages on which the functions in the rstan package rely.\n\r\rBasic model\rSimulate data\rFor an example dataset, I simulate my own data in R. I create a continuous outcome variable \\(y\\) as a function of one predictor \\(x\\) and a disturbance term \\(\\epsilon\\). I simulate a dataset with 100 observations. Create the error term, the predictor and the outcome using a linear form with an intercept \\(\\beta_0\\) and slope \\(\\beta_1\\) coefficients, i.e.\n\\[y = \\beta_0 + \\beta_1 x + \\epsilon \\]\nThe R commands which I use to simulate the data are the following:\n\u0026gt; n_sim=100; set.seed(123)\r\u0026gt; x=rnorm(n_sim, mean = 5, sd = 2)\r\u0026gt; epsilon=rnorm(n_sim, mean = 0, sd = 1)\r\u0026gt; beta0=1.5\r\u0026gt; beta1=1.2\r\u0026gt; y=beta0 + beta1 * x + epsilon\r\u0026gt; n_sim=as.integer(n_sim)\rThen, I define all the data for STAN in a list object\n\u0026gt; datalist=list(\u0026quot;y\u0026quot;=y,\u0026quot;x\u0026quot;=x,\u0026quot;n_sim\u0026quot;=n_sim)\r\rModel file\rNow, I write the model for STAN and save it as a stan file named \"basic.mod.stan\" in the current working directory\n\u0026gt; basic.mod= \u0026quot;\r+ data {\r+ int\u0026lt;lower=0\u0026gt; n_sim;\r+ vector[n_sim] y;\r+ vector[n_sim] x;\r+ }\r+ parameters {\r+ real beta0;\r+ real beta1;\r+ real\u0026lt;lower=0\u0026gt; sigma;\r+ }\r+ transformed parameters {\r+ vector[n_sim] mu;\r+ mu=beta0 + beta1*x;\r+ } + model {\r+ sigma~uniform(0,100);\r+ beta0~normal(0,1000);\r+ beta1~normal(0,1000);\r+ y~normal(mu,sigma);\r+ }\r+ + \u0026quot;\rSTAN models are written using an imperative programming language, which means that the order in which you write the elements in your model file matters, i.e. you first need to define your variables (e.g. integers, vectors, matrices, etc.), the constraints which define the range of values your variable can take (e.g. only positive values for standard deviations), and finally define the relationship among the variables (e.g. one is a liner function of another).\nA Stan model is defined by six program blocks:\n\rData (required). The data block reads external information – e.g. data vectors, matrices, integers, etc.\rTransformed data (optional). The transformed data block allows for preprocessing of the data – e.g. transformation or rescaling of the data.\rParameters (required). The parameters block defines the sampling space – e.g. parameters to which prior distributions must be assigned.\rTransformed parameters (optional). The transformed parameters block allows for parameter processing before the posterior is computed – e.g. tranformation or rescaling of the parameters.\rModel (required). In the model block we define our posterior distributions – e.g. choice of distributions for all variables.\rGenerated quantities (optional). The generated quantities block allows for postprocessing – e.g. backtranformation of the parameters using the posterior samples.\r\rFor this introduction I consider a very simple model which only requires the specification of four blocks in the STAN model. In the data block, I first define the size of the sample n_sim as a positive integer number using the expression int\u0026lt;lower=0\u0026gt; n_sim; then I declare the two variables y and x as reals (or vectors) with length equal to N. In the parameters block, I define the coefficients for the linear regression beta0 and beta1 (as two real numbers) and the standard deviation parameter sigma (as a positive real number). In the transformed parameters block, I define the conditional mean mu (a real vector of length N) as a linear function of the intercept beta0, the slope beta1, and the covariate x. Finally, in the model block, I assign weakly informative priors to the regression coefficients and the standard deviation parameters, and I model the outcome data y using a normal distribution indexed by the conditional mean mu and the standard deviation sigma parameters. In many cases, STAN uses sampling statements which can be vectorised, i.e. you do not need to use for loop statements.\nTo write and save the model as the text file “basic.mod.stan” in the current working directory, I use the writeLines function\n\u0026gt; writeLines(basic.mod, \u0026quot;basic.mod.stan\u0026quot;)\r\rPre-processing\rDefine the parameters whose posterior distribtuions we are interested in summarising later and set up the initial values for the MCMC sampler in STAN\n\u0026gt; params=c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;)\r\u0026gt; inits=function(){list(\u0026quot;beta0\u0026quot;=rnorm(1), \u0026quot;beta1\u0026quot;=rnorm(1))}\rThe function creates a list that contains one element for each parameter, which gets assigned a random draw from a normal distribution as a strating value for each chain in the model. For simple models like this, it is generally easy to define the intial values for all parameters in the object inits which is then passed to the stan function in rstan. However, for more complex models, this may not be immediate and a lot of trial and error may be required. However, STAN can automatically select the initial values for all parameters randomly. This can be achieved by setting inits=\"random\", which is then passed to the stan function in rstan.\nBefore using rstan for the first time, you need to load the package, and you may want to set a random seed number for making your estimates replicable\n\u0026gt; library(rstan)\r\u0026gt; set.seed(123)\r\rFit the model\rNow, we can fit the model in STAN using the stan function in the rstan package and save it in the object basic.mod\n\u0026gt; basic.mod\u0026lt;-stan(data = datalist, pars = params, iter = 9000, + warmup = 1000, init = inits, chains = 2, file = \u0026quot;basic.mod.stan\u0026quot;)\rSAMPLING FOR MODEL \u0026#39;basic\u0026#39; NOW (CHAIN 1).\rChain 1: Chain 1: Gradient evaluation took 0 seconds\rChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 1: Adjust your expectations accordingly!\rChain 1: Chain 1: Chain 1: Iteration: 1 / 9000 [ 0%] (Warmup)\rChain 1: Iteration: 900 / 9000 [ 10%] (Warmup)\rChain 1: Iteration: 1001 / 9000 [ 11%] (Sampling)\rChain 1: Iteration: 1900 / 9000 [ 21%] (Sampling)\rChain 1: Iteration: 2800 / 9000 [ 31%] (Sampling)\rChain 1: Iteration: 3700 / 9000 [ 41%] (Sampling)\rChain 1: Iteration: 4600 / 9000 [ 51%] (Sampling)\rChain 1: Iteration: 5500 / 9000 [ 61%] (Sampling)\rChain 1: Iteration: 6400 / 9000 [ 71%] (Sampling)\rChain 1: Iteration: 7300 / 9000 [ 81%] (Sampling)\rChain 1: Iteration: 8200 / 9000 [ 91%] (Sampling)\rChain 1: Iteration: 9000 / 9000 [100%] (Sampling)\rChain 1: Chain 1: Elapsed Time: 0.078 seconds (Warm-up)\rChain 1: 0.593 seconds (Sampling)\rChain 1: 0.671 seconds (Total)\rChain 1: SAMPLING FOR MODEL \u0026#39;basic\u0026#39; NOW (CHAIN 2).\rChain 2: Chain 2: Gradient evaluation took 0 seconds\rChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.\rChain 2: Adjust your expectations accordingly!\rChain 2: Chain 2: Chain 2: Iteration: 1 / 9000 [ 0%] (Warmup)\rChain 2: Iteration: 900 / 9000 [ 10%] (Warmup)\rChain 2: Iteration: 1001 / 9000 [ 11%] (Sampling)\rChain 2: Iteration: 1900 / 9000 [ 21%] (Sampling)\rChain 2: Iteration: 2800 / 9000 [ 31%] (Sampling)\rChain 2: Iteration: 3700 / 9000 [ 41%] (Sampling)\rChain 2: Iteration: 4600 / 9000 [ 51%] (Sampling)\rChain 2: Iteration: 5500 / 9000 [ 61%] (Sampling)\rChain 2: Iteration: 6400 / 9000 [ 71%] (Sampling)\rChain 2: Iteration: 7300 / 9000 [ 81%] (Sampling)\rChain 2: Iteration: 8200 / 9000 [ 91%] (Sampling)\rChain 2: Iteration: 9000 / 9000 [100%] (Sampling)\rChain 2: Chain 2: Elapsed Time: 0.078 seconds (Warm-up)\rChain 2: 0.594 seconds (Sampling)\rChain 2: 0.672 seconds (Total)\rChain 2: \rDifferent packages are available to perform diagnostic checks for Bayesian models. Here, I install and load the bayesplot package (Gabry and Mahr (2017)) to obtain graphical diagnostics and results.\n\u0026gt; install.packages(\u0026quot;bayesplot\u0026quot;)\r\u0026gt; library(bayesplot)\rFor example, density and trace plots can be obtained by typing\n\u0026gt; mcmc_combo(as.array(basic.mod),regex_pars=\u0026quot;beta0|beta1\u0026quot;)\rBoth types of graphs suggest that there are not issues in the convergence of the algorithm (smooth normal densities and hairy caterpillar graphs for both MCMC chains).\n\r\rConclusions\rThis tutorial was simply a brief introduction on how simple linear regression models can be fitted using the Bayesian software STAN via the rstan package. Although this may seem a complex procedure compared with simply fitting a linear model under the frequentist framework, however, the real advantages of Bayesian methods become evident when the complexity of the analysis is increased (which is often the case in real applications). Indeed, the flexibility in Bayesian modelling allows to account for increasingly complex models in a relatively easy way. In addition, Bayesian methods are ideal when the interest is in taking into account the potential impact that different sources of uncertainty may have on the final results, as they allow the natural propagation of uncertainty throughout each quantity in the model.\n\rReferences\rGabry, J, and T Mahr. 2017. “Bayesplot: Plotting for Bayesian Models.” R Package Version 1.\n\rGelman, Andrew, Daniel Lee, and Jiqiang Guo. 2015. “Stan: A Probabilistic Programming Language for Bayesian Inference and Optimization.” Journal of Educational and Behavioral Statistics 40 (5): 530–43.\n\rStan Development Team. 2018. “RStan: The R Interface to Stan.” http://mc-stan.org/.\n\r\r\r","date":1562206394,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562206394,"objectID":"16a77cc23dd55d8ba6afba62a396f822","permalink":"/stan/basic-introduction-to-stan/super-basic-introduction-to-stan/","publishdate":"2019-07-03T21:13:14-05:00","relpermalink":"/stan/basic-introduction-to-stan/super-basic-introduction-to-stan/","section":"STAN","summary":"The focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using STAN via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is STAN?","tags":["linear regression","STAN","introduction"],"title":"Super basic introduction to STAN","type":"STAN"},{"authors":["Andrea Gabrio"],"categories":["R"],"content":"\rThe focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using OpenBUGS via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is OpenBUGS?\rOpenBUGS is a program for analysis of Bayesian models using Markov Chain Monte Carlo (MCMC) methods (Spiegelhalter et al. (2007)). OpenBUGS is a free software based on the Bayesian inference Using Gibbs Sampling (informally BUGS) language at the base of WinBUGS but, unlike this program, is platform independent. The latest version of OpenBUGS can be dowloaded from the web repository and is available for different OS. There are different R packages which function as frontends for OpenBUGS. These packages make it easy to process the output of Bayesian models and present it in publication-ready form. In this brief introduction, I will specifically focus on the R2OpenBUGS package (Sturtz, Ligges, and Gelman (2010)) and show how to fit OpenBUGS models using this package.\n\rInstalling OpenBUGS and R2OpenBUGS\rInstall the latest version of OpenBUGS for your OS. Next, install the package R2OpenBUGS from within R or Rstudio, via the package installer or by typing in the command line\n\u0026gt; install.packages(\u0026quot;R2OpenBUGS\u0026quot;, dependencies = TRUE)\rThe dependencies = TRUE option will automatically install all the packages on which the functions in the R2OpenBUGS package rely.\n\r\rBasic model\rSimulate data\rFor an example dataset, I simulate my own data in R. I create a continuous outcome variable \\(y\\) as a function of one predictor \\(x\\) and a disturbance term \\(\\epsilon\\). I simulate a dataset with 100 observations. Create the error term, the predictor and the outcome using a linear form with an intercept \\(\\beta_0\\) and slope \\(\\beta_1\\) coefficients, i.e.\n\\[y = \\beta_0 + \\beta_1 x + \\epsilon \\]\nThe R commands which I use to simulate the data are the following:\n\u0026gt; n.sim=100; set.seed(123)\r\u0026gt; x=rnorm(n.sim, mean = 5, sd = 2)\r\u0026gt; epsilon=rnorm(n.sim, mean = 0, sd = 1)\r\u0026gt; beta0=1.5\r\u0026gt; beta1=1.2\r\u0026gt; y=beta0 + beta1 * x + epsilon\rThen, I define all the data for JAGS in a list object\n\u0026gt; datalist=list(\u0026quot;y\u0026quot;,\u0026quot;x\u0026quot;,\u0026quot;n.sim\u0026quot;)\r\rModel file\rNow, I write the model for OpenBUGS and save it as a text file named \"basicmodbugs.txt\" in the current working directory\n\u0026gt; basic.mod= \u0026quot;\r+ model {\r+ #model\r+ for(i in 1:n.sim){\r+ y[i] ~ dnorm(mu[i], tau)\r+ mu[i] \u0026lt;- beta0 + beta1 * x[i]\r+ }\r+ #priors\r+ beta0 ~ dnorm(0, 0.01)\r+ beta1 ~ dnorm(0, 0.01)\r+ tau ~ dgamma(0.01,0.01)\r+ }\r+ \u0026quot;\rThe part of the model inside the for loop denotes the likelihood, which is evaluated for each individual in the sample using a Normal distribution parameterised by some mean mu and precision tau (where, precision = 1/variance). The covariate x is included at the mean level using a linear regression, which is indexed by the intercept beta0 and slope beta1 terms. The second part defines the prior distributions for all parameters of the model, namely the regression coefficients and the precision. Weakly informative priors are used since I assume that I do not have any prior knowledge about these parameters.\nTo write and save the model as the text file “basicmodbugs.txt” in the current working directory, I use the writeLines function\n\u0026gt; writeLines(basic.mod, \u0026quot;basicmodbugs.txt\u0026quot;)\r\rPre-processing\rDefine the parameters whose posterior distribtuions we are interested in summarising later and set up the initial values for the MCMC sampler in OpenBUGS\n\u0026gt; params=c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;)\r\u0026gt; inits=function(){list(\u0026quot;beta0\u0026quot;=rnorm(1), \u0026quot;beta1\u0026quot;=rnorm(1), \u0026quot;tau\u0026quot;=rgamma(1,1,1))}\rThe function creates a list that contains one element for each parameter, which gets assigned a random draw from a normal distribution as a strating value for each chain in the model. For simple models like this, it is generally easy to define the intial values for all parameters in the object inits which is then passed to the bugs function in R2OpenBUGS. However, for more complex models, this may not be immediate and a lot of trial and error may be required.\nBefore using R2OpenBUGS for the first time, you need to load the package, and you may want to set a random seed number for making your estimates replicable\n\u0026gt; library(R2OpenBUGS)\r\u0026gt; set.seed(123)\r\rFit the model\rNow, we can fit the model in OpenBUGS using the bugs function in the R2openBUGS package and save it in the object basic.mod\n\u0026gt; basic.mod.bugs=bugs(data = datalist, inits = inits, + parameters.to.save = params, n.chains = 2, n.iter = 2000,\r+ n.burnin = 1000, model.file = \u0026quot;basicmodbugs.txt\u0026quot;)\rWhile the model is running, the function prints out some information related to the Bayesian graph (corresponding to the specification used for the model) underneath OpenBUGS, such as number of observed and unobserved nodes and graph size.\n\rPost-processing\rOnce the model has finished running, a summary of the posteiror estimates and convergence diagnostics for all parameters specified can be seen by typing print(basic.mod) or, alternatively,\n\u0026gt; print(basic.mod.bugs$summary)\r mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 1.5 0.293 0.99 1.3 1.5 1.7 2.1 1 1700\rbeta1 1.2 0.053 1.06 1.1 1.2 1.2 1.3 1 2000\rdeviance 278.8 2.439 276.00 277.1 278.2 280.0 285.2 1 2000\rThe posterior distribution of each parameter is summarised in terms of:\n\rThe mean, sd and some percentiles\rPotential scale reduction factor Rhat and effective sample size n.eff (Gelman (2013)). The first is a measure to assess issues in convergence of the MCMC algorithm (typically a value below \\(1.05\\) for all parameters is considered ok). The second is a measure which assesses the adequacy of the posterior sample (typically values close to the total number of iterations are desirable for all parameters).\r\rThe deviance is a goodness of fit statistic and is used in the construction of the “Deviance Information Criterion” or DIC (Spiegelhalter et al. (2014)), which is a relative measure of model comparison. The DIC of the model can be accessed by typing\n\u0026gt; basic.mod.bugs$DIC\r[1] 282\r\rDiagnostics\rMore diagnostics are available when we convert the model output into an MCMC object using the command\n\u0026gt; install.packages(\u0026quot;coda\u0026quot;)\r\u0026gt; library(coda)\r\u0026gt; basic.mod.mcmc.bugs=as.mcmc.list(basic.mod.bugs)\rDifferent packages are available to perform diagnostic checks for Bayesian models. Here, I install and load the mcmcplots package (Curtis (2015)) to obtain graphical diagnostics and results.\n\u0026gt; install.packages(\u0026quot;mcmcplots\u0026quot;)\r\u0026gt; library(mcmcplots)\rFor example, density and trace plots can be obtained by typing\n\u0026gt; denplot(basic.mod.mcmc.bugs, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\r\u0026gt; traplot(basic.mod.mcmc.bugs, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\rBoth types of graphs suggest that there are not issues in the convergence of the algorithm (smooth normal densities and hairy caterpillar graphs for both MCMC chains).\n\r\rConclusions\rThis tutorial was simply a brief introduction on how simple linear regression models can be fitted using the Bayesian software OpenBUGS via the R2OpenBUGS package. Although this may seem a complex procedure compared with simply fitting a linear model under the frequentist framework, however, the real advantages of Bayesian methods become evident when the complexity of the analysis is increased (which is often the case in real applications). Indeed, the flexibility in Bayesian modelling allows to account for increasingly complex models in a relatively easy way. In addition, Bayesian methods are ideal when the interest is in taking into account the potential impact that different sources of uncertainty may have on the final results, as they allow the natural propagation of uncertainty throughout each quantity in the model.\n\rReferences\rCurtis, SM. 2015. “Mcmcplots: Create Plots from Mcmc Output.” R Package Version 0.4 2.\n\rGelman, Andrew. 2013. Bayesian Data Analysis. Chapman; Hall/CRC.\n\rSpiegelhalter, David J, Nicola G Best, Bradley P Carlin, and Angelika Van Der Linde. 2014. “The Deviance Information Criterion: 12 Years on.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 76 (3): 485–93.\n\rSpiegelhalter, David, Andrew Thomas, Nicky Best, and Dave Lunn. 2007. “OpenBUGS User Manual, Version 3.0. 2.” MRC Biostatistics Unit, Cambridge.\n\rSturtz, Sibylle, Uwe Ligges, and Andrew Gelman. 2010. “R2OpenBUGS: A Package for Running Openbugs from R.” URL Http://Cran. Rproject. Org/Web/Packages/R2OpenBUGS/Vignettes/R2OpenBUGS. Pdf.\n\r\r\r","date":1562119874,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562119874,"objectID":"dd38afcc7412084a4fc897a7e681d0f6","permalink":"/openbugs/basic-introduction-to-openbugs/super-basic-introduction-to-openbugs/","publishdate":"2019-07-02T21:11:14-05:00","relpermalink":"/openbugs/basic-introduction-to-openbugs/super-basic-introduction-to-openbugs/","section":"OpenBUGS","summary":"The focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using OpenBUGS via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is OpenBUGS?","tags":["linear regression","OpenBUGS","introduction"],"title":"Super basic introduction to OpenBUGS","type":"OpenBUGS"},{"authors":["Andrea Gabrio"],"categories":["conference"],"content":"I have just come back form my first Health Economists\u0026rsquo; Study Group (HESG) meeting, which this year was held at the University of East Anglia in the beautiful city of Norwich, south east of England, and where I presented some preliminary results from one of my on-going works. I have to say, it was a remarkable experience which I really liked thanks to a wonderful and welcoming environment. I had the pleasure to talk to many people from different research areas involved in health economics (both from academia and industry) and to see many different projects and works.\nI particularly enjoy the structure of the meeting, which requires some chair and discussant who have to present and discuss the paper of the authors, who are only allowed to provide some clarification if needed. At first I thought this structure of the sessions was strange, but after attending many sessions and experiencing this for my own paper, I feel that it is a very good way to encourage discussion about works from different people rather than just focussing on your own presentation. Plus, the weather and always sunny, it felt like Italy for a few days.\n\rThe beautiful Norwich\u0026rsquo;s cathedral\r\r\rOther nice people and colleagues from HEART and other UCL department came to HESG with me, including Caroline and Ekaterina (aka Katia), you can see them in thumbnail of this post. I was also pleased to meet Baptiste from LSHTM, who shares with me the interest in missing data methods for cost-effectiveness analysis and who presented some very nice work on that. I had the chance to give some feedback to him and he did the same for me. It felt so nice when we started discussing about some aspects of our analyses and after some minutes we simply lost track of time and everyone else disappeared. I also had the opportunity to talk about my work with the discussant of my session, Catrin Plumpton from the Centre for Health Economics and Medicines Evaluation, who gave me some nice feedback which I really appreciated, especially given her mathematical background.\nAn important contribution to the success of the meeting was also given by the wonderful organisation of the event, including an accommodation located very closely to the main building of the meeting, plenty of food provided during each day, a nice bus tour of the city and a wonderful conference dinner. I must thank all the people, who organised the event who were very extremely nice to us and who were always ready to help us for whatever need we had, with a special mention for Emma Mcmanus who was amazing.\nIn summary, everything was good. Well, almost. Going back to the works presented, as usual, the only less positive note that I would like to make is the almost total absence of Bayesian applications. Some authors mentioned that they used some popular Bayesian program, such as WinBUGS, but this was mainly related to the usual meta-analysis stuff which is pretty standardised. I hope next time I will be able to see more people going Bayesian as this is what I am.\n","date":1562112000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562326443,"objectID":"39454d30ea7c6161ee89bc00abd6b10b","permalink":"/post/hesg-summer-meeting-2019/","publishdate":"2019-07-03T00:00:00Z","relpermalink":"/post/hesg-summer-meeting-2019/","section":"post","summary":"I have just come back form my first Health Economists\u0026rsquo; Study Group (HESG) meeting, which this year was held at the University of East Anglia in the beautiful city of Norwich, south east of England, and where I presented some preliminary results from one of my on-going works. I have to say, it was a remarkable experience which I really liked thanks to a wonderful and welcoming environment. I had the pleasure to talk to many people from different research areas involved in health economics (both from academia and industry) and to see many different projects and works.","tags":["Academic","Industry","Health economics"],"title":"HESG Summer Meeting 2019","type":"post"},{"authors":["Andrea Gabrio"],"categories":["courses"],"content":"As member of the Health Economics Analysis and Research Methods Team (HEART), together with my colleagues, on Tuesday 2 July I took part in a 1-day introductory short course entitled “Understanding health economics in clinical trials”, which was designed and delivered by the team. HEART is a new group of health economists who are based in UCL’s Institute of Clinical Trials and Methodology (ICTM), led by Rachael Hunter, and is involved at different levels in the economic components of clinical trials in different trial units at UCL. This short course was aimed at ICTM staff who are not health economists (e.g. trial managers, CIs/PIs, statisticians, data managers, research assistants, etc.) and was designed in response to the need we have identified over the last few years in working on trials as well as in response to colleagues across ICTM. This course was unique as it was intended specifically for non health economists working in trials, who wish to better understand the health economics in their study, and/or the health economist on their study. The course used a mix of lectures, group discussions and practical exercises to help participants consolidate their learning and see how to apply information from the sessions to real studies. No prior knowledge of health economics was assumed.\nI believe the course was a success both in terms of the quality/quantity of the material covered during the six sessions throughout the day, as well as in terms of the positive feedback we received from the participants (almost entirely women, with the exception of two men). Many key and typically not well understood economic topics were discussed during the day, e.g. what are and how QALYs and costs are calculated, the potential limitations and issues of an economic analysis within a trial, or the role played by the protocol and analysis plan in the economic evaluation. My session was related to reporting and interpreting health economic results and I realised that most people who do not routinely deal with health economics may find difficult to grasp certain concepts or tools used in the economic analysis (e.g. what is a cost-effectiveness acceptability curve and how it can be computed). Nevertheless, I must admit that I was surprised by how many people were very motivated to learn these concepts and these \u0026ldquo;difficult\u0026rdquo; methods, often asking questions and making good comments (despite the fact that my session was the last of the course at the end of the day). We ran this course as a trial as we did not have clear ideas of what an optimal design should be or the number of topics that should be covered for this type of course. We are now confident that the course has a solid structure and that there is a clear demand to learn the basic concepts of health economics, at least among people involved in trial analyses. Following the successful delivery of the course, we are planning to replicate the experience in the future, improving certain aspects of the sessions based on the feedback we received and also considering to open the course to meet the demand of a wider audience.\nI have to say that this was an extremely positive experience for me as it was the first time I was involved in this type of projects. Me and my colleagues worked hard to design and prepare the different sessions of the course over the last few months, find the best way to link the arguments across the sessions, provide interesting group activities and materials for the practicals, etc. I have to thank all my colleagues who contributed to the promotion and realisation of this project, with a special mention for Caroline Clarke, who spent a lot of time and effort to organise the course and who personally contributed in giving one of the session of the course. Finally, I would also like to thank my colleague and health economist Ekaterina, with whom I had the pleasure to share the presentation and practical of my session in the course.\nPerhaps the only true negative aspect of the course was the absence of a Bayesian perspective, especially related to the interpretation of the results and the statistical methods that can be used to perform the analysis. Given the generally low familiarity of the people attending the course with statistics, I believe it was reasonable not to further confuse them with another new element into the picture. However, I truly hope that people will become more and more familiar with the importance of using tailored statistical methods in economic evaluations to avoid biased results, and from that point to justify a Bayesian approach, well, at least for me, the step is straightforward!.\n","date":1562112000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562153643,"objectID":"32751f66aea8e2316ec4874bd6c1d290","permalink":"/post/understanding-health-economics-in-clinical-trials/","publishdate":"2019-07-03T00:00:00Z","relpermalink":"/post/understanding-health-economics-in-clinical-trials/","section":"post","summary":"As member of the Health Economics Analysis and Research Methods Team (HEART), together with my colleagues, on Tuesday 2 July I took part in a 1-day introductory short course entitled “Understanding health economics in clinical trials”, which was designed and delivered by the team. HEART is a new group of health economists who are based in UCL’s Institute of Clinical Trials and Methodology (ICTM), led by Rachael Hunter, and is involved at different levels in the economic components of clinical trials in different trial units at UCL.","tags":["Academic","Clinical Trials","Health economics","introduction"],"title":"Understanding health economics in clinical trials","type":"post"},{"authors":[],"categories":null,"content":"","date":1562058000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562058000,"objectID":"cd757bbca2053fdc8ded948ff62c2cc3","permalink":"/talk/heartcourse2019/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/heartcourse2019/","section":"talk","summary":"One day short course","tags":["Economic Evaluations","Clinical Trials","HEART"],"title":"Understanding Health Economics in Clinical Trials","type":"talk"},{"authors":["Andrea Gabrio"],"categories":["R"],"content":"\rThe focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using JAGS via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is JAGS?\rJAGS or Just Another Gibbs Sampler is a program for analysis of Bayesian models using Markov Chain Monte Carlo (MCMC) methods (Plummer (2004)). JAGS is a free software based on the Bayesian inference Using Gibbs Sampling (informally BUGS) language at the base of WinBUGS/OpenBUGS but, unlike these programs, it is written in C++ and is platform independent. The latest version of JAGS can be dowloaded from Martyn Plummer’s repository and is available for different OS. There are different R packages which function as frontends for JAGS. These packages make it easy to process the output of Bayesian models and present it in publication-ready form. In this brief introduction, I will specifically focus on the R2jags package (Su et al. (2015)) and show how to fit JAGS models using this package.\n\rInstalling JAGS and R2jags\rInstall the latest version of JAGS for your OS. Next, install the package R2jags from within R or Rstudio, via the package installer or by typing in the command line\n\u0026gt; install.packages(\u0026quot;R2jags\u0026quot;, dependencies = TRUE)\rThe dependencies = TRUE option will automatically install all the packages on which the functions in the R2jags package rely.\n\r\rBasic model\rSimulate data\rFor an example dataset, I simulate my own data in R. I create a continuous outcome variable \\(y\\) as a function of one predictor \\(x\\) and a disturbance term \\(\\epsilon\\). I simulate a dataset with 100 observations. Create the error term, the predictor and the outcome using a linear form with an intercept \\(\\beta_0\\) and slope \\(\\beta_1\\) coefficients, i.e.\n\\[y = \\beta_0 + \\beta_1 x + \\epsilon \\]\nThe R commands which I use to simulate the data are the following:\n\u0026gt; n.sim=100; set.seed(123)\r\u0026gt; x=rnorm(n.sim, mean = 5, sd = 2)\r\u0026gt; epsilon=rnorm(n.sim, mean = 0, sd = 1)\r\u0026gt; beta0=1.5\r\u0026gt; beta1=1.2\r\u0026gt; y=beta0 + beta1 * x + epsilon\rThen, I define all the data for JAGS in a list object\n\u0026gt; datalist=list(\u0026quot;y\u0026quot;,\u0026quot;x\u0026quot;,\u0026quot;n.sim\u0026quot;)\r\rModel file\rNow, I write the model for JAGS and save it as a text file named \"basic.mod.txt\" in the current working directory\n\u0026gt; basic.mod= \u0026quot;\r+ model {\r+ #model\r+ for(i in 1:n.sim){\r+ y[i] ~ dnorm(mu[i], tau)\r+ mu[i] = beta0 + beta1 * x[i]\r+ }\r+ #priors\r+ beta0 ~ dnorm(0, 0.01)\r+ beta1 ~ dnorm(0, 0.01)\r+ tau ~ dgamma(0.01,0.01)\r+ }\r+ \u0026quot;\rThe part of the model inside the for loop denotes the likelihood, which is evaluated for each individual in the sample using a Normal distribution parameterised by some mean mu and precision tau (where, precision = 1/variance). The covariate x is included at the mean level using a linear regression, which is indexed by the intercept beta0 and slope beta1 terms. The second part defines the prior distributions for all parameters of the model, namely the regression coefficients and the precision. Weakly informative priors are used since I assume that I do not have any prior knowledge about these parameters.\nTo write and save the model as the text file “basic.mod.txt” in the current working directory, I use the writeLines function\n\u0026gt; writeLines(basic.mod, \u0026quot;basic.mod.txt\u0026quot;)\r\rPre-processing\rDefine the parameters whose posterior distribtuions we are interested in summarising later and set up the initial values for the MCMC sampler in JAGS\n\u0026gt; params=c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;)\r\u0026gt; inits=function(){list(\u0026quot;beta0\u0026quot;=rnorm(1), \u0026quot;beta1\u0026quot;=rnorm(1))}\rThe function creates a list that contains one element for each parameter, which gets assigned a random draw from a normal distribution as a strating value for each chain in the model. For simple models like this, it is generally easy to define the intial values for all parameters. However, for more complex models, this may not be immediate and a lot of trial and error may be required. However, JAGS can automatically select the initial values for all parameters in an efficient way even for relatively complex models. This can be achieved by setting inits=NULL, which is then passed to the jags function in R2jags.\nBefore using R2jags for the first time, you need to load the package, and you may want to set a random seed number for making your estimates replicable\n\u0026gt; library(R2jags)\r\u0026gt; set.seed(123)\r\rFit the model\rNow, we can fit the model in JAGS using the jags function in the R2jags package and save it in the object basic.mod\n\u0026gt; basic.mod=jags(data = datalist, inits = inits,\r+ parameters.to.save = params, n.chains = 2, n.iter = 2000, + n.burnin = 1000, model.file = \u0026quot;basic.mod.txt\u0026quot;)\rCompiling model graph\rResolving undeclared variables\rAllocating nodes\rGraph information:\rObserved stochastic nodes: 100\rUnobserved stochastic nodes: 3\rTotal graph size: 406\rInitializing model\rWhile the model is running, the function prints out some information related to the Bayesian graph (corresponding to the specification used for the model) underneath JAGS, such as number of observed and unobserved nodes and graph size.\n\rPost-processing\rOnce the model has finished running, a summary of the posteiror estimates and convergence diagnostics for all parameters specified can be seen by typing print(basic.mod) or, alternatively,\n\u0026gt; print(basic.mod$BUGSoutput$summary)\r mean sd 2.5% 25% 50% 75% 97.5% Rhat n.eff\rbeta0 1.5 0.294 0.95 1.3 1.5 1.7 2.1 1 2000\rbeta1 1.2 0.054 1.07 1.1 1.2 1.2 1.3 1 2000\rdeviance 278.8 2.475 276.03 277.1 278.2 279.9 285.1 1 2000\rThe posterior distribution of each parameter is summarised in terms of:\n\rThe mean, sd and some percentiles\rPotential scale reduction factor Rhat and effective sample size n.eff (Gelman (2013)). The first is a measure to assess issues in convergence of the MCMC algorithm (typically a value below \\(1.05\\) for all parameters is considered ok). The second is a measure which assesses the adequacy of the posterior sample (typically values close to the total number of iterations are desirable for all parameters).\r\rThe deviance is a goodness of fit statistic and is used in the construction of the “Deviance Information Criterion” or DIC (Spiegelhalter et al. (2014)), which is a relative measure of model comparison. The DIC of the model can be accessed by typing\n\u0026gt; basic.mod$BUGSoutput$DIC\r[1] 282\r\rDiagnostics\rMore diagnostics are available when we convert the model output into an MCMC object using the command\n\u0026gt; basic.mod.mcmc=as.mcmc(basic.mod)\rDifferent packages are available to perform diagnostic checks for Bayesian models. Here, I install and load the mcmcplots package (Curtis (2015)) to obtain graphical diagnostics and results.\n\u0026gt; install.packages(\u0026quot;mcmcplots\u0026quot;)\r\u0026gt; library(mcmcplots)\rFor example, density and trace plots can be obtained by typing\n\u0026gt; denplot(basic.mod.mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\r\u0026gt; traplot(basic.mod.mcmc, parms = c(\u0026quot;beta0\u0026quot;,\u0026quot;beta1\u0026quot;))\rBoth types of graphs suggest that there are not issues in the convergence of the algorithm (smooth normal densities and hairy caterpillar graphs for both MCMC chains).\n\r\rConclusions\rThis tutorial was simply a brief introduction on how simple linear regression models can be fitted using the Bayesian software JAGS via the R2jags package. Although this may seem a complex procedure compared with simply fitting a linear model under the frequentist framework, however, the real advantages of Bayesian methods become evident when the complexity of the analysis is increased (which is often the case in real applications). Indeed, the flexibility in Bayesian modelling allows to account for increasingly complex models in a relatively easy way. In addition, Bayesian methods are ideal when the interest is in taking into account the potential impact that different sources of uncertainty may have on the final results, as they allow the natural propagation of uncertainty throughout each quantity in the model.\n\rReferences\rCurtis, SM. 2015. “Mcmcplots: Create Plots from Mcmc Output.” R Package Version 0.4 2.\n\rGelman, Andrew. 2013. Bayesian Data Analysis. Chapman; Hall/CRC.\n\rPlummer, Martyn. 2004. “JAGS: Just Another Gibbs Sampler.”\n\rSpiegelhalter, David J, Nicola G Best, Bradley P Carlin, and Angelika Van Der Linde. 2014. “The Deviance Information Criterion: 12 Years on.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 76 (3): 485–93.\n\rSu, Yu-Sung, Masanao Yajima, Maintainer Yu-Sung Su, and JAGS SystemRequirements. 2015. “Package ‘R2jags’.” R Package Version 0.03-08, URL Http://CRAN. R-Project. Org/Package= R2jags.\n\r\r\r","date":1562033594,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1562033594,"objectID":"3e17280ebd0c2f5fb338cae0d6c210e8","permalink":"/jags/basic-introduction-to-jags/super-basic-introduction-to-jags/","publishdate":"2019-07-01T21:13:14-05:00","relpermalink":"/jags/basic-introduction-to-jags/super-basic-introduction-to-jags/","section":"JAGS","summary":"The focus of this simple tutorial is to provide a brief introduction and overview about how to fit Bayesian models using JAGS via R.\nPrerequisites:\n\rThe latest version of R, which can be downloaded and installed for Windows, Mac or Linux OS from the CRAN website\rI also strongly recommend to download and install Rstudio, an integrated development environment which provides an “user-friendly” interaction with R (e.g. many drop-down menus, tabs, customisation options)\r\rPreliminaries\rWhat is JAGS?","tags":["linear regression","JAGS","introduction"],"title":"Super basic introduction to JAGS","type":"JAGS"},{"authors":[],"categories":null,"content":"","date":1560247200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1560247200,"objectID":"56bfdbfa104cbed858b670d8954cd275","permalink":"/talk/albacete2019/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/albacete2019/","section":"talk","summary":"Pre-conference workshop","tags":["Bayesian Statistics","Economic Evaluations","Missing Data"],"title":"Bayesian methods for addressing missing data in health economic evaluations","type":"talk"},{"authors":["A Gabrio","MJ Daniels","G Baio"],"categories":null,"content":"","date":1559347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559347200,"objectID":"6069360c460078f6e7c2128b47e6d1d2","permalink":"/publication/gabrio2019c/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/publication/gabrio2019c/","section":"publication","summary":"Trial-based economic evaluations are typically performed on cross-sectional variables, derived from the responses for only the completers in the study, using methods that ignore the complexities of utility and cost data (e.g. skewness and spikes). We present an alternative and more efficient Bayesian parametric approach to handle missing longitudinal outcomes in economic evaluations, while accounting for the complexities of the data. We specify a flexible parametric model for the observed data and partially identify the distribution of the missing data with partial identifying restrictions and sensitivity parameters. We explore alternative nonignorable scenarios through different priors for the sensitivity parameters, calibrated on the observed data. Our approach is motivated by, and applied to, data from a trial assessing the cost-effectiveness of a new treatment for intellectual disability and challenging behaviour.","tags":["Missing Data","Bayesian Statistics","Economic Evaluations"],"title":"A Bayesian Parametric Approach to Handle Missing Longitudinal Outcome Data in Trial-Based Health Economic Evaluations","type":"publication"},{"authors":["A Gabrio","G Baio","A Manca"],"categories":null,"content":"","date":1559347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559347200,"objectID":"58b637ad9c4945c334e3dbfbf3a955fe","permalink":"/publication/gabrio2019b/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/publication/gabrio2019b/","section":"publication","summary":"The evidence produced by healthcare economic evaluation studies is a key component of any health technology assessment (HTA) process designed to inform resource allocation decisions in a budget limited context. To improve the quality (and harmonize the generation process) of such evidence, many HTA agencies have established methodological guidelines describing the normative framework inspiring their decision-making process. The information requirements that economic evaluation analyses for HTA must satisfy typically involve the use of complex quantitative syntheses of multiple available datasets, handling mixtures of aggregate and patient-level information, and the use of sophisticated statistical models for the analysis of non-Normal data (e.g. time-to-event, quality of life and costs). Much of the recent methodological research in economic evaluation for healthcare has developed in response to these needs, in terms of sound statistical decision-theoretic foundations, and is increasingly being formulated within a Bayesian paradigm. The rationale for this preference lies in the fact that by taking a probabilistic approach, based on decision rules and available information, a Bayesian economic evaluation study can explicitly account for relevant sources of uncertainty in the decision process and produce information to identify an optimal course of actions.  Moreover, the Bayesian approach naturally allows the incorporation of an element of judgement or evidence from different sources (e.g.~expert opinion or multiple studies) into the analysis. This is particularly important when, as often occurs in economic evaluation for HTA, the evidence base is sparse and requires some inevitable mathematical modelling to bridge the gaps in the available data. The availability of free and open source software in the last two decades has greatly reduced the computational costs and facilitated the application of Bayesian methods and has the potential to improve the work of modellers and regulators alike, thus advancing the fields of economic evaluation of health care interventions. This chapter provides an overview of the areas where Bayesian methods have contributed to the address the methodological needs that stem from the normative framework adopted by a number of HTA agencies.","tags":["Economic Evaluations","Bayesian Statistics"],"title":"Bayesian Statistical Economic Evaluation Methods for Health Technology Assessment","type":"publication"},{"authors":["A Gabrio","R Hunter","AJ Mason","G Baio"],"categories":null,"content":"","date":1559347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559347200,"objectID":"59de577875bb81ae76f7296d27d711a0","permalink":"/publication/gabrio2019d/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/publication/gabrio2019d/","section":"publication","summary":"Failure to account for baseline utilities/costs imbalance between treatment groups in cost-effectiveness analyses can result in biased estimates and mislead the decision making process. The currently recommended adjustment approach is linear regression, with estimates that are typically evaluated at the mean of the baseline utilities/costs. However, a problem arises whenever there are some missing follow-up values and the evaluation is restricted to the complete cases. Should the mean of the complete cases or the available cases baseline utilities/costs be used in generating the adjusted estimates? To our knowledge there is no current guideline about this choice in the literature, with standard software implementations often implicitly selecting one of the methods. We use two trials as motivating examples to show that the two approaches can lead to substantially different conclusions for healthcare decision making and that standard approaches which automatically resort to complete case analysis are potentially dangerous and biased. Analysts should therefore consider methods that can explicitly incorporate missing data assumptions and assess the robustness of the results to a range of plausible alternatives.","tags":["Missing Data","Economic Evaluations"],"title":"Pitfalls of adjusting for mean baseline utilities/costs in trial-based cost-effectiveness analysis with missing data","type":"publication"},{"authors":["A Gabrio","AJ Mason","G Baio"],"categories":null,"content":"","date":1554076800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554076800,"objectID":"e4282ca40728b2e297a1792c11cd58b6","permalink":"/publication/gabrio2019a/","publishdate":"2019-04-01T00:00:00Z","relpermalink":"/publication/gabrio2019a/","section":"publication","summary":"Economic evaluations from individual?level data are an important component of the process of technology appraisal, with a view to informing resource allocation decisions. A critical problem in these analyses is that both effectiveness and cost data typically present some complexity (eg, nonnormality, spikes, and missingness) that should be addressed using appropriate methods. However, in routine analyses, standardised approaches are typically used, possibly leading to biassed inferences. We present a general Bayesian framework that can handle the complexity. We show the benefits of using our approach with a motivating example, the MenSS trial, for which there are spikes at one in the effectiveness and missingness in both outcomes. We contrast a set of increasingly complex models and perform sensitivity analysis to assess the robustness of the conclusions to a range of plausible missingness assumptions. We demonstrate the flexibility of our approach with a second example, the PBS trial, and extend the framework to accommodate the characteristics of the data in this study. This paper highlights the importance of adopting a comprehensive modelling approach to economic evaluations and the strategic advantages of building these complex models within a Bayesian framework. ","tags":["Missing Data","Economic Evaluations","Bayesian Statistics"],"title":"A Full Bayesian Model to Handle Structural Ones and Missingness in Economic Evaluations from Individual-Level Data","type":"publication"},{"authors":[],"categories":null,"content":"","date":1527858000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1527858000,"objectID":"ea9f4848b6ad6d57bd35e16b751992b0","permalink":"/talk/priment2018/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/priment2018/","section":"talk","summary":"Invited presentation","tags":["Economic Evaluations","Missing Data"],"title":"A Bayesian Parametric Approach to Handle Nonignorable Missingness in Economic Evaluations","type":"talk"},{"authors":null,"categories":null,"content":"Modelling Framework We extend and adapt the modelling frameworks typically used for the analysis of football data and propose a novel Bayesian hierarchical modelling framework for the analysis and prediction of volleyball results in regular seasons. Three different sub-models or \u0026ldquo;modules\u0026rdquo; form our framework: (1) The module of the observed number of points scored by the two opposing teams in a match ($y_h$ and $y_a$); (2) the module of the binary indicator for the number of sets played ($d^s$); (3) the module of the binary indicator for the winner of the match ($d^m$). These three modules are jointly modelled using a flexible Bayesian parametric approach, which allows to fully propagate the uncertainty for each unobserved quantity and to assess the predictive performance of the model in a relatively easy way. In the following, we describe the notation and the model used in each of the three modules.\nModule 1: Modelling the Scoring Intensity In the first module of the framework, we model the number of points scored by the home and away team in the $i$-th match of the season $\\boldsymbol y=(y_{hi},y_{ai})$ using two independent Poisson distributions\n\\[ y_{hi} \\sim Poisson(\\theta_{hi}), \\]\n\\[ y_{ai} \\sim Poisson(\\theta_{ai}), \\]\nconditionally on the set of parameters $\\boldsymbol \\theta=(\\theta_{hi},\\theta_{ai})$, representing the scoring intensity in the $i$-th match for the home and away team, respectively. These parameters are then modelled using the log-linear regressions\n\\[ log(\\theta_{hi}) =\\mu + \\lambda + att_{h(i)} + def_{a(i)}, \\]\n\\[ log(\\theta_{ai}) =\\mu + att_{a(i)} + def_{h(i)}, \\]\nwhich corresponds to a Poisson log-linear model. Within these formulae, $\\mu$ is a constant, while $\\lambda$ can be identified as the home effect and represents the advantage for the team hosting the game which is typically assumed to be constant for all the teams and throughout the season. The overall offensive and defensive performances of the $k$-th team is captured by the parameters $att$ and $def$, whose nested indexes $h(i), a(i)=1,\\ldots,K$ identify the home and away team in the $i$-th game of the season, where $K$ denotes the total number of the teams.\nWe then expand the modelling framework to incorporate match-specific statistics related to the offensive and defensive performances of the home and away teams. More specifically, the effects associated with the attack intensity of the home teams and the defence effect of the away teams are:\n\\[ att_{h(i)} =\\alpha_{0h(i)} + \\alpha_{1h(i)}att^{eff}_{hi} + \\alpha_{2h(i)}ser^{eff}_{hi}, \\]\n\\[ def_{a(i)} =\\beta_{0a(i)} + \\beta_{1a(i)}def^{eff}_{ai} + \\beta_{2a(i)}blo^{eff}_{ai}. \\]\nWe omit the index $i$ from the terms to the left-hand side of the above formulae to ease notation, i.e. $att_{h(i)}=att_{h(i)i}$ and $def_{a(i)}=def_{a(i)i}$. The overall offensive effect of the home teams is a function of a baseline team specific parameter $\\alpha_{0h(i)}$, and the attack and serve efficiencies of the home team, whose impact is captured by the parameters $\\alpha_{1h(i)}$ and $\\alpha_{2h(i)}$. The overall defensive effect of the away team is a function of a baseline team-specific parameter $\\beta_{0a(i)}$, and the defence and block efficiencies of the away team, whose impact is captured by the parameters $\\beta_{1a(i)}$ and $\\beta_{2a(i)}$, respectively. Similarly, the effects associated with the attack intensity of the away teams and the defence effect of the home teams are:\n\\[ att_{a(i)} =\\alpha_{0a(i)} + \\alpha_{1a(i)}att^{eff}_{ai}+ \\alpha_{2a(i)}ser^{eff}_{ai}, \\]\n\\[ def_{h(i)} =\\beta_{0h(i)} + \\beta_{1h(i)}def^{eff}_{hi}+ \\beta_{2h(i)}blo^{eff}_{hi}, \\]\nTo achieve identifiability of the model, a set of parametric constraints needs to be imposed. We impose sum-to-zero constraints on the team-specific parameters, i.e. we set $\\sum_{k=1}^{K}\\alpha_{jk}=0$ and $\\sum_{k=1}^{K}\\beta_{jk}=0$, for $k=1,\\ldots,K$ and $j=(0,1,2)$. Under this set of constraints, the overall offensive and defensive effects of the teams are expressed as departures from a team of average offensive and defensive performance. Within a Bayesian framework, prior distributions need to be specified for all random parameters in the model. Weakly informative Normal distributions centred at $0$ with a relatively large variances are specified for the fixed effect parameters.\nModule 2: Modelling the Probability of Playing 5 Sets In the second module, we explicitly model the chance of playing $5$ sets in the $i$-th match of the season, i.e. the sum of the sets won by the home ($s_{hi}$) and away ($s_{ai}$) team is equal to $5$. This is necessary when generating predictions in order to correctly assign the points to the winning/losing teams throughout the season and evaluate the rankings of the teams at the end of the season. We model the indicator variable $d^s_{i}$, taking value $1$ if $5$ sets were played in the $i-$th match and $0$ otherwise, using a Bernoulli distribution\n\\[ d^s_{i}:=\\mathbb{I}(s_{hi}+s_{ai}=5)\\sim\\mbox{Bernoulli}(\\pi^s_{i}), \\]\nwhere\n\\[ logit(\\pi^s_{i})= \\gamma_0 + \\gamma_1y_{hi} + \\gamma_2y_{ai}.\n\\]\nModule 3: Modelling the Probability of Winning the Match The last module deals with the chance of the home team to win the $i$-th match, i.e. the total number of sets won by the home team ($s_{hi}$) is larger than that of the away team ($s_{ai}$) \u0026ndash; we note that we could have also equivalently decided to model the chance of the away team to win the $i$-th match. This part of the model is again necessary when predicting the results for future matches, since the team associated with the higher number of points scored in the $i$-th match may not correspond to the winning team. We model the indicator variable $d^m_{i}$, taking value $1$ if the home team won the $i-$th match and $0$ otherwise, using another Bernoulli distribution\n\\[ d^m_{i}:=\\mathbb{I}(s_{hi}\u0026gt;s_{ai}) \\sim\\mbox{Bernoulli}(\\pi^m_{i}), \\]\nwhere\n\\[ logit(\\pi^m_{i})= \\eta_0 + \\eta_1y_{hi} + \\eta_2y_{ai} + \\eta_3 d^s_i. \\]\nThe next figure shows a graphical representation of the modelling framework proposed.\n\rGraphical representation of the modelling framework.\r\r\rThe framework corresponds to a joint distribution for all the observed quantities which are explicitly modelled. This is factored into the product of the marginal distribution of the total number of points scored by the two teams in each match, Module 1 \u0026ndash; $p(\\boldsymbol y)$, the conditional distribution of the probability of playing $5$ sets in a match given $\\boldsymbol y$, Module 2 \u0026ndash; $p(d^s_i \\mid \\boldsymbol y)$, and the conditional probability of winning the match given $\\boldsymbol y$ and $d^s_i$, Module 3 \u0026ndash; $p(d^m_i\\mid \\boldsymbol y, d^s_i)$. Module 1 also includes the different in-game statistics as covariates in the model. These are related to the either the offensive (serve and attack efficiency) or defensive (defence and block efficiency) effects of the home and away teams in each match of the season, and are respectively denoted in the graph as $\\boldsymbol x^{att}_{ti}=(ser^{eff}_{ti}, att^{eff}_{ti})$ and $\\boldsymbol x^{def}_{ti}=(def^{eff}_{ti}, blo^{eff}_{ti})$ to ease notation, for $t=(h,a)$.\nAccounting for the multilevel correlation \nAlthough the individual-level correlation between the observable variables $y_{hi}$ and $y_{ai}$ is taken into account through the hierarchical structure of the framework, a potential limitation of the model is that it ignores the possible multilevel correlation between the team-specific offensive $\\alpha_{jk}$ and defensive $\\beta_{jk}$ coefficients, for $j=(0,1,2)$ and $k=1,\\ldots,K$. In an alternative analysis, we account for the multilevel correlation using Inverse-Wishart distributions on the covariance matrix of the team specific parameters $ \\boldsymbol \\Sigma_{\\boldsymbol \\alpha}$ and $ \\boldsymbol \\Sigma_{\\boldsymbol \\beta}$, which are scaled in order to facilitate the specification of the priors.\nResults Overall, the predicted results from both the basic and the scaled IW model seem to replicate the observed data relatively well for most of the teams. The total number of points scored and conceded are similar between the observed and replicated data, with the teams scoring (conceding) the most being also associated with the highest replicated points scored (conceded) and vice versa. Relatively small discrepancies are observed between the results of the two models for some of the teams. The total number of wins and league points are almost identical between the observed and replicated data, with the scaled IW model being associated with slightly m ore accurate predictions compared with the basic model.\nThe following figure compares the cumulative points derived from the observed results throughout the season (the black line) and the predictions from both the basic model (in red), and the scaled Inverse-Wishart model (in blue).\n\rPosterior predictive validation of the basic (red) and IW (blue) model with respect to the observed data (black).\r\r\rFor almost all teams the predicted results are relatively close to the observed data and suggest a good performance of both models.\nConclusions To our knowledge, this is the first modelling framework which jointly allows to predict team rankings and the outcomes of the matches during a season in volleyball. The two alternative specifications implemented in our analysis show generally good predictive performances; between the two models, the scaled IW model seems to be slightly more accurate compared with the basic model, but is also associated with a higher level of complexity.\n","date":1524787200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524787200,"objectID":"9bc5501ddff6119ed99359ce345d8b23","permalink":"/project/volleyball/","publishdate":"2018-04-27T00:00:00Z","relpermalink":"/project/volleyball/","section":"project","summary":"Modelling Framework We extend and adapt the modelling frameworks typically used for the analysis of football data and propose a novel Bayesian hierarchical modelling framework for the analysis and prediction of volleyball results in regular seasons. Three different sub-models or \u0026ldquo;modules\u0026rdquo; form our framework: (1) The module of the observed number of points scored by the two opposing teams in a match ($y_h$ and $y_a$); (2) the module of the binary indicator for the number of sets played ($d^s$); (3) the module of the binary indicator for the winner of the match ($d^m$).","tags":["Bayesian Modelling"],"title":"Bayesian Hierarchical Models for the Prediction of Volleyball Results","type":"project"},{"authors":[],"categories":null,"content":"","date":1517824800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517824800,"objectID":"6595e4086447a19af1feb033b3a8201a","permalink":"/talk/hesymposium2018/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/hesymposium2018/","section":"talk","summary":"Invited presentation","tags":["Bayesian Statistics","Economic Evaluations","Missing Data"],"title":"A Full Bayesian Model to Handle Structural Ones and Missingness in Health Economic Evaluations from Individual-Level Data","type":"talk"},{"authors":null,"categories":null,"content":"missingHE is a R package, available on CRAN which is aimed at providing some useful tools to analysts in order to handle missing outcome data under a full Bayesian framework in economic evaluations. The package relies on the R package R2jags to implement Bayesian methods via the statistical software JAGS to obtain inferences using Markov Chain Monte Carlo (MCMC) methods. Different types of missing data models are implemented in the package, including selection models, pattern mixture models and hurdle models. A range of parametric distributions can be specified when modelling the typical outcomes in an trial-based economic evaluations, namely the effectiveness and cost variabels, while simultaneously incorporating different assumptions about the missingness mechanism, which allows to easily perform sensitvity analysis to a range of alternative missing data assumptions according to the modelling choices selected by the user.\nmissingHE also provides functions, taken and adapted from other R packages, to assess the results of each type of model, including summaries of the posterior distributions of each model parameter, range and imputations of the missing values, different types of model diagnostics to assess convergence of the algorithm, posterior predictive checks, model assessment measures based on the fit to the observed data, and a general summary of the economic evaluations, including the results from probabilistic sensitivity analyses which are automatically performed within a Bayesian modelling framework.\nFor example, the function plot, when applied to the output of a model fitted using missingHE, produces graphs which compare the observed and imputed values for both cost and benefit measures in each treatment group to detect possible concerns about the plausibility of the imputations.\nMore information, including new updates, about \u0026lsquo;missingHE\u0026rsquo; can be found at this dedicated page\n","date":1517788800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1517788800,"objectID":"28eb798e628125aa2f3089fd4e6e3707","permalink":"/project/missinghe/","publishdate":"2018-02-05T00:00:00Z","relpermalink":"/project/missinghe/","section":"project","summary":"An R package to handle missingness in health economic evaluations","tags":["Missing Data","Bayesian Modelling"],"title":"missingHE","type":"project"},{"authors":["A Gabrio","AJ Mason","G Baio"],"categories":null,"content":"","date":1496275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496275200,"objectID":"bbef5e786cc53704ee1f92102539d5e4","permalink":"/publication/gabrio2017/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/publication/gabrio2017/","section":"publication","summary":"Cost-effectiveness analyses (CEAs) alongside randomised controlled trials (RCTs) are increasingly designed to collect resource use and preference-based health status data for the purpose of healthcare technology assessment. However, because of the way these measures are collected, they are prone to missing data, which can ultimately affect the decision of whether an intervention is good value for money. We examine how missing cost and effect outcome data are handled in RCT-based CEAs, complementing a previous review (covering 2003-2009, 88 articles) with a new systematic review (2009-2015, 81 articles) focussing on two different perspectives. First, we provide guidelines on how the information about missingness and related methods should be presented to improve the reporting and handling of missing data. We propose to address this issue by means of a quality evaluation scheme, providing a structured approach that can be used to guide the collection of information, elicitation of the assumptions, choice of methods and considerations of possible limitations of the given missingness problem. Second, we review the description of the missing data, the statistical methods used to deal with them and the quality of the judgement underpinning the choice of these methods. Our review shows that missing data in within-RCT CEAs are still often inadequately handled and the overall level of information provided to support the chosen methods is rarely satisfactory. ","tags":["Missing Data","Economic Evaluations","Literature Review"],"title":"Handling Missing Data in Within-Trial Cost-Effectiveness Analysis: A Review with Future Recommendations","type":"publication"},{"authors":null,"categories":null,"content":"Introduction We performed a systematic literature review that assesses the quality of the information reported and type of methods used to handle missing outcome data in trial-based economic evaluations. The purpose of this review is to critically appraise the current literature in within-trial CEAs with respect to the quality of the information reported and the methods used to deal with missingness for both effectiveness and costs. The review complements previous work, covering 2003-2009 (88 articles) with a new systematic review, covering 2009-2015 (81 articles) and focuses on two~perspectives.\nFirst, we provide guidelines on how the information about missingness and related methods should be presented to improve the reporting and handling of missing data. We propose to address this issue by means of a quality evaluation scheme, providing a structured approach that can be used to guide the collection of information, formulation of the assumptions, choice of methods, and considerations of possible limitations for the given missingness problem. Second, we review the description of the missing data, the statistical methods used to deal with them and the quality of the judgement underpinning the choice of these methods.\nQuality Evaluation Scheme In order to judge whether missing data in CEAs have been adequately handled, we assembled guidelines from previous review articles on how information relating to the missing data should be reported. In particular, we defined three broad components of the analysis that are related to the description of the missingness problem (Description), details of the methods used to address it (Methods) and a discussion on the uncertainty in the conclusions resulting from the missingness (Limitations). For each component, information that is considered to be vital for transparency is listed under key considerations, while other details that could usefully be provided as supplementary material are suggested under optimal considerations.\nUsing the list of key considerations, we determine whether null (all key considerations absent), partial (one or more key considerations absent) or full (all key considerations present) information has been provided for each component. The set of key considerations is defined to ensure a full assessment of the impact that missingness may have on the final conclusions of the analysis with respect to all three components. However, providing a certain level of information on one component (e.g.~full information on Description) typically has a different impact on the results with respect to providing the same level of information on another component (e.g.~full information on Limitations). Based on this, we suggest computing a numerical score that weights each component by the impact that it may have on the final results to summarise the overall information provided on missingness.\nDifferent score values are calculated based on whether full, partial or null information content is provided in each component and by weighting the three components in a ratio of 3:2:1 (Description: Method: Limitations). This weighting scheme has been chosen according to the impact that each component is likely to have on the final conclusions based on assumptions that we deemed to be~reasonable. Specifically, the Limitations component typically has the least importance among the three because of its limited impact on the conclusions. In the same way, the Description component has potentially a higher impact on the results than the Method component as it generally drives the choice for the initial assumptions about the missingness.\nFinally, the relevance of the scores in terms of decision analysis is mainly associated with a qualitative assessment of the articles. Therefore, we suggest converting the scores into ordered grades (A-E) to evaluate the studies based on the overall information reported on the handling of the missing data. Studies that are graded in the top categories should be associated with a higher degree of confidence in their results, whereas more caution should be given in the consideration of results coming from studies that are graded in the bottom categories. When qualitatively assessing the articles, the different grading assigned to each of them could be an indication of a lack in the robustness of the conclusions provided due to missingness uncertainty. With respect to the quality assessment of the studies, the aggregation of the quality scores on the components of the analysis (Description, Method and Limitations) into ordered grades could lead to some loss of information compared with the direct use of the quality scores on each component. However, merging the scores into a fewer number of categories ensures a relatively easy comparison of the quality of the information provided across the three analysis components and provides a useful indication about the different degree of confidence to assign to the results obtained by each study.\nThe Figure below shows a visual representation of the grade (and score) assignment in the quality evaluation scheme. Although the importance between the different components is subjective, the chosen structure represents a reasonable and relatively straightforward assessment scheme.\n\rQuality Evaluation Scheme.\r\r\rThe articles reviewed for the two periods are presented and compared by type of analysis performed. First, the base-case methods are considered, i.e.~those used in the main analysis. Second, any alternative methods in these analyses are discussed; when present, these assess the robustness of the results obtained in the main analysis against departures from the initial assumptions on missingness.\nSummary of the findings Our review is based on a sample of recently published studies and should therefore provide a picture of current missing data handling in within-trial CEAs. However, the quality assessment of the articles is based on the information reported in the articles. It is possible that authors had assessed the robustness of their conclusions to the missing data using alternative approaches that were not reported in the published version because of space limitations in journals. In these cases, it is important that on-line appendices and supplementary material are used to report these~alternatives. In our literature review, information about missing data information and methods was available from $4$ and $9$ on-line supplementary materials for the period 2003-2009 and 2009-2015, respectively. Both the larger number of on-line materials and more detailed information reported about missingness handling in the analyses indicate an increased use of this tool in the later period (2009-2015) compared to the first period (2003-2009).\nDescriptive Review \rMissingness methods by outcome and period.\r\r\rFrom the comparison of the base-case methods used for the costs and effects between 2009 and 2015, the Figure above shows a marked reduction in the number of methods not clearly described for the effects, compared to those for the costs. A possible reason for this is that, while clinical effectiveness measures are often collected through self-reported questionnaires, which are naturally prone to missingness, cost measures rely more on clinical patient files which may ensure a higher completeness rate. It was not possible to confirm this interpretation in the reviewed studies due to the high proportions of articles not clearly reporting the missing rates in both 2003-2009 and 2009-2015 periods, for effects ($\\approx 45%$ and $\\approx 38%$) and costs ( $\\approx 50%$ and $\\approx 62%$). In addition, clinical outcomes are almost invariably the main objective of RCTs and are usually subject to more advanced and standardised analyses. Arguably, costs are often considered as an add-on to the standard trial: for instance, sample size calculations are almost always performed with the effectiveness measure as the only outcome of interest. Consequently, missing data methods are less frequently well thought through for the analysis of the costs. However, this situation is likely to change as cost data from different perspectives (e.g. caregivers, patients, society, etc.) are being increasingly used in trials, leading to the more frequent adoption of self-report cost data which may start to exhibit similar missingness characteristics to effect data.\nThe review identified only a few articles using more than one alternative method. In addition, these analyses are typically conducted without any clear justification about their underlying missing data assumptions and may therefore not provide a concrete assessment of the impact of missingness uncertainty. This situation indicates a gap in the literature associated with an under-implementation of sensitivity analysis, which may significantly affect the whole decision-making process outcome, under the perspective of a body who is responsible for providing recommendations about the implementation of alternative interventions for health care matters.\nLimiting the assessment of missingness assumptions to a single case is unlikely to provide a reliable picture of the underlying mechanism. This, in turn, may have a significant impact on the CEA and mislead its conclusions, suggesting the implementation of non-cost-effective treatments. Robustness analyses assess the sensitivity of the results to alternative missing data methods but do not justify the choice of these methods and their underlying assumptions about missingness which may therefore be inappropriate in the specific context analysed. By contrast, sensitivity analyses, which rely on external information to explore plausible alternative methods and missingness assumptions, represent an important and more appropriate tool to provide realistic assessments of the impact of missing data uncertainty on the final conclusions.\nQuality assessment Generally speaking, most of the reviewed papers achieved an unsatisfactory quality score under the Quality Evaluation Scheme. Indeed, the benchmark area on the top-right corner of the graphs is barely reached by less than $7%$ of the articles, both for cost and effect data.\nOverall, the proportions of the studies associated with the lowest category (E) prevails in the majority of the years, with a similar pattern over time between missing costs and effects. All the articles that are associated with the top category (A) belong to the period 2013-2015, with the highest proportions of articles falling in this category being observed in 2015 for both outcomes. The opportunity of reaching such a target might be precluded by the choice of the method adopted, which may not be able to support less restrictive assumptions about missingness, even when this would be desirable. As a result, when simple methods cannot be fully justified it is necessary to replace them with more flexible ones that can relax assumptions and incorporate more alternatives. In settings such as those involving MNAR, sensitivity analysis might represent the only possible approach to account for the uncertainty due to the missingness in a principled way. However, due to the lack of studies either performing a sensitivity analysis or providing high quality scores on the assumptions, missingness is not adequately addressed in most studies. This could have the serious consequence of imposing too restrictive assumptions about missingness and affect the outcome of decision making.\nConclusions Our review shows, over time, a significant change from more to less restrictive methods in terms of the assumptions on the missingness mechanism. This is an encouraging movement towards a more suitable and careful missing data analysis. The results from the disaggregated analysis by year of publication in the later period (2009-2015) indicates the rise of a better and more transparent approach to handle missingness in the latest years of the review, especially in 2015. In particular, compared to the previous years, the articles reviewed from 2015 are associated with a higher proportion of MI methods used in the base-case analysis, a substantial increase in the number of robustness methods implemented, and a better quality score assignment.\nNevertheless, improvements are still needed as, overall, only a small number of articles provide transparent information about the missing data and almost no study performs a sensitivity~analysis. These failings are probably due to the fact that the implications of using methods that do not handle missingness in a principled way are not well-known among practitioners. In addition, the choice of the missing data methods may also be guided by their ease of implementation in standard software packages rather than methodological reasons. This is a potentially serious issue for bodies such as the NICE who use these evaluations in their decision making, thus possibly leading to incorrect policy decisions about the cost-effectiveness of new treatment options.\nThe Quality Evaluation Scheme represents a valuable tool to improve missing data handling. By carefully thinking about each component in the analysis we are forced to explicitly consider all the assumptions we make about missingness and assess the impact of their variation on final conclusions. The main advantage is a more comparable formalisation of the uncertainty as well as a better indication of possible issues in assessing the cost-effectiveness of new treatments.\n","date":1496275200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1496275200,"objectID":"264b6a73ec81e06fc20279d323edf442","permalink":"/project/missing-data-review/","publishdate":"2017-06-01T00:00:00Z","relpermalink":"/project/missing-data-review/","section":"project","summary":"With [Alexina Mason](https://www.lshtm.ac.uk/aboutus/people/mason.alexina) and [Gianluca Baio](https://www.ucl.ac.uk/statistics/people/gianlucabaio)","tags":["Missing Data"],"title":"Missingness Methods in trial-based CEA","type":"project"},{"authors":[],"categories":null,"content":"","date":1473346800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1473346800,"objectID":"a177d4c811e51520cedd357bee093b9f","permalink":"/talk/euhea2016/","publishdate":"2019-06-01T00:00:00Z","relpermalink":"/talk/euhea2016/","section":"talk","summary":"Contributed presentation","tags":["Economic Evaluations","Missing Data"],"title":"Handling Missing Data in Within-Trial Cost-Effectiveness Analysis: a Review with Future Recommendations","type":"talk"},{"authors":null,"categories":["rubric"],"content":"\rA general problem associated with the implementatio of Inverse Probability Weighting (IPW) methods is that information in some available data is ignored by focussing only on the complete cases (Schafer and Graham (2002)). This has provided room to extend these methods to make a more efficient use of the available information through the incorporation of an “augmentation” term, which lead to the development of the so called Augmented Inverse Probability Weighting (AIPW) methods. These approaches extend IPW methods by creating predictions from a model to recove the information in the incomplete units and applying IPW to the residuals from the model (Little and Rubin (2019)).\nConsidering the IPW Generalised Estimating Equation (GEE)\n\\[\r\\sum_{i=1}^{n_r} = w_i(\\hat{\\alpha})D_i(x_i,\\beta)(y_i-g(x_i,\\beta))=0,\r\\]\nwhere \\(w_i(\\hat{\\alpha})=\\frac{1}{p(x_i,z_i \\mid \\hat{\\alpha})}\\), with \\(p(x_i,z_i \\mid \\hat{\\alpha})\\) an estimate of the probability of being a complete unit estimated for example using logistic regressions of the missingness indicator \\(m_i\\) on the vectors of the covariate and auxiliary variables \\(x_i\\) and \\(z_i\\), respectively. A problem of this IPW estimator is that it has poor small sample properties when the propensity score gets close to zero or one for some observations, which will lead to high variance in the estimator. AIPW methods can provide estimators of \\(\\beta\\) which are more efficient than their nonaugmented IPW versions. In general, AIPW estimating functions provide a method for constructing estimators of \\(\\beta\\) based on two terms:\nThe usual IPW term \\(p(x_i,z_i \\mid \\hat{\\alpha})\\)\n\rAn augmentation term \\(g^\\star(x_i,\\beta)\\)\n\r\rThe basis for the first term is a complete data unbiased estimating function for \\(\\beta\\), whereas the basis for the second term is some function of the observed data chosen so it has conditional mean of zero given the complete data (Molenberghs et al. (2014)).\nDoubly Robust Estimators\rAn important class of AIPW methods is known as doubly robust estimators, which have desirable robustness properties (Robins, Rotnitzky, and Laan (2000),Robins and Rotnitzky (2001)). The key feature of these estimators is that they relax the assumption that the model of the missingness probabilities is correctly specified, although requiring additional assumptions on the model for \\(y_i \\mid x_i\\). For example, doubly robust estimators for a population mean parameter \\(\\mu\\) could be obtained as follows:\nFit a logistic regression model for the probability of observing \\(y_i\\) as a function of \\(x_i\\) and \\(z_i\\) to derive the individual weights \\(w_i(\\hat{\\alpha})\\).\n\rFit a generalized linear model for the outcome of responders in function of \\(x_i\\) using weights \\(w_i(\\hat{\\alpha})\\) and let \\(g^\\star(x_i,\\beta)\\) denote the fitted values for subject \\(i\\).\n\rTake the sample average of the fitted values \\(g^\\star(x_i,\\beta)\\) of both respondents and nonrespondents as an estimate of the population mean \\(\\hat{\\mu}\\)\n\r\rDoubly robust estimators require the specification of two models: one for the missingness probability and another for the distribution of the incomplete data. When the augmentation term \\(g^\\star(x_i,\\beta)\\) is selected and modelled correctly according to the distribution of the complete data, the resulting estimator of \\(\\beta\\) is consistent even if the model of missingness is misspecified. On the other hand, if the model of missingness is correctly specified, the augmentation term no longer needs to be correctly specified to yield consistent estimators of \\(\\beta\\) (Scharfstein, Daniels, and Robins (2003),Bang and Robins (2005)). Doubly robust estimators therefore allow to obtain an unbiased estimating function for \\(\\beta\\) if either the model for the incomplete data or the model for the missingness mechanism has been correctly specified.\n\rExample\rSuppose the full data consists of a single outcome variable \\(y\\) and an additional variable \\(z\\) and that the objective is to estimate the population outcome mean \\(\\mu=\\text{E}[y]\\). When \\(y\\) is partially observed (while \\(Z\\) is always fully observed), individuals may fall into one of two missingness patterns \\(r=(r_{y},r_{z})\\), namely \\(r=(1,1)\\) if both variables are observed or \\(r=(1,0)\\) if \\(y\\) is missing. Let \\(c=1\\) if \\(r=(1,1)\\) and \\(c=0\\) otherwise, so that the observed data can be summarised as \\((c,cy,z)\\). Assuming that missingness only depends on \\(z\\), that is\n\\[\rp(c=1 \\mid y,z)=p(c=1 \\mid z)=\\pi(z),\r\\]\nthen the missing data mechanism is Missing At Random (MAR). Under these conditions, consider the consistent IPW complete case estimating equation\n\\[\r\\sum_{i=1}^n\\frac{c_i}{\\pi(z_i \\mid \\hat{\\alpha})}(y_i-\\mu)=0,\r\\]\nwhich can be used to weight the contribution of each complete case by the inverse of \\(\\pi(z_i \\mid \\hat{\\alpha})\\), typically estimated via logistic regressions. A general problem of this type of estimators is that they discard all the available data among the non-completers and are therefore inefficient. However, it is possible to augment the simple IPW complete case estimating equation to improve efficiency. The optimal estimator for \\(\\mu\\) within this class is the solution to the estimating equation\n\\[\r\\sum_{i=1}^n \\left(\\frac{c_i}{\\pi(z_i \\mid \\hat{\\alpha})}(y_i-\\mu) - \\frac{c_i-\\pi(z_i \\mid \\hat{\\alpha})}{\\pi(z_i \\mid \\hat{\\alpha})}\\text{E}[(y_i-\\mu)\\mid z_i] \\right),\r\\]\nwhich leads to the estimator\n\\[\r\\mu_{aipw}=\\frac{1}{n}\\sum_{i=1}^n \\left(\\frac{c_iy_i}{\\pi(z_i\\mid \\hat{\\alpha})} - \\frac{c_i - \\pi(z_i\\mid \\hat{\\alpha})}{\\pi(z_i\\mid \\hat{\\alpha})} \\text{E}[y_i \\mid z_i] \\right).\r\\]\nThe conditional expectation \\(\\text{E}[y_i \\mid z_i]\\) is not known and must be estimated from the data. Under a Missing At Random (MAR) assumption we have that \\(\\text{E}[y \\mid z]=\\text{E}[y \\mid z, c=1]\\), that is the conditional expecation of \\(y\\) given \\(z\\) is the same as that among the completers. Thus, we can specify a model \\(m(z,\\xi)\\) for \\(\\text{E}[y \\mid z]\\), indexed by the parameter \\(\\xi\\), that can be estimated from the completers. If \\(y\\) is continuous, a simple choice is to estimate \\(\\hat{\\xi}\\) by OLS from the completers. The AIPW estimator for \\(\\mu\\) then becomes\n\\[\r\\mu_{aipw}=\\frac{1}{n}\\sum_{i=1}^n \\left(\\frac{c_iy_i}{\\pi(z_i\\mid \\hat{\\alpha})} - \\frac{c_i - \\pi(z_i\\mid \\hat{\\alpha})}{\\pi(z_i\\mid \\hat{\\alpha})} m(z_i\\mid \\hat{\\xi}) \\right).\r\\]\nIt can be shown that this estimator is more efficient that the simple IPW complete case estimator for \\(\\mu\\) and that it has a double robustness property. This ensures that \\(\\mu_{aipw}\\) is a consitent estimator of \\(\\mu\\) if either\n\rthe model \\(\\pi(z\\mid\\alpha)\\) is correctly specified, or\n\rthe model \\(m(z\\mid \\xi)\\) is correctly specified.\n\r\rTo see a derivation of the double robustness property I put here a link to some nice paper.\n\rConlcusions\rAs all weighting methods, such as IPW, AIPW methods are semiparametric methods that aim to achieve robustness and good performance over more general classes of population distributions. However, semiparametric estimators can be less efficient and less powerful than Maximum Likelihood or Bayesian estimators under a well specified parametric model. With missing data, Rubin (1976) results show that likelihood-based methods perform uniformly well over any Missing At Random (MAR) missingness distribution, and the user does not need to specify that distribution. However, semiparametric methods that relax assumptions about the data must in turn assume a specific form for the distribution of missingness. It has been argued that, for these semiparametric methods to gain a substantial advantage over well-specified likelihood methods, the parametric model has to be grossly misspecified (Meng (2000)).\n\rReferences\rBang, Heejung, and James M Robins. 2005. “Doubly Robust Estimation in Missing Data and Causal Inference Models.” Biometrics 61 (4): 962–73.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rMeng, Xiao-Li. 2000. “Missing Data: Dial M for???” Journal of the American Statistical Association 95 (452): 1325–30.\n\rMolenberghs, Geert, Garrett Fitzmaurice, Michael G Kenward, Anastasios Tsiatis, and Geert Verbeke. 2014. Handbook of Missing Data Methodology. Chapman; Hall/CRC.\n\rRobins, James M, and Andrea Rotnitzky. 2001. “Comment on the Bickel and Kwon Article,‘Inference for Semiparametric Models: Some Questions and an Answer’.” Statistica Sinica 11 (4): 920–36.\n\rRobins, James M, Andrea Rotnitzky, and Mark van der Laan. 2000. “On Profile Likelihood: Comment.” Journal of the American Statistical Association 95 (450): 477–82.\n\rRubin, Donald B. 1976. “Inference and Missing Data.” Biometrika 63 (3): 581–92.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rScharfstein, Daniel O, Michael J Daniels, and James M Robins. 2003. “Incorporating Prior Beliefs About Selection Bias into the Analysis of Randomized Trials with Missing Outcomes.” Biostatistics 4 (4): 495–512.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d2220861f56419a1996bd91e28893150","permalink":"/missmethods/augmented-inverse-probability-weighting/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/augmented-inverse-probability-weighting/","section":"missmethods","summary":"A general problem associated with the implementatio of Inverse Probability Weighting (IPW) methods is that information in some available data is ignored by focussing only on the complete cases (Schafer and Graham (2002)). This has provided room to extend these methods to make a more efficient use of the available information through the incorporation of an “augmentation” term, which lead to the development of the so called Augmented Inverse Probability Weighting (AIPW) methods.","tags":["Weighting Methods","Semiparametric Methods","Weighting Adjustments","Inverse Probability Weighting","Augmented Inverse Probability Weighting"],"title":"Augmented Inverse Probability Weighting","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rComplete case analysis (CCA) can be particularly inefficient for data sets with a large number of variables which are partially observed. An alternative approach that can be used to conduct univariate analyses in known as Available Case Analysis (ACA), which uses all the available cases, separately for each variable under examination, to estimate the quantities of interest.\nThe main drawback of ACA is that the sample used to perform the analysis varies from variable to variable according to the patterns of missing data, which generates problems of comparability across variables if the missingness mechanism is not missing completely at random (MCAR), i.e. the missing data probabilities depend on the variables under study. While estimates of means and variances can be easily computed, measures of covariation need to be adjusted. In particular, for estimating sample covariances, this approach is known as pairwise deletion or pairwise inclusion\nPairwise measures of covariation\rOne possible approach to estimate pairwise measures of covariation for \\(y_j\\) and \\(y_k\\) is to use only those units \\(i=1,\\ldots,n_{ac}\\) for which both variables are observed (Little and Rubin (2019)). For example, one can compute pairwise sample covariances as:\n\\[\rs^{ac}_{jk} = \\frac{\\sum_{i \\in I_{ac}}(y_{ij}-\\bar{y}_{j}^{ac})(y_{ik}-\\bar{y}_{k}^{ac})}{(n_{ac}-1)},\r\\]\nwhere \\(I_{ac}\\) is the set of \\(n_{ac}\\) with both \\(y_j\\) and \\(y_k\\) observed, while the sample means \\(\\bar{y}^{ac}_{j}\\) and \\(\\bar{y}^{ac}_{k}\\) are calculated over this set of units. We can also estimate the sample correlation\n\\[\rr^{\\star}_{jk} = \\frac{s^{ac}_{jk}}{\\sqrt{s^2_{j}s^{2}_{k}}},\r\\]\nwhere \\(s^2_{j}\\) and \\(s^2_{k}\\) are the sample variances computed over the sets of observed units \\(I_{j}\\) and \\(I_{k}\\), respectively. A problem of this type of correlation estimate is that it can lie outside the range \\((-1,1)\\), which is typically addressed by computing pairwise correlations (Wilks (1932)), where variances are estimated from the set of units with both variables observed \\(I_{jk}\\), i.e. \\[\rr^{ac}_{jk} = \\frac{s^{ac}_{jk}}{\\sqrt{s^{2,ac}_{j}s^{2,ac}_{k}}}.\r\\]\nIn addition, we could also replace the sample means \\(\\bar{y}^{ac}_{j}\\) and \\(\\bar{y}^{ac}_{k}\\), evaluated on the common set of units \\(I_{jk}\\), with \\(\\bar{y}_{j}\\) and \\(\\bar{y}_{k}\\), which are evaluated on the sets of units \\(I_{j}\\) and \\(I_{k}\\), respectively. This leads to the following estimates for the sample covariances (Matthai (1951)):\n\\[\rs^{\\star}_{jk} = \\frac{\\sum_{i \\in I_{ac}}(y_{ij}-\\bar{y}_{j})(y_{ik}-\\bar{y}_{k})}{(n_{ac}-1)},\r\\]\nPairwise AC estimates aim at recovering information from partially-observed units that are lost by CCA. However, when considered together, the estimates suffer from inconsistencies that undermine the validity of these methods. For example, pairwise correlation matrices may be not positive definite. Because parameters are estimated from different sets of units, different approaches can be used to obtain estimate of the measures of uncertainty (Schafer and Graham (2002)).\n\rConclusions\rAC estimates allow to make use of all the available evidence in the data and may be more efficient that CCA when the missingness mechanism is MCAR and correlations are modest (Kim and Curry (1977)). However, when correlations are more substantial, ACA may become even less efficient than CCA (Haitovsky (1968), Azen and Van Guilder (1981)).\n\rReferences\rAzen, S, and M Van Guilder. 1981. “Conclusions Regarding Algorithms for Handling Incomplete Data.” 1981 Proceedings of the Statistical Computing Section, 53–56.\n\rHaitovsky, Yoel. 1968. “Missing Data in Regression Analysis.” Journal of the Royal Statistical Society: Series B (Methodological) 30 (1): 67–82.\n\rKim, Jae-On, and James Curry. 1977. “The Treatment of Missing Data in Multivariate Analysis.” Sociological Methods \u0026amp; Research 6 (2): 215–40.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rMatthai, Abraham. 1951. “Estimation of Parameters from Incomplete Data with Application to Design of Sample Surveys.” Sankhyā: The Indian Journal of Statistics, 145–52.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rWilks, Samuel S. 1932. “Moments and Distributions of Estimates of Population Parameters from Fragmentary Samples.” The Annals of Mathematical Statistics 3 (3): 163–95.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"0095ad23651f3b9fc6ef8bdbe5528a6b","permalink":"/missmethods/available-case-analysis/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/available-case-analysis/","section":"missmethods","summary":"Complete case analysis (CCA) can be particularly inefficient for data sets with a large number of variables which are partially observed. An alternative approach that can be used to conduct univariate analyses in known as Available Case Analysis (ACA), which uses all the available cases, separately for each variable under examination, to estimate the quantities of interest.\nThe main drawback of ACA is that the sample used to perform the analysis varies from variable to variable according to the patterns of missing data, which generates problems of comparability across variables if the missingness mechanism is not missing completely at random (MCAR), i.","tags":["Delete Case Methods","Available Case Analysis","Listwise Deletion","Complete Case Analysis"],"title":"Available Case Analysis","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rA useful alternative approach to Maximum Likelihood(ML) methods, particularly when the sample size is small, is to include a reasonable prior distribution for the parameters and compute the posterior distribution of the parameters of interest. The posterior distribution for a model with ignorable missingness is\n\\[\rp(\\theta \\mid Y_0, M) \\equiv p(\\theta \\mid Y_0) \\propto p(\\theta)f(Y_0 \\mid \\theta),\r\\]\nwhere \\(p(\\theta)\\) is the prior and \\(f(Y_0 \\mid \\theta)\\) is the density of the observed data \\(Y_0\\). Simulation from the posterior without iteration can be accomplished if the likelihood can be factored into complete data components, while for general patterns of missing data, Bayesian simulation requires iteration.\nData Augmentation\rData Augmentation(Tanner and Wong (1987)), or DA, is an iterative method of simulating the posteiror distribution of \\(\\theta\\) that combines features of the Expecation Maximisation(EM) algorithm and Multiple Imputation(MI). Starting with an initial draw \\(\\theta_0\\) from an approximation to the posterior, then given the value \\(\\theta_t\\) at iteration \\(t\\):\nDraw \\(Y_{1,t+1}\\) with density \\(p(Y_1 \\mid Y_0, \\theta_t)\\) (I step).\n\rDraw \\(\\theta_{t+1}\\) with density \\(p(\\theta \\mid Y_0, Y_{1,t+1})\\) (P step).\n\r\rThe procedure is motivated by the fact that the distributions in these two steps are often much easier to draw from than either of the posteriors \\(p(Y_1 \\mid Y_0)\\) and \\(p(\\theta \\mid Y_0)\\), or the joint posterior \\(p(\\theta, Y_1 \\mid Y_0)\\). The procedure can be shown to eventually yield a draw from the joint posterior of \\(Y_1\\) and \\(\\theta\\) given \\(Y_0\\), in the sense that as \\(t\\) tends to infinity this sequence converges to a draw from the joint distribution.\nBivariate Normal Data Example\rSuppose having a sample \\(y_i=(y_{1i},y_{2i})\\) from a Bivariate Normal distribution for \\(i=1,\\ldots,n\\) units, with mean vector \\(\\mu=(\\mu_1,\\mu_2)\\) and \\(2\\times2\\) covariance matrix \\(\\Sigma\\). Assume that one group of units has \\(Y_1\\) observed and \\(Y_2\\) missing, while a second group of units has both variables observed and a third group of units has \\(Y_1\\) missing and \\(Y_2\\) observed. Under DA methods, each iteration \\(t\\) consists of an I step and a P step. In the first, missing data are replaced with draws from its conditional distribution given the observed data and current values of the parameters (rather then its conditional mean as in the EM algorithm). Because units are conditionally independent given the parameters, each missing \\(y_{2i}\\) is drawn independently as\n\\[\ry_{2i,t+1} \\sim N\\left(\\beta_{20t} + \\beta_{21t}y_{1i}, \\sigma^2_{2t} \\right),\r\\]\nwhere \\(\\beta_{20t},\\beta_{21t}\\) and \\(\\sigma^2_{2t}\\) are the \\(t\\)-th iterates of the regression parameters of \\(Y_2\\) on \\(Y_1\\). Analogously, each missing \\(y_{1i}\\) is drawn independently as\n\\[\ry_{1i,t+1} \\sim N\\left(\\beta_{10t} + \\beta_{11t}y_{2i}, \\sigma^2_{1t} \\right),\r\\]\nwhere \\(\\beta_{10t},\\beta_{11t}\\) and \\(\\sigma^2_{1t}\\) are the \\(t\\)-th iterates of the regression parameters of \\(Y_1\\) on \\(Y_2\\). In the second step, these drawn values are treated as if they were the observed values and one draw of the bivariate Normal parameters is made from the complete data posterior. In the limit, the draws are from the joint posterior of the missing values and the parameters. Thus, a run of DA generates both a draw from the posterior predictive distribution of \\(Y_1\\) and a draw from the posterior of \\(\\theta\\), and the procedure can be run \\(D\\) times to obtain \\(D\\) iid draws from the joint posterior of \\(\\theta\\) and \\(Y_1\\). Unlike the EM, estimates of the sampling covariance matrix from the filled-in data can be computed without any corrections to the estimated variances because draws from the posterior predictive distribution of the missing values are imputed in the I step of DA, rather than the conditional means as in the E step of EM. The loss of efficiency from imputing draws is limited when the posterior mean from DA is computed over many draws from the posterior.\n\r\rThe Gibbs’ Sampler\rThe Gibbs’s sampler is an iterative simulation method that is designed to yield draws from the joint posterior distribution in the case of a general pattern of missingness and provides a Bayesian analogous to the Expectation Conditonal Maximisation (ECM) algorithm for ML estimation. The Gibbs’ sampler eventually generates a draw from the distribution \\(p(x_1,\\ldots,x_J)\\) of a set of \\(J\\) random variables \\(X_1,\\ldots,X_J\\) in settings where draws from the joint distribution are hard to compute but draws from the conditional distributions \\(p(x_j \\mid x_1,\\ldots,x_{j-1},x_{j+1},\\ldots, x_J)\\) are relatively easy to compute. Initial values \\(x_{10},\\ldots,x_{J0}\\) are chosen in some way and then, given current values of \\(x_{1t},\\ldots,x_{Jt}\\) at iteration \\(t\\), new values are found by drawing from the following sequence of conditional distributions:\n\\[\rx_{1t+1} \\sim p\\left(x_1 \\mid x_{2t},\\ldots,x_{Jt} \\right),\r\\]\n\\[\rx_{2t+1} \\sim p\\left(x_2 \\mid x_{1t+1},\\ldots,x_{Jt} \\right),\r\\]\nup to\n\\[\rx_{Jt+1} \\sim p\\left(x_J \\mid x_{2t+1},\\ldots,x_{J-1t+1} \\right).\r\\]\nIt can be shown that, under general conditions, the sequence of \\(J\\) iterates converges to a draw from the joint posterior of the variables. When \\(J=2\\), the Gibbs’ sampler is the same as DA if \\(x_1=Y_1\\) and \\(x_2=\\theta\\) and the distributions condition on \\(Y_0\\). We can then obtain a draw from the joint posterior of \\(Y_1,\\theta \\mid Y_0\\) by applying the Gibbs’ sampler, where at iteration \\(t\\) for the \\(d\\)-th imputed data set:\n\\[\rY^d_{1t+1} \\sim p\\left(Y_1 \\mid Y_0, \\theta^d_{t}\\right) \\;\\;\\; \\text{and} \\;\\;\\; \\theta^d_{t+1} \\sim p\\left(\\theta \\mid Y^d_{1t+1}, Y_0\\right),\r\\]\nsuch that one run of the sampler converges to a draw from the posterior predictive distribution of \\(Y_1\\) and a draw from the posterior of \\(\\theta\\). The sampler can be run independently \\(D\\) times to generate \\(D\\) iid draws from the approximate joint posterior of \\(\\theta\\) and \\(Y_1\\). The values of \\(Y_1\\) are multiple imputations of the missing values, drawn from their posterior predictive distribution.\n\rAssessing Convergence\rAssessing convergence of the sequence of draws to the target distribution is more difficult than assessing convergence of an EM-type algorithm because there is no single target quantity to monitor like the maximum value of the likelihood. Methods have been proposed to assess convergence of a single sequence (Geyer (1992)), but a more reliable approach is to simulate \\(D\u0026gt;1\\) sequences with starting values dispersed throughout the parameter space, and the convergence of all quantities of interest can then be monitored by comparing variation between and within simulated sequences, until the “within” variation roughly equals the “between” variation. The idea is that when the distribution of each simulated sequence is close enough to the distribution of all the sequences mixed together, they can all be approximating the target distribution. Gelman and Rubin (1992) developed an explicit monitoring statistic based on the following idea. For each scalar estimand \\(\\psi\\), label the draws from \\(D\\) parallel sequences as \\(\\psi^d_{t}\\), for \\(t=1,\\ldots,T\\) iterations and \\(d=1,\\ldots,D\\) sequences, and compute the between \\(B\\) and within \\(\\bar{V}\\) sequence variances as:\n\\[\rB=\\frac{T}{D-1}\\sum_{d=1}^D(\\bar{\\psi}_{d.} - \\bar{\\psi}_{..})^2, \\;\\;\\; \\text{and} \\;\\;\\; \\bar{V}=\\frac{1}{D}\\sum_{d=1}^D s^2_{d},\r\\]\nwhere \\(\\bar{\\psi}_{d.}=\\frac{1}{T}\\sum_{t=1}^T \\psi_{dt}\\), \\(\\bar{\\psi}_{..}=\\frac{1}{D}\\sum_{d=1}^D \\bar{\\psi}_{d}\\), and \\(s^2_{d}=\\frac{1}{T-1}\\sum_{t=1}^T(\\psi_{dt} - \\bar{\\psi}_{d.})^2\\). We can then estimate the marginal posterior variance of the estimand as\n\\[\r\\widehat{Var}(\\psi \\mid Y_0) = \\frac{T-1}{T}\\hat{V} + \\frac{1}{T} B,\r\\]\nwhich will overestimate the marginal posterior variance assuming the starting distribution is appropriately over-dispersed but is unbiased under stationarity (starting distribution equals the target distribution). For any finte \\(T\\), the within variance \\(\\hat{V}\\) will underestimate the marginal variance because individual sequences have not had time to range over all the target distribution and should have smaller variance then B. In the limit as \\(T \\rightarrow \\infty\\) the expecation of \\(\\hat{V}\\) approaches the marginal variance. These facts suggest monitoring convergence by estimating the factor by which the scale of the current distribution for \\(\\psi\\) might be reduced if the simulations were continued. This is the potential scale reduction factor and is estimated by\n\\[\r\\sqrt{\\hat{R}} = \\sqrt{\\frac{\\widehat{Var}(\\psi \\mid Y_0)}{\\hat{V}}},\r\\]\nwhich declines to 1 as \\(T \\rightarrow \\infty\\). When this quantity is high, there is evidence to proceed the simulations further to improve our inference about the target distribution.\n\rOther Simulation Methods\rWhen draws from the sequence of conditional distributions forming the Gibbs’ sampler are not easy to obtain, other simulation approaches are needed. Among these there are the Sequential Imputation (Kong, Liu, and Wong (1994)), Sampling Imprtance Resampling (Gelfand and Smith (1990)), Rejection Sampling (Von Neumann and others (1951)). One of these alternatives are the Metropolis-Hastings (Metropolis et al. (1953)) algorithms, of which the Gibbs’ sampler is a particular case, which constitute the so-called Markov Chain Monte Carlo (MCMC) algorithms as the sequence of iterates forms a Markov Chain (Gelman et al. (2013)).\n\rReferences\rGelfand, Alan E, and Adrian FM Smith. 1990. “Sampling-Based Approaches to Calculating Marginal Densities.” Journal of the American Statistical Association 85 (410): 398–409.\n\rGelman, Andrew, John B Carlin, Hal S Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. Bayesian Data Analysis. Chapman; Hall/CRC.\n\rGelman, Andrew, and Donald B Rubin. 1992. “A Single Series from the Gibbs Sampler Provides a False Sense of Security.” Bayesian Statistics 4: 625–31.\n\rGeyer, Charles J. 1992. “Practical Markov Chain Monte Carlo.” Statistical Science, 473–83.\n\rKong, Augustine, Jun S Liu, and Wing Hung Wong. 1994. “Sequential Imputations and Bayesian Missing Data Problems.” Journal of the American Statistical Association 89 (425): 278–88.\n\rMetropolis, Nicholas, Arianna W Rosenbluth, Marshall N Rosenbluth, Augusta H Teller, and Edward Teller. 1953. “Equation of State Calculations by Fast Computing Machines.” The Journal of Chemical Physics 21 (6): 1087–92.\n\rTanner, Martin A, and Wing Hung Wong. 1987. “The Calculation of Posterior Distributions by Data Augmentation.” Journal of the American Statistical Association 82 (398): 528–40.\n\rVon Neumann, John, and others. 1951. “The General and Logical Theory of Automata.” 1951, 1–41.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d3aeeaf1ddf6209f7edfb9afb1cf907c","permalink":"/missmethods/bayesian-methods/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/bayesian-methods/","section":"missmethods","summary":"A useful alternative approach to Maximum Likelihood(ML) methods, particularly when the sample size is small, is to include a reasonable prior distribution for the parameters and compute the posterior distribution of the parameters of interest. The posterior distribution for a model with ignorable missingness is\n\\[\rp(\\theta \\mid Y_0, M) \\equiv p(\\theta \\mid Y_0) \\propto p(\\theta)f(Y_0 \\mid \\theta),\r\\]\nwhere \\(p(\\theta)\\) is the prior and \\(f(Y_0 \\mid \\theta)\\) is the density of the observed data \\(Y_0\\).","tags":["Bayesian Iterative Simulation Methods","Bayesian Inference","Likelihood Based Methods Ignorable"],"title":"Bayesian Iterative Simulation Methods","type":"missmethods"},{"authors":null,"categories":null,"content":"Introduction The type of data used in economic evaluations typically come from a range of sources, whose evidence is combined to inform HTA decision-making. Traditionally, relative effectiveness data are derived from randomised controlled clinical trials (RCTs), while healthcare resource utilisation, costs and preference-based quality of life data may come from the same study that estimated the clinical effectiveness or not. A number of HTA agencies have developed their own methodological guidelines to support the generation of the evidence required to inform their decisions. In this context, the primary role of economic evaluation for HTA is not the estimation of the quantities of interest (e.g. the computation of point or interval estimation, or hypothesis testing), but to aid decision making. The implication of this is that the standard frequentist analyses that rely on power calculations and $P$-values to estimate statistical and clinical significance, typically used in RCTs, are not well-suited for addressing these HTA requirements.\nIt has been argued that, to be consistent with its intended role in HTA, economic evaluation should embrace a decision-theoretic paradigm and develop ideally within a Bayesian statistical framework to inform two decisions\n whether the treatments under evaluation are cost-effective given the available evidence and whether the level of uncertainty surrounding the decision is acceptable (i.e. the potential benefits are worth the costs of making the wrong decision).  This corresponds to quantify the impact of the uncertainty in the evidence on the entire decision-making process (e.g. to what extent the uncertainty in the estimation of the effectiveness of a new intervention affects the decision about whether it is paid for by the public provider).\nBayesian methods in HTA There are several reasons that make the use of Bayesian methods in economic evaluations particularly appealing. First, Bayesian modelling is naturally embedded in the wider scheme of decision theory; by taking a probabilistic approach, based on decision rules and available information, it is possible to explicitly account for relevant sources of uncertainty in the decision process and obtain an optimal course of action. Second, Bayesian methods allow extreme flexibility in modelling using computational algorithms such as Markov Chain Monte Carlo (MCMC) methods; this allows to handle in a relatively easy way the generally sophisticated structure of the relationships and complexities that characterise effectiveness, quality of life and cost data. Third, through the use of prior distributions, the Bayesian approach naturally allows the incorporation of evidence from different sources in the analysis (e.g. expert opinion or multiple studies), which may improve the estimation of the quantities of interest; the process is generally referred to as evidence synthesis and finds its most common application in the use of meta-analytic tools. This may be extremely important when, as it often happens, there is only some partial (imperfect) information to identify the model parameters. In this case analysts are required to develop chain-of-evidence models. When required by the limitations in the evidence base, subjective prior distributions can be specified based on the synthesis and elicitation of expert opinion to identify the model, and their impact on the results can be assessed by presenting or combining the results across a range of plausible alternatives. Finally, under a Bayesian approach, it is straightforward to conduct sensitivity analysis to properly account for the impact of uncertainty in all inputs of the decision process; this is a required component in the approval or reimbursement of a new intervention for many decision-making bodies, such as NICE in the UK.\nThe general process of conducting a Bayesian analysis (with a view of using the results of the model to perform an economic evaluation) can be broken down in several steps, which are graphically summarized in the Figure below.\n\rProcess of health economic evaluation.\r\r\rThe starting point is the identification of the decision problem, which defines the objective of the economic evaluation (e.g. the interventions being compared, the target population, the relevant time horizon). In line with the decision problem, a statistical model is constructed to describe the (by necessity, limited) knowledge of the underlying clinical pathways. This implies, for example, the definition of suitable models to describe variability in potentially observed data (e.g. the number of patients recovering from the disease because of a given treatment), as well as the epistemic uncertainty in the population parameters (e.g.~the underlying probability that a random individual in the target population is cured, if given the treatment under study). At this point, all the relevant data are identified, collected and quantitatively sytnthesised to derive the estimates of the input parameters of interest for the model.\nThese parameter estimates (and associated uncertainties) are then fed to the economic model, with the objective of obtaining some relevant summaries indicating the benefits and costs for each intervention under evaluation. Uncertainty analysis represents some sort of detour from the straight path going from the statistical model to the decision analysis: if the output of the statistical model allowed us to know with perfect certainty the true value of the model parameters, then it would be possible to simply run the decision analysis and make the decision. Of course, even if the statistical model were the true representation of the underlying data generating process (which it most certainly is not), because the data may be limited in terms of length of follow up, or sample size, the uncertainty in the value of the model parameters would still remain. This parameter (and structural) uncertainty is propagated throughout the whole process to evaluate its impact on the decision-making. In some cases, although there might be substantial uncertainty in the model inputs, this may not turn out to modify substantially the output of the decision analysis, i.e. the new treatment would be deemed as optimal irrespectively. In other cases, however, even a small amount of uncertainty in the inputs could be associated with very serious consequences. In such circumstances, the decision-maker may conclude that the availbale evidence is not sufficient to decide on which intervention to select and require more information before a decision can be made.\nThe results of the above analysis can be used to inform policy makers about two related decisions:\n whether the new intervention is to be considered (on average) value for money, given the evidence base available at the time of decision, and whether the consequences (in terms of net health loss) of making the wrong decision would warrant further research to reduce this decision uncertaint.  While the type and specification of the statistical and economic models vary with the nature of the underlying data (e.g. individual (ILD) level versus aggregated (ALD) data, the decision and uncertainty analyses have a more standardised set up.\nConclusions HTA has been slow to adopt Bayesian methods; this could be due to a reluctance to use prior opinions, unfamiliarity, mathematical complexity, lack of software, or conservatism of the healthcare establishment and, in particular, the regulatory~authorities. However, the use of Bayesian approach has been increasingly advocated as an efficient tool to integrate statistical evidence synthesis and parameter estimation with probabilistic decision analysis in an unified framework for HTA. This enables a transparent evidence-based decision modelling, reflecting the uncertainty and the structural relationships in all the available~data.\nWith respect to trial-based analyses, the flexibility and modularity of the Bayesian modelling structure are well-suited to jointly account for the typical complexities that affect ILD. In addition, prior distributions can be used as convenient means to incorporate external information into the model when the evidence from the data is limited or absent (e.g. for missing values). In the context of evidence synthesis, the Bayesian approach is particularly appealing in that it allows for all the uncertainty and correlation induced by the often heterogeneous nature of the evidence (either ALD only or both ALD and ILD) to be synthesised in a way that can be easily integrated within a decision modelling framework.\nThe availability and spread of Bayesian software among practitioners since the late 1990s, such as OpenBUGS or JAGS, has greatly improved the applicability and reduced the computational costs of these models. Thus, analysts are provided with a powerful framework, which has been termed comprehensive decision modelling, for simultaneously estimating posterior distributions for parameters based on specified prior knowledge and data evidence, and for translating this into the ultimate measures used in the decision analysis to inform cost-effectiveness conclusions.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"971bed50bf7791bf6b8581ec7b3373d8","permalink":"/project/health-economics/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/health-economics/","section":"project","summary":"With [Andrea Manca](https://www.york.ac.uk/che/staff/research/andrea-manca/) and [Gianluca Baio](https://www.ucl.ac.uk/statistics/people/gianlucabaio)","tags":["Health Economics","Bayesian Modelling"],"title":"Bayesian Methods for Health Technology Assessment","type":"project"},{"authors":null,"categories":null,"content":"Modelling Framework We propose a unified Bayesian framework that jointly accounts for the typical complexities of the data (e.g. correlation, skewness, spikes at the boundaries and missingness), and that can be implemented in a relatively easy way.\nConsider the usual cross-sectional bivariate outcome formed by the QALYs and total cost variables $(e_{it}, c_{it})$ calculated for the $i-$th person in group $t$ of the trial. To simplify the notation, unless necessary, we suppress the treatment indicator $t$. We specify the joint distribution $p(e_i,c_i)$ as\n\\[ p(e_i,c_i) = p(c_i)p(e_i\\mid c_i) = p(e_i)p(c_i\\mid e_i) \\]\nwhere, for example, $p(e_i)$ is the marginal distribution of the QALYs and $p(c_i\\mid e_i)$ is the conditional distribution of the costs given the QALYs. Note that, although the two factorisations are mathematically equivalent, the choice of which to use has different practical implications. From a statistical point of view, the factorisations require the specifications of different statistical models, e.g. $p(e_i)$ or $p(e_i\\mid c_i)$, which may have different approximation errors. From a clinical point of view, the two versions make different assumptions about the casual relationships between the outcomes, i.e. either $e_i$ determines $c_i$ or vice versa. We describe our analysis under the assumption that the costs are determined by the effectiveness measures and therefore we specify the joint distribution $p(e_i,c_i)$ in terms of a marginal distribution for the QALYs and a conditional distribution for the costs.\nFor each individual we consider a marginal distribution $p(e_i \\mid \\boldsymbol \\theta_e)$ indexed by a set of parameters $\\boldsymbol \\theta_e$ comprising a location $\\boldsymbol \\phi_{ie}$ and a set of *ancillary* parameters $\\boldsymbol\\psi_e$ typically including some measure of *marginal* variance $\\sigma^2_e$. We can model the location parameter using a generalised linear structure, e.g.\n\\[ g_e(\\phi_{ie})= \\alpha_0 ,,[+ \\ldots] \\]\nwhere $\\alpha_0$ is the intercept and the notation $[+\\ldots]$ indicates that other terms (e.g. quantifying the effect of relevant covariates) may or may not be included. In the absence of covariates or assuming that a centered version $x_i^{\\star} = (x_i - \\bar{x})$ is used, the parameter $\\mu_e = g_e^{-1}(\\alpha_0)$ represents the population average QALYs. For the costs, we consider a conditional model $p(c_i\\mid e_i,\\boldsymbol\\theta_c)$, which explicitly depends on the QALYs, as well as on a set of quantities $\\boldsymbol\\theta_c$, again comprising a location $\\phi_{ic}$ and ancillary parameters $\\boldsymbol \\psi_{c}$. For example, when normal distributions are assumed for both $p(e_i \\mid \\boldsymbol \\theta_e)$ and $p(c_i \\mid e_i, \\boldsymbol \\theta_c)$, i.e. bivariate normal on both outcomes, the ancillary parameters $\\boldsymbol\\psi_c$ include a *conditional* variance $\\tau^2_c$, which can be expressed as a function of the marginal variance $\\sigma^2_c$. More specifically, the conditional variance of $p(c_i \\mid e_i, \\boldsymbol \\theta_c)$ is a function of the marginal effectiveness and cost variances and has the closed form $\\tau^2_c=\\sigma^2_c - \\sigma^2_e \\beta^2$, where $\\beta=\\rho \\frac{\\sigma_c}{\\sigma_e}$ and $\\rho$ is the parameter capturing the correlation between the variables.\nThe location can be modelled as a function of the QALYs as\n\\[ g_c(\\phi_{ic}) = \\beta_{0} + \\beta_{1}(e_{i}-\\mu_{e}),,[+\\ldots] \\]\nHere, $(e_i-\\mu_e)$ is the centered version of the QALYs, while $\\beta_{1}$ quantifies the correlation between costs and QALYs. Assuming other covariates are either also centered or absent, $\\mu_c = g_c^{-1}(\\beta_{0})$ is the estimated population average cost. The Figure below shows a graphical representation of the general modelling framework.\n\rModelling framework.\r\r\rThe QALYs and cost distributions are represented in terms of combined modules, the blue and the red boxes, in which the random quantities are linked through logical relationships. This ensures the full characterisation of the uncertainty for each variable in the model. Notably, this is general enough to be extended to any suitable distributional assumption, as well as to handle covariates in either or both the modules.\nThe proposed framework allows jointly tackling of the different complexities that affect the data in a relatively easy way by means of its modular structure and flexible choice for the distributions of the QALYs and cost variables. Using the MenSS trial as motivating example, we start from the original analysis and expand the model using alternative specifications that progressively account for an increasing number of complexities in the outcomes. We specifically focus on appropriately modelling spikes at the boundary and missingness, as they have substantial implications in terms of inferences and, crucially, cost-effectiveness results.\nExample Three model specifications are considered and applied to QALY data from a RCT case study: 1) Normal marginal for the QALYs and Normal conditional for the costs (which is identical to a Bivariate Normal distribution for the two outcomes); 2) Beta marginal for the QALYs and Gamma conditional for the costs; and 3) Hurdle Model. The following Figure shows the observed QALYs in both treatment groups (indicated with black crosses) as well as summaries of the posterior distributions for the imputed values, obtained from each model. Imputations are distinguished based on whether the corresponding baseline utility value is observed or missing (blue or red lines and dots, respectively) and are summarised in terms of posterior mean and $90%$ HPD intervals.\n\rImputed QALYs under alternative model specifications.\r\r\rThere are clear differences in the imputed values and corresponding credible intervals between the three models in both treatment groups. Neither the Bivariate Normal nor the Beta-Gamma models produce imputed values that capture the structural one component in the data. In addition, as to be expected, the Bivariate Normal fails to respect the natural support for the observed QALYs, with many of the imputations exceeding the unit threshold bound. These unrealistic imputed values highlight the inadequacy of the Normal distribution for the data and may lead to distorted inferences. Conversely, imputations under the Hurdle Model are more realistic, as they can replicate values in the whole range of the observed data, including the structural ones. Imputed unit QALYs with no discernible interval are only observed in the intervention group due to the original data composition, i.e. individuals associated with a unit baseline utility and missing QALYs are almost exclusively present in the intervention group.\nConclusions We have presented a flexible Bayesian framework that can handle the typical complexities affecting outcome data in CEA, while also being relatively easy to implement using freely available Bayesian software. This is a key advantage that can encourage practitioners to move away from likely biased methods and promote the use of our framework in routine analyses. In conclusion, the proposed framework can:\n Jointly model costs and QALYs; Account for skewness and structural values; Assess the robustness of the results under a set of differing missingness assumptions.  The original contribution of this work consists in the joint implementation of methods that account for the complexities of the data within a unique and flexible framework that is relatively easy to apply. In the next chapter we will take a step forward in the analysis and present a longitudinal model that can use all observed utility and cost data in the analysis, explore alternative nonignorable missing data assumptions, while simultaneously handling the complexities that affect the data.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"159ff484bc950a41748df648cbd474ee","permalink":"/project/bayesian-modelling/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/bayesian-modelling/","section":"project","summary":"With [Alexina Mason](https://www.lshtm.ac.uk/aboutus/people/mason.alexina) and [Gianluca Baio](https://www.ucl.ac.uk/statistics/people/gianlucabaio)","tags":["Bayesian Modelling","Health Economics"],"title":"Bayesian Modelling for Health Economic Evaluations","type":"project"},{"authors":null,"categories":["rubric"],"content":"\rComplete case analysis (CCA), also known as case or listwise deletion (LD), is one of the oldest methods to handle missing data and consists in discarding any unit or case whose information is incomplete. Only the cases with observed values for all the variables under consideration are used in the analysis. For example, suppose we have a data set formed by \\(i=1,\\ldots,n\\) individuals and that we want to fit a linear regression on some outcome variable \\(y_i\\) using some other variables \\(x_{i1},\\ldots,x_{ik}\\) as covariates. CCA uses only the subset of cases with observed values on all the variables included in the analysis (completers).\nCCA has been a quite popular approach to deal with missingness, mainly because it is very easy to implement (used by default in many statistical programs) and it allows the comparison of different univariate statistics in a straightforward way (calculated on a common set of cases). However, there are a number of potential disadvantages which threatens the validity of this method:\nBias, when the missing data mechanism is not missing completely at random (MCAR) and the completers are not a random samples of all the cases\n\rLoss of efficiency, due to the potential loss of information in discarding the incomplete cases.\n\r\rCCA may be justified when the loss of precision and bias are minimal, which is more likley to occur when the proportion of completers is high, although it is difficult to formulate rules that apply in general circumstances. Indeed, both the degree of loss of precision and bias depend not only on the fraction of completers and missingness patterns, but also on the extent to which complete and incomplete cases differ and the parameters of interest.\nLet \\(\\hat{\\theta}_{cc}\\) be an estimate of a parameter of interest from the completers. One might measure the increase in variance of \\(\\hat{\\theta}_{cc}\\) with respect to the estimate \\(\\hat{\\theta}\\) that would be obtained in the absence of missing values. Using the notation of Little and Rubin (2019):\n\\[\r\\text{Var}(\\hat{\\theta}_{cc}) = \\text{Var}(\\hat{\\theta})(1 + \\Delta^{\\star}_{cc}),\r\\]\nwhere \\(\\Delta^{\\star}_{cc}\\) is the proportional increase in variance from the loss of information. A more practical measure of the loss of inofrmation is \\(\\Delta_{cc}\\), where\n\\[\r\\text{Var}(\\hat{\\theta}_{cc}) = \\text{Var}(\\hat{\\theta}_{eff})(1 + \\Delta_{cc}),\r\\]\nand \\(\\hat{\\theta}_{eff}\\) is an efficient estimate based on all the available data.\nExample 1\rConsider bivariate normal monotone data \\(\\bf y = (y_1,y_2)\\), where \\(n_{cc}\\) out of \\(n\\) cases are complete and \\(n - n_{cc}\\) cases have observed values only on \\(y_1\\). Assume for simplicity that the missingness mechanism is MCAR and that the mean of \\(y_j\\) is estimated by the empirical mean from the complete cases \\(\\bar{y}^{cc}_j\\). Then, the loss in sample size for estimating the mean of \\(y_1\\) is:\n\\[\r\\Delta_{cc}(\\bar{y}_1) = \\frac{n - n_{cc}}{n_{cc}},\r\\]\nso that if half the cases are missing, the variance is doubled. For the mean of \\(y_2\\), the loss of information alos depends on the squared correlation \\(\\rho^{2}\\) between the variables: (Little and Rubin (2019))\n\\[\r\\Delta_{cc}(\\bar{y}_2) \\approx \\frac{(n - n_{cc})\\rho^{2}}{n_{cc}(1 - \\rho^{2}) + n_{cc}\\rho^{2}}.\r\\]\n\\(\\Delta_{cc}(\\bar{y}_2)\\) varies from zero (when \\(\\rho=0\\)) to \\(\\Delta_{cc}(\\bar{y}_1)\\) as \\(\\rho^{2} \\rightarrow 1\\). However, for the regression coefficients of \\(y_2\\) on \\(y_1\\) we have that \\(\\Delta_{cc}=0\\) since the incomplete observations of \\(y_1\\) provide no information for estimating the parameters of the regression of \\(y_2\\) on \\(y_1\\).\n\rExample 2\rFor inference about the population mean \\(\\mu\\), the bias of CCA depends on the proportion of the completers \\(\\pi_{cc}\\) and the extent to which complete and incomplete cases differ on the variables of interest. Suppose a variable \\(y\\) is partially-observed and that we partition the data into the subset of the completers \\(y_{cc}\\) and incompleters \\(y_{ic}\\), with associated population means \\(\\mu_{cc}\\) and \\(\\mu_{ic}\\), respectively. The overall mean can be written as a weighted average of the means of the two subsets\n\\[\r\\mu = \\pi_{cc}\\mu_{cc} + (1 - \\pi_{cc})\\mu_{ic}.\r\\]\nThe bias of CCA is then equal to the expected fraction of incomplete cases multiplied by the differences in the means for complete and incomplete cases\n\\[\r\\mu_{cc} - \\mu = (1 - \\pi_{cc})(\\mu_{cc} - \\mu_{ic}).\n\\]\nUnder MCAR, we have that \\(\\mu_{cc} = \\mu_{ic}\\) and therefore the bias is zero.\n\rExample 3\rConsider the estimation of the regression of \\(y\\) on \\(x_1,\\ldots,x_K\\) from data with potential missing values on all variables and with the regression function correctly specified. The bias of CCA for estimating the regression coefficients \\(\\beta_1,\\ldots,\\beta_K\\) associated with the covariates is null if the probbaility of being a completer depends on the \\(x\\)s but not \\(y\\), since the analysis conditions on the values of the covariates (Glynn and Laird (1986), White and Carlin (2010)). This class of missing data mechanisms includes missing not at random (MNAR), where the probability that a covariate is missing depends on the value of that covariate. However, CCA is biased if the probability of being a completer depends on \\(y\\) after conditioning on the covariates. A nice example of this particular topic and its implications for the analysis has been provided by professor Bartlett using some nice slides\n\rConclusions\rThe main virtue of case deletion is simplicity. If a missing data problem can be resolved by discarding only a small part of the sample, then the method can be quite effective. However, even in that situation, one should explore the data (Schafer and Graham (2002)). The discarded information from incomplete cases can be used to study whether the complete cases are plausibly a random subsample of the original sample, that is, whether MCAR is a reasonable assumption. A simple procedure is to compare the distribution of a particular variable \\(y\\) based on complete cases with the distribution of \\(y\\) based on incomplete cases for which \\(y\\) is recorded. Significant differences indicate that the MCAR assumption is invalid, and the complete-case analysis yields potentially biased estimates. Such tests are useful but have limited power when the sample of incomplete cases is small. Also the tests can offer no direct evidence on the validity of the missing at random (MAR) assumption.\n\rReferences\rGlynn, RJ, and NM Laird. 1986. “Regression Estimates and Missing Data: Complete Case Analysis.” Cambridge MA: Harvard School of Public Health, Department of Biostatistics.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rWhite, Ian R, and John B Carlin. 2010. “Bias and Efficiency of Multiple Imputation Compared with Complete-Case Analysis for Missing Covariate Values.” Statistics in Medicine 29 (28): 2920–31.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"b43fa5b40709a7b7bdfe09bc43ee465e","permalink":"/missmethods/complete-case-analysis/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/complete-case-analysis/","section":"missmethods","summary":"Complete case analysis (CCA), also known as case or listwise deletion (LD), is one of the oldest methods to handle missing data and consists in discarding any unit or case whose information is incomplete. Only the cases with observed values for all the variables under consideration are used in the analysis. For example, suppose we have a data set formed by \\(i=1,\\ldots,n\\) individuals and that we want to fit a linear regression on some outcome variable \\(y_i\\) using some other variables \\(x_{i1},\\ldots,x_{ik}\\) as covariates.","tags":["Delete Case Methods","Complete Case Analysis","Listwise Deletion"],"title":"Complete Case Analysis","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rPatterns of incomplete data in practice often do not have the forms that allow explicit Maximum Likelihood(ML) estimates to be calculated. Suppose we have a model for the complete data \\(Y\\), with density \\(f(Y\\mid \\theta)\\), indexed by the set of unknown parameters \\(\\theta\\). Writing \\(Y=(Y_0,Y_1)\\) in terms of the observed \\(Y_0\\) and missing \\(Y_1\\) components, and assuming that the missingness mechanism is Missing At Random(MAR), we want to maximise the likelihood\n\\[\rL\\left(\\theta \\mid Y_0 \\right) = \\int f\\left(Y_0, Y_1 \\mid \\theta \\right)dY_1\r\\]\nwith respect to \\(\\theta\\). When the likelihood is differentiable and unimodal, ML estimates can be found by solving the likelihood equation\n\\[\rD_l\\left(\\theta \\mid Y_0 \\right) \\equiv \\frac{\\partial ln L\\left(\\theta \\mid Y_0 \\right)}{\\partial \\theta} = 0,\r\\]\nwhile, if a closed-form solution cannot be found, iterative methods can be applied. One of these methods is the popular Expectation Maximisation(EM) algorithm (Dempster, Laird, and Rubin (1977)).\nThe EM algorithm is a general iterative method for ML estimation in incomplete data problems. The basic idea behind it is based on a sequence of steps:\n\rReplace missing values by estimated values\n\rEstimate the parameters\n\rRe-estimate the missing values assuming the new parameter estimates are correct\n\rRe-estimate parameters\n\r\rThe procedure is then iterated until apparent convergence. Each iteration of EM consists of an expectation step (E step) and a maximisation step (M step) which ensure that, under general conditions, each iteration increases the loglikelihood \\(l(\\theta \\mid Y_0)\\). In addition, if the loglikelihood is bounded, the sequence \\(\\{l(\\theta_t \\mid Y_0), t=(0,1,\\ldots)\\}\\) converges to a stationary value of \\(l(\\theta \\mid Y_0)\\).\nThe E step and the M step\rThe M step simply consists of performing ML estimation of \\(\\theta\\) as if there were no missing data, that is, after they had been filled in. The E step finds the conditional expectation of the missing values given the observed data and current estimated parameters. In practice, EM does not necessarily substitute the missing values themselves but its key idea is that they are generally not \\(Y_0\\) but the functions of \\(Y_0\\) appearing in the complete data loglikelihood \\(l(\\theta \\mid Y)\\). Specifically, let \\(\\theta_t\\) be the current estimate of \\(\\theta\\), then the E step finds the expected complete data loglikelihood if \\(\\theta\\) were \\(\\theta_t\\):\n\\[\rQ\\left(\\theta \\mid \\theta_t \\right) = \\int l\\left(\\theta \\mid Y \\right)f\\left(Y_0 \\mid Y_1 , \\theta = \\theta_t \\right)dY_0.\r\\]\nThe M step determines \\(\\theta_{t+1}\\) by maximising this expected complete data loglikelihood:\n\\[\rQ\\left(\\theta_{t+1} \\mid \\theta_t \\right) \\geq Q\\left(\\theta \\mid \\theta_t \\right),\r\\]\nfor all \\(\\theta\\).\nUnivariate Normal Data Example\rSuppose \\(y_i\\) form a an iid sample from a Normal distribution with population mean \\(\\mu\\) and variance \\(\\sigma^2\\), for \\(i=1,\\ldots,n_{cc}\\) observed units and \\(i=n_{cc}+1,\\ldots,n\\) missing units. Under the assumption that the missingness mechanism is ignorable, the expectation of each missing \\(y_i\\) given \\(Y_{obs}\\) and \\(\\theta=(\\mu,\\sigma^2)\\) is \\(\\mu\\). Since the loglikelihood based on all \\(y_i\\) is linear in the sufficient statistics \\(\\sum_{i=1}^n y_i\\) and \\(\\sum_{i=1}^n y^2_i\\), the E step of the algorithm calculates\n\\[\rE\\left(\\sum_{i=1}^{n}y_i \\mid \\theta_t, Y_0 \\right) = \\sum_{i=1}^{n_{cc}}y_i + (n-n_{cc})\\mu_t\r\\]\nand\n\\[\rE\\left(\\sum_{i=1}^{n}y^2_i \\mid \\theta_t, Y_0 \\right) = \\sum_{i=1}^{n_{cc}}y^2_i + (n-n_{cc})\\left(\\mu^2_t + \\sigma^2_t \\right)\r\\]\nfor current estimates \\(\\theta_t=(\\mu_t,\\sigma_t)\\) of the parameters. Note that simply substituting \\(\\mu_t\\) for the missing values \\(y_{n_{cc}+1},\\ldots,y_n\\) is not correct since the term \\((n-n_{cc})(\\sigma_t^2)\\) is omitted. Without missing data, the ML estimate of \\(\\mu\\) and \\(\\sigma^2\\) are \\(\\frac{\\sum_{i=1}^ny_i}{n}\\) and \\(\\frac{\\sum_{i=1}^ny^2_i}{n}-\\left(\\frac{\\sum_{i=1}^ny_i}{n}\\right)^2\\), respectively. The M step uses the same expressions based on the current expectations of the sufficient statistics calculated in the E step. Thus, the M step calculates\n\\[\r\\mu_{t+1} = \\frac{E\\left(\\sum_{i=1}^n y_i \\mid \\theta_t, Y_0 \\right)}{n}\r\\]\nand\n\\[\r\\sigma^2_{t+1} = \\frac{E\\left(\\sum_{i=1}^n y^2_i \\mid \\theta_t, Y_0 \\right)}{n} - \\mu^2_{t+1}.\r\\]\nSetting \\(\\mu_t=\\mu_{t+1}=\\hat{\\mu}\\) and \\(\\sigma_t=\\sigma_{t+1}=\\hat{\\sigma}\\) in these equations shows that a fixed point of these iterations is \\(\\hat{\\mu}=\\frac{\\sum_{i=1}^{n_{cc}}y_i}{n_{cc}}\\) and \\(\\hat{\\sigma}^2=\\frac{\\sum_{i=1}^{n_{cc}}y^2_i}{n_{cc}} - \\hat{\\mu}^2\\), which are the ML estimates of the parameters from \\(Y_0\\) assuming MAR and distinctness of the parameters.\n\r\rExtensions of EM\rThere are a variety of applications where the M step does not have a simple computational form. In such cases, one way to avoid an iterative M step is to increase the Q function, rather than maximising it at each iteration, which corresponds to a Generalised Expectation Maximisation(GEM) algorithm. GEM inceases the likelihood at each iteration but appropriate convergence is not guaranteed without further specification of the process of increasing the Q function. One specific case of GEM is the Expectation Conditional Maximisation(ECM) algorithm (Meng and Rubin (1993)), which replaces the M step with a sequence of \\(S\\) conditional maximisation (CM) steps, each of which maximises the Q function over \\(\\theta\\) but with some vector function of \\(\\theta\\), say \\(g_s(\\theta)\\), fixed at its previous values for \\(s=1,\\ldots,S\\). Very briefly, assume that we have a parameter \\(\\theta\\) that can be partitioned into subvectors \\(\\theta=(\\theta_1,\\ldots,\\theta_S)\\), then we can take the \\(s\\)-th of the CM steps to be maximisation with respect to \\(\\theta_s\\) with all other parameters held fixed. Alternatively, it may be useful to take the \\(s\\)-th of the CM steps to be simultaneous maximisation over all of the subvectors expect \\(\\theta_s\\), which is fixed. Because the ECM increases Q, it belongs to the class of GEM algorithms and therefore monotonically increases the likelihood of \\(\\theta\\). When the set of functions \\(g\\) is “space filling” in the sense that it allows unconstrained maximisation over \\(\\theta\\) in its parameter space, ECM converges to a stationary point under the same conditions ensuring convergence of EM.\nThe Expectation Conditional Maximisation Either(ECME) algorithm (Liu and Rubin (1994)) is another version of GEM, which replaces some of the CM steps of ECM, maximising the constrained expected complete data loglikelihood function, with steps that maximise the correspondingly constrained actual likelihood function. The algorithm has stable monotone convergence and basic simplicity implementation relative to competing faster converging methods, and can have faster convergence rate than EM or ECM, measured using either the number of iterations or actual computer time. The The Alternative Expectation Conditional Maximisation(AECM) algorithm (Meng and Van Dyk (1997)) builds on the ECME idea by maximising functions other than Q or L in particular CM steps, corresponding to varying definitions of what constitutes missing data. An iteration of AECM consists of cycles, each consisting of an E step with a particular definition of complete and missing data, followed by CM steps, which can result in enhanced computational efficiency.\n\rReferences\rDempster, Arthur P, Nan M Laird, and Donald B Rubin. 1977. “Maximum Likelihood from Incomplete Data via the Em Algorithm.” Journal of the Royal Statistical Society: Series B (Methodological) 39 (1): 1–22.\n\rLiu, Chuanhai, and Donald B Rubin. 1994. “The Ecme Algorithm: A Simple Extension of Em and Ecm with Faster Monotone Convergence.” Biometrika 81 (4): 633–48.\n\rMeng, Xiao-Li, and Donald B Rubin. 1993. “Maximum Likelihood Estimation via the Ecm Algorithm: A General Framework.” Biometrika 80 (2): 267–78.\n\rMeng, Xiao-Li, and David Van Dyk. 1997. “The Em Algorithm—an Old Folk-Song Sung to a Fast New Tune.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 59 (3): 511–67.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"5d1ab0b24b19df7c82eb56dcf0551da2","permalink":"/missmethods/em-algorithm/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/em-algorithm/","section":"missmethods","summary":"Patterns of incomplete data in practice often do not have the forms that allow explicit Maximum Likelihood(ML) estimates to be calculated. Suppose we have a model for the complete data \\(Y\\), with density \\(f(Y\\mid \\theta)\\), indexed by the set of unknown parameters \\(\\theta\\). Writing \\(Y=(Y_0,Y_1)\\) in terms of the observed \\(Y_0\\) and missing \\(Y_1\\) components, and assuming that the missingness mechanism is Missing At Random(MAR), we want to maximise the likelihood","tags":["Expectation Maximisation Algorithm","Likelihood Based Methods Ignorable"],"title":"Expectation Maximisation Algorithm","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\r\rAll case deletion methods, such as Complete Case Analysis(CCA) or Available Case Analysis(ACA) make no use of units with partially observed data, when estimating the marginal distribution of the variables under study or the covariation between variables. Clearly, this is inefficient and a tempting alternative would be to impute or “fill in” the unobserved data with some plausible values. When a single value is used to replace each missing data, we talk about Single Imputation(SI) methods and, according to the precedure used to generate these imputations, different SI methods can be used. In general, the idea of imputing the missing values is really appealing as it allows to recover the full sample on which standard complete data methods can be applied to derive the estimates of interest.\nHowever, it is important to be aware of the potential problems of imputing missing data without a clear understanding about the process underlying the values we want to impute, which is the key factor to determine whether the selected approach would be plausible in the context considered. Indeed, imputation should be conceptualised as draws from a predictive distribution of the missing values and require methods for creating a predictive distribution for the imputation based on the observed data. According to Little and Rubin (2019), these predictive distributions can be created using\nExplicit modelling, when the distribution is based on formal statistical models which make the underlying assumptions explicit.\n\rImplicit modelling, when the distribution is based on an algorithm which implicitly relies on some underlying model assumptions.\n\r\rIn this part, we focus on some of the most popular Explicit Single Imputation methods. These include: Mean Imputation(SI-M), where means from the observed data are used as imputed values; Regression Imputation(SI-R), where missing values are replaced with values predicited from a regression of the missing variable on some other observed variables; and Stochastic Regression Imputation(SI-SR), where unobserved data are substituted with the predicted values from a regression imputation plus a randomly selected residual drawn to reflect uncertainty in the predicted values.\nMean Imputation\rThe simplest type of SI-M consists in replacing the missing values in a variable with the mean of the observed units from the same variable, a method known as Unconditional Mean Imputation (Little and Rubin (2019),Schafer and Graham (2002)). Let \\(y_{ij}\\) be the value of variable \\(j\\) for unit \\(i\\), such that the unconditional mean based on the observed values of \\(y_j\\) is given by \\(\\bar{y}_j\\). The sample mean of the observed and imputed values is then \\(\\bar{y}^{m}_j=\\bar{y}^{ac}_j\\), i.e. the estimate from ACA, while the sample variance is given by\n\\[\rs^{m}_{j}=s^{ac}_{j}\\frac{(n^{ac}-1)}{(n-1)},\r\\]\nwhere \\(s^{ac}_j\\) is the sample variance estimated from the \\(n^{ac}\\) available units. Under a Missing Completely At Random(MCAR) assumption, \\(s^{ac}_j\\) is a consistent estimator of the tru variance so that the sample variance from the imputed data \\(s^m_j\\) systematically underestimates the true variance by a factor of \\(\\frac{(n^{ac}-1)}{(n-1)}\\), which clearly comes from the fact that missing data are imputed using values at the centre of the distribution. The imputation distorts theempirical distribution of the observed values as well as any quantities that are not linear in the data (e.g. variances, percentiles, measures of shape). The sampel covariance of \\(y_j\\) and \\(y_k\\) from the imputed data is\n\\[\rs^{m}_{jk}=s^{ac}_{jk}\\frac{(n^{as}_{jk}-1)}{(n-1)},\r\\]\nwhere \\(n^{ac}_{jk}\\) is the number of units with both variables observed and \\(s^{ac}_{jk}\\) is the corresponding covariance estimate from ACA. Under MCAR \\(s^{ac}_{jk}\\) is a consistent estimator of the true covariance, so that \\(s^{m}_{jk}\\) underestimates the magnitude of the covariance by a factor of \\(\\frac{(n^{ac}_{jk}-1)}{(n-1)}\\). Obvious adjustments for the variance (\\(\\frac{(n-1)}{(n^{ac}_j-1)}\\)) and the covariance (\\(\\frac{(n-1)}{(n^{ac}_{jk}-1)}\\)) yield ACA estimates, which could lead to covariance matrices that are not positive definite.\n\rRegression Imputation\rAn improvement over SI-M is to impute each missing data using the conditional means given the observed values, a method known SI-R or Conditional Mean Imputation. To be precise, it would also be possible to impute conditional means without using a regression approach, for example by grouping individuals into adjustment classes (analogous to weighting methods) based on the observed data and then impute the missing values using the observed means in each adjustment class (Little and Rubin (2019)). However, for the sake of simplicity, here we will assume that SI-R and conditional mean imputation are the same.\nTo generate imputations under SI-R, consider a set of \\(J-1\\) fully observed response variables \\(y_1,\\ldots,y_{J-1}\\) and a partially observed response variable \\(y_J\\) which has the first \\(n_{cc}\\) units observed and the remaiing \\(n-n_{cc}\\) units missing. SI-R computes the regression of \\(y_J\\) on \\(y_1,\\ldots,y_{J-1}\\) based on the \\(n_{cc}\\) complete units and then fills in the missing values as predictions from the regression. For example, for unit \\(i\\), the missing value \\(y_{iJ}\\) is imputed using\n\\[\r\\hat{y}_{iJ}=\\hat{\\beta}_{J0}+\\sum_{j=1}^{J-1}\\hat{\\beta}_{Jj}y_{ij},\r\\]\nwhere \\(\\hat{\\beta}_{J0}\\) is the intercept and \\(\\hat{\\beta}_{Jj}\\) is the \\(j\\) coefficient of of the regression of \\(y_J\\) on \\(y_1,\\ldots,y_{J-1}\\) based on the \\(n_{cc}\\) units.\nAn extension of regression imputation to a general pattern of missing data is known as Buck’s method (Buck (1960)). This approach first estimates the population mean \\(\\mu\\) and covariance matrix \\(\\Sigma\\) from the sample mean and covariance matrix of the complete units and then uses these estimates to calculate the OLS regressions of the missing variables on the observed variables for each missing data pattern. Predictions of the missing data for each observation are obtained by replacing the values of the present variables in the regressions. The average of the observed and imputed values from this method are consistent estimates of the means and MCAR and mild assumptions about the moments of the distribution (Buck (1960)). They are also consistent when the missingness mechanism depends on observed variables, i.e. under a Missing At Random(MAR) assumption, although addtional assumptions are required in this case (e.g. using linear regressions it assumes that the “true” regression of the missing varables on the observed variables is linear).\nThe filled in data from Buck’s method typically yield reasonable estimates of means, while the sample variances and covariances are biased, although the bias is less than the one associated with unconditional mean imputation. Specifically, the sample variance \\(\\sigma^{2,SI-R}_j\\) from the imputed data underestimates the true variance \\(\\sigma^2_j\\) by a factor of \\(\\frac{1}{n-1}\\sum_{i=1}^n\\sigma^{2}_{ji}\\), where \\(\\sigma^{2}_{ji}\\) is the residual variance from regressing \\(y_j\\) on the variables observed in unit \\(i\\) if \\(y_{ij}\\) is missing and zero if \\(y_{ij}\\) is observed. The sample covariance of \\(y_j\\) and \\(y_k\\) has a bias of \\(\\frac{1}{n-1}\\sum_{i=1}^n\\sigma_{jki}\\), where \\(\\sigma_{jki}\\) is the residual covariance from the multivariate regression of \\((y_{ij},y_{ik})\\) on the variables observed in unit \\(i\\) if both variables are missing and zero otherwise. A consistent estimator of \\(\\Sigma\\) can be constructed under MCAR by replacing consistent estimates of \\(\\sigma^{2}_{ji}\\) and \\(\\sigma_{jki}\\) in the expressions for bias and then adding the resulting quantities to the sample covariance matrix of the filled-in data.\n\rStochastic Regression Imputation\rAny type of mean or regression imputation will lead to bias when the interest is in the tails of the distributions because “best prediction” imputation systematically underestimates variability and standard errors calculated from the imputed data are typically too small. These considerations suggest an alternative imputation strategy, where imputed values are drawn from a predictive distribution of a plausible set of values rather than from the centre of the distribution. This is the idea behind SI-SR, which imputes a conditional draw\n\\[\r\\hat{y}_{iJ}=\\hat{\\beta}_{J0}+\\sum_{j=1}^{J-1}\\hat{\\beta}_{Jj}y_{ij}+z_{iJ},\r\\]\nwhere \\(z_{iJ}\\) is a random normal deviate with mean 0 and variance \\(\\hat{\\sigma}^2_J\\), the residual variance from the regression of \\(y_J\\) on \\(y_1,\\ldots,y_{J-1}\\) based on the complete units. The addition of the random deviate makes the imputation a random draw from the predictive distribution of the missing values, rather than the mean, which is likely to ameliorate the distortion of the predictive distributions (Little and Rubin (2019)).\nExample\rConsider a bivariate normal monotone missing data with \\(y_1\\) fully observed and \\(y_2\\) missing for a fraction \\(\\lambda=\\frac{(n-n_{cc})}{n}\\) and a MCAR mechanism. The following table shows the large sample bias of standard OLS estimates obtained from the filled-in data about the mean, the variance of \\(y_2\\), the regression coefficient of \\(y_2\\) on \\(y_1\\), and the regression coefficient of \\(y_1\\) on \\(y_2\\), using four different single imputation methods: uncondtional mean (UM), unconditional draw (UD), conditional mean (CM), and conditional draw (CD).\n\rTable 1: Bivariate normal monotone MCAR data; large sample bias of four imputation methods.\r\r\r\r\rmu_2\r\rsigma_2\r\rbeta_21\r\rbeta_12\r\r\r\r\r\rUM\r\r0\r\r-lambda * sigma_2\r\r-lambda * beta_21\r\r0\r\r\r\rUD\r\r0\r\r0\r\r-lambda * beta_21\r\r-lambda * beta_21\r\r\r\rCM\r\r0\r\r-lambda * (1-rho^2) * sigma_2\r\r0\r\r((lambda * (1-rho^2)) / (1-lambda * (1-rho^2)) ) * beta_12\r\r\r\rCD\r\r0\r\r0\r\r0\r\r0\r\r\r\r\rUnder MCAR, all four methods yield consistent estimates of \\(\\mu_2\\) but both UM and CM underestimate the variance \\(\\sigma_2\\), UD leads to attenuation of the regression coefficients, while CD yields consistent estimates of all four parameters. However, CD has some important drawbacks. First, adding random draws to the conditional mean imputations is inefficient as the large sample variance of the CD estimates of \\(\\mu_2\\) can be shown (Little and Rubin (2019)) to be\n\\[\r\\frac{[1-\\lambda\\rho^2+(1-\\rho^2)\\lambda(1-\\lambda)]\\sigma_2}{n_{cc}},\r\\]\nwhich is larger than the large sample sampling variance of the CM estimate of \\(\\mu_2\\), namely \\(\\frac{[1-\\lambda\\rho^2]\\sigma_2}{n_{cc}}\\). Second, the standard errors of the CD estimates from the imputed data are too small because they do not incorporate imputation uncertainty.\nWhen the analysis involves units with some covariates missing and other observed, it is common practice to condition on the observed covariates when generating the imputations for the missing covariates. It is also possible to condition on the outcome \\(y\\) to impute missing covariates, even if the final objective is to regress \\(y\\) on the full set of covariates and conditioning on \\(y\\) will lead to bias when conditional means are imputed. However, if predictive draws are imputed, this approach will yield consistent estimates of the regression coefficients. Imputing missing covariates using the means by conditioning only the observed covariates (and not also on \\(y\\)) also yields consistent estimates of the regression coefficients under certain conditions, although these are typically less efficient then those from CCA, but yields inconsistent estimates of other parameters such as variances and correlations (Little (1992)).\n\r\rConclusions\rAccording to Little and Rubin (2019), imputation should generally be\nConditional on observed variables, to reduce bias, improve precision and preserve association between variables.\n\rMultivariate, to preserve association between missing variables.\n\rDraws from the predictive distributions rather than means, to provide valid estimates of a wide range of estimands.\n\r\rNevertheless, a main problem of SI methods is that inferences based on the imputed data do not account for imputation uncertainty and standard errors are therefore systematically underestimated, p-values of tests are too significant and confidence intervals are too narrow.\n\rReferences\rBuck, Samuel F. 1960. “A Method of Estimation of Missing Values in Multivariate Data Suitable for Use with an Electronic Computer.” Journal of the Royal Statistical Society: Series B (Methodological) 22 (2): 302–6.\n\rLittle, Roderick JA. 1992. “Regression with Missing X’s: A Review.” Journal of the American Statistical Association 87 (420): 1227–37.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"dd5ff6f647ec08049ef781494fb9c395","permalink":"/missmethods/mean-imputation/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/mean-imputation/","section":"missmethods","summary":"All case deletion methods, such as Complete Case Analysis(CCA) or Available Case Analysis(ACA) make no use of units with partially observed data, when estimating the marginal distribution of the variables under study or the covariation between variables. Clearly, this is inefficient and a tempting alternative would be to impute or “fill in” the unobserved data with some plausible values. When a single value is used to replace each missing data, we talk about Single Imputation(SI) methods and, according to the precedure used to generate these imputations, different SI methods can be used.","tags":["Explicit Single Imputation","Implicit Single Imputation","Single Imputation","Mean Imputation","Regression Imputation","Stochastic Regression Imputation"],"title":"Explicit Single Imputation","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rAll case deletion methods, such as Complete Case Analysis(CCA) or Available Case Analysis(ACA) make no use of units with partially observed data, when estimating the marginal distribution of the variables under study or the covariation between variables. Clearly, this is inefficient and a tempting alternative would be to impute or “fill in” the unobserved data with some plausible values. When a single value is used to replace each missing data, we talk about Single Imputation(SI) methods and, according to the precedure used to generate these imputations, different SI methods can be used. In general, the idea of imputing the missing values is really appealing as it allows to recover the full sample on which standard complete data methods can be applied to derive the estimates of interest.\nHowever, it is important to be aware of the potential problems of imputing missing data without a clear understanding about the process underlying the values we want to impute, which is the key factor to determine whether the selected approach would be plausible in the context considered. Indeed, imputation should be conceptualised as draws from a predictive distribution of the missing values and require methods for creating a predictive distribution for the imputation based on the observed data. According to Little and Rubin (2019), these predictive distributions can be created using\nExplicit modelling, when the distribution is based on formal statistical models which make the underlying assumptions explicit.\n\rImplicit modelling, when the distribution is based on an algorithm which implicitly relies on some underlying model assumptions.\n\r\rIn this part, we focus on some of the most popular Implicit Single Imputation methods. These include: Hot Deck Imputation(SI-HD), where missing values are imputed using observed values from similar responding units in the sample; Substitution(SI-S), where nonresponding units are replaced with alternative units not yet selected into the sample; Cold Deck Imputation(SI-CD), where missing values are replaced with a constant value from an external source; Composite Methods, which combine procedures from the previous approaches. We will specifically focus on SI-HD methods, which are the most popular among these.\nHot Deck Imputation\rSI-HD procedures refer to the deck of match Hollerith cards for the donors available for a nonrespondent. Suppose that a sample of \\(n\\) out of \\(N\\) units is selected and that \\(n_{cc}\\) out of \\(n\\) are recorded. Given an equal probability sampling scheme, the mean of \\(y\\) can be estimated from the filled-in data as the mean of the responding and the imputed units\n\\[\r\\bar{y}_{HD}=\\frac{(n_{cc}\\bar{y}_{cc}+(n-n_{cc})\\bar{y}^{\\star})}{n},\r\\]\nwhere \\(\\bar{y}_{cc}\\) is the mean of the responding units, and \\(\\bar{y}^\\star=\\sum_{i=1}^{n_{cc}}\\frac{H_iy_i}{n-n_{cc}}\\). \\(H_i\\) is the number of times \\(y_i\\) is used as substitute for a missing value of \\(y\\), with \\(\\sum_{i=1}^{n_{cc}}H_i=n-n_{cc}\\) being the number of missing units. The proprties of \\(bar{y}_{HD}\\) depend on the procedure used to generate the numbers \\(H_i\\) and in general the mean and sampling variance of this estimator can be written as\n\\[\rE[\\bar{y}_{HD}]=E[E[\\bar{y}_{HD}\\mid y_{obs}]] ;;; \\text{and} ;;; Var(\\bar{y}_{HD})=Var(E[\\bar{y}_{HD} \\mid y_{obs}]) + E[Var(\\bar{y}_{HD} \\mid y_{obs})],\r\\]\nwhere the inner expectations and variances are taken over the distribution of \\(H_i\\) given the observed data \\(y_{obs}\\), and the outer expectations and variances are taken over the model distribution of \\(y\\). The term \\(E[Var(\\bar{y}_{HD} \\mid y_{obs})]\\) represents the additional sampling variance from the stochastic imputation procedure. Examples of these procedures include predictive mean matching or PMM(Little and Rubin (2019)) and last value carried forward or LVCF(Little and Rubin (2019)).\nPredictive Mean Matching\rA general approach to hot-deck imputation is to define a metric \\(d(i,j)\\) measuring the distance between units based on observed variables \\(x_{i1},\\ldots,x_{iJ}\\) and then choose the imputed values that come from responding units close to the unit with the missing value, i.e. we choose the imputed value for \\(y_i\\) from a donor pool of units \\(j\\) that are such that \\(y_j,x_1,\\ldots,x_J\\) are observed and \\(d(i,j)\\) is less than some value \\(d_0\\). Varying the value for \\(d_0\\) can control the number of available donors \\(j\\). When the choice of the metric has the form\n\\[\rd(i,j)=(\\hat{y}(x_i)-\\hat{y}(x_j))^2,\r\\]\nwhere \\(\\hat{y}(x_i)\\) is the predicted value of \\(y\\) from the regression of \\(y\\) on \\(x\\) from the complete units, then the procedure is known as PMM. A powerful aspect of this metric is that it weights predictors according to their ability to predict the missing variable, which allows to have some protection against misspecification of the regression of \\(y\\) on \\(x\\), even though better approaches are available when good matches to donor units cannot be found or the sample size is small.\n\rLast Value Carried Forward\rLongitudinal data are often subject to attrition when units leave the study prematurely. Let \\(y_i=(y_{i1},\\ldots,y_{iJ})\\) be a \\((J\\times1)\\) vector of partially-observed outcomes for subject \\(i\\), and denote with \\(y_{i,obs}\\) and \\(y_{i,mis}\\) the observed and missing components of \\(y_i\\), i.e. \\(y=(y_{i,obs},y_{i,mis})\\). Define the indicator variable \\(m_i\\) taking value 0 for complete units and \\(j\\) if subject \\(i\\) drops out between \\(j-1\\) and \\(j\\) time points. LVCF, also called last observation carried forward(Pocock (2013)), imputes all missing values for individual \\(i\\) (for whom \\(m_i=j\\)) using the last recorded value for that unit, that is\n\\[\r\\hat{y}_{it}=y_{i,j-1},\r\\]\nwhere \\(t=j,\\ldots,J\\). Although simple, this approach makes the often unrealistic assumption that the value of the outcome remains unchanged after dropout.\n\r\rConclusions\rAccording to Little and Rubin (2019), imputation should generally be\nConditional on observed variables, to reduce bias, improve precision and preserve association between variables.\n\rMultivariate, to preserve association between missing variables.\n\rDraws from the predictive distributions rather than means, to provide valid estimates of a wide range of estimands.\n\r\rNevertheless, a main problem of SI methods is that inferences based on the imputed data do not account for imputation uncertainty and standard errors are therefore systematically underestimated, p-values of tests are too significant and confidence intervals are too narrow.\n\rReferences\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rPocock, Stuart J. 2013. Clinical Trials: A Practical Approach. John Wiley \u0026amp; Sons.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"c767296d98fa02fb04c7ada48d9ef33d","permalink":"/missmethods/last-value-carried-forward/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/last-value-carried-forward/","section":"missmethods","summary":"All case deletion methods, such as Complete Case Analysis(CCA) or Available Case Analysis(ACA) make no use of units with partially observed data, when estimating the marginal distribution of the variables under study or the covariation between variables. Clearly, this is inefficient and a tempting alternative would be to impute or “fill in” the unobserved data with some plausible values. When a single value is used to replace each missing data, we talk about Single Imputation(SI) methods and, according to the precedure used to generate these imputations, different SI methods can be used.","tags":["Explicit Single Imputation","Implicit Single Imputation","Single Imputation","Hot Deck Methods","Predictive Mean Matching","Last Value Carried Forward"],"title":"Implicit Single Imputation","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rBayesian inference offers a convenient framework to analyse missing data as it draws no distinction between missing values and parameters, both interprted as unobserved quantities who are associated with a joint posterior distribution conditional on the observed data. In this section, I review basic concepts of Bayesian inference based on fully observed data, with notation and structure mostly taken from Gelman et al. (2013).\nBayesian Inference for Complete Data\rBayesian inference is the process of fitting a probability model to a set of data \\(Y\\) and summarising the results by a probability distribution on the parameters \\(\\theta\\) of the model and on unobserved quantities \\(\\tilde{Y}\\) (e.g. predictions). Indeed, Bayesian statistical conclusions about \\(\\theta\\) (or \\(\\tilde{Y}\\)) are made in terms of probability statements, conditional on the observed data \\(Y\\), typically indicated with the notation \\(p(\\theta \\mid y)\\) or \\(p(\\tilde{y} \\mid y)\\). Conditioning on the observed data is what makes Bayesian inference different from standard statistical approaches which are instead based on the retrospective evaluation of the procedures used to estimate \\(\\theta\\) (or \\(\\tilde{y}\\)) over the distribution of possible \\(y\\) values conditional on the “true” unknown value of \\(\\theta\\).\nBayes’ Rule\rIn order to make probability statements about \\(\\theta\\) given \\(y\\), we start with a model providing a joint probability distribution \\(p(\\theta,y)\\). Thus, the joint probability mass or density function can be written as a product of two densities that are often referred to as the prior distribution \\(p(\\theta)\\) and the sampling distribution \\(p(y \\mid \\theta)\\), respectively:\n\\[\rp(\\theta,y) = p(\\theta)p(y \\mid \\theta),\r\\]\nand conditioning on the observed values of \\(y\\), using the basic property of conditional probability known as Bayes’ rule, yields the posterior distribution\n\\[\rp(\\theta \\mid y) = \\frac{p(\\theta,y)}{p(y)} = \\frac{p(\\theta)p(y \\mid \\theta)}{p(y)},\r\\]\nwhere \\(p(y)=\\sum_{\\theta \\in \\Theta}p(\\theta)p(y\\mid \\theta)\\) is the sum (or integral in the case of continous \\(\\theta\\)) over all possible values of \\(\\theta\\) in the sample space \\(\\Theta\\). We can approximate the above equation by omitting the factor \\(p(y)\\) which does not depend on \\(\\theta\\) and, given \\(y\\), can be considered as fixed, yielding the unnormalised posterior density\n\\[\rp(\\theta \\mid y) \\propto p(\\theta) p(y \\mid \\theta),\r\\]\nwith the purpose of the analysis being to develop the model \\(p(\\theta,y)\\) and adequately summarise \\(p(\\theta \\mid y)\\).\n\rUnivariate Normal Example (known variance)\rLet \\(y=(y_1,\\ldots,y_n)\\) denote an independent and identially distributed sample of \\(n\\) units, which are assumed to come from a Normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\), whose sampling density function is\n\\[\rp(y \\mid \\mu)=\\frac{1}{\\sqrt{\\left(2\\pi\\sigma^2\\right)^n}}\\text{exp}\\left(-\\frac{1}{2}\\sum_{i=1}^n \\frac{(y_i-\\mu)^2}{\\sigma^2} \\right),\r\\]\nwhere for the moment we assume the variance \\(\\sigma^2\\) to be known (i.e. constant). Consider now a prior probability distribution for the mean parameter \\(p(\\mu)\\), which belongs to the family of conjugate prior densities, for example a Normal distribution, and parameterised in terms of a prior mean \\(\\mu_0\\) and variance \\(\\sigma^2_0\\). Thus, its prior density function is\n\\[\rp(\\mu) = \\frac{1}{\\sqrt{2\\pi\\sigma^2_0}}\\text{exp}\\left(-\\frac{1}{2}\\frac{(\\mu -\\mu_0)^2}{\\sigma^2} \\right),\r\\]\nunder the assumption tha the hyperparameters \\(\\mu_0\\) and \\(\\sigma^2_0\\) are known. The conjugate prior density implies that the posterior distribution for \\(\\mu\\) (with \\(\\sigma^2\\) assumed constant) belongs to the same family of distributions of the sampling function, that is Normal, but some algebra is required to reveal its specific form. In particular, the posterior density is\n\\[\rp(\\mu \\mid y) = \\frac{p(\\mu)p(y\\mid \\mu)}{p(y)} \\propto \\frac{1}{\\sqrt{2\\pi\\sigma^2_0}}\\frac{1}{\\sqrt{\\left(2\\pi\\sigma^2\\right)^n}}\\text{exp}\\left(-\\frac{1}{2} \\left[\\frac{(\\mu - \\mu_0)^2}{\\sigma^2_0} + \\sum_{i=1}^n\\frac{(y_i-\\mu)^2}{\\sigma^2} \\right] \\right).\r\\]\nExapanding the components, collecting terms and completing the square in \\(\\mu\\) gives\n\\[\rp(\\mu \\mid y) \\propto \\text{exp}\\left(-\\frac{(\\mu - \\mu_1)}{2\\tau^2_1} \\right),\r\\]\nthat is the posterior distribution of \\(\\mu\\) given \\(y\\) is Normal with posterior mean \\(\\mu_1\\) and variance \\(\\tau^2_1\\), where\n\\[\r\\mu_1 = \\frac{\\frac{1}{\\tau^2_0}\\mu_0 + \\frac{n}{\\sigma^2}\\bar{y}}{\\frac{1}{\\tau^2_0} + \\frac{n}{\\sigma^2}} \\;\\;\\; \\text{and} \\;\\;\\; \\frac{1}{\\tau^2_1}=\\frac{1}{\\tau^2_0} + \\frac{n}{\\sigma^2}.\r\\]\nWe can see that the posterior distribution depends on \\(y\\) only through the sample mean \\(\\bar{y}=\\sum_{i=1}^ny_i\\), which is a sufficient statistic in this model. When working with Normal distributions, the inverse of the variance plays a prominent role and is called the precision and, from the above expressions, it can be seen that for normal data and prior, the posterior precision \\(\\frac{1}{\\tau^2_1}\\) equals the sum of the prior precision \\(\\frac{1}{\\tau^2_0}\\) and the sampling precision \\(\\frac{n}{\\sigma^2}\\). Thus, when \\(n\\) is large, the posterior precision is largely dominated by \\(\\sigma^2\\) and the sample mean \\(\\bar{y}\\) compared to the corresponding prior parameters. In the specific case where \\(\\tau^2_0=\\sigma^2\\), the prior has the same weight as one extra observation with the value of \\(\\mu_0\\) and, as \\(n\\rightarrow\\infty\\), we have that \\(p(\\mu\\mid y)\\approx N\\left(\\mu \\mid \\bar{y},\\frac{\\sigma^2}{n}\\right)\\).\n\rUnivariate Normal Example (unknown variance)\rFor \\(p(y \\mid \\mu,\\sigma^2)=N(y \\mid \\mu, \\sigma^2)\\) with \\(\\mu\\) known and \\(\\sigma^2\\) unknown, the sampling distribution for a vector \\(y\\) of \\(n\\) units is\n\\[\rp(y \\mid \\sigma^2)=\\frac{1}{\\sqrt{\\left(2\\pi\\sigma^2\\right)^n}}\\text{exp}\\left(-\\frac{1}{2}\\sum_{i=1}^n \\frac{(y_i-\\mu)^2}{\\sigma^2} \\right),\r\\]\nwith the corresponding conjugate prior for \\(\\sigma^2\\) being the Inverse-Gamma distribution \\(\\Gamma^{-1}(\\alpha,\\beta)\\) with density function\n\\[\rp(\\sigma^2) \\propto (\\sigma^2)^{-(\\alpha+1)}\\text{exp}\\left(-\\frac{\\beta}{\\sigma^2}\\right),\r\\]\nindexed by the hyperparameters \\(\\alpha\\) and \\(\\beta\\). A convenient parameterisation is as a Scaled Inverse-Chi Squared distribution \\(\\text{Inv-}\\chi^2(\\sigma^2_0,\\nu_0)\\) with scale and degrees of freedom parameters \\(\\sigma^2_0\\) and \\(\\nu_0\\), respectively. This means that the prior on \\(\\sigma^2\\) corresponds to the distribution of \\(\\frac{\\sigma^2_0 \\nu_0}{X}\\), where \\(X\\sim \\chi^2_{\\nu_0}\\) random variable. After some calculations, the resulting posterior for \\(\\sigma^2\\) is\n\\[\rp(\\sigma^2 \\mid y) \\propto (\\sigma^2)^\\left(\\frac{n+\\nu_0}{2}+1\\right)\\text{exp}\\left(-\\frac{\\nu_0 \\sigma^2_0 + n \\nu}{2\\sigma^2} \\right)\r\\]\nwhere \\(\\nu=\\frac{1}{n}\\sum_{i=1}^n(y_i-\\mu)^2\\). This corresponds to say that\n\\[\r\\sigma^2 \\mid y \\sim \\text{Inv-}\\chi^2\\left(\\nu_0 +n, \\frac{\\nu_0\\sigma^2_0+n\\nu}{\\nu_0 + n} \\right),\r\\]\nwith scale equal to the degrees of freedom-weighted average of the prior and data scales and degrees of freedom equal to the sum of the prior and data degrees of freedom.\n\rUnivariate Normal Example (unknown mean and variance)\rSuppose now that both the mean and variance parameters are unknown such that\n\\[\rp(y \\mid \\mu, \\sigma^2) \\sim N(\\mu, \\sigma^2),\r\\]\nand that the interest is centred on making inference about \\(\\mu\\), that is we seek the conditional posterior distribution of the parameters of interest given the observed data \\(p(\\mu \\mid y)\\). This can be derived from the joint posterior distribution density \\(p(\\mu, \\sigma^2 \\mid y)\\) by averaging over all possible values of \\(\\sigma^2\\), that is\n\\[\rp(\\mu \\mid y)=\\int p(\\mu, \\sigma^2 \\mid y)d\\sigma^2,\r\\]\nor, alternatively, the joint posterior can be factored as the product of the marginal distribution of one parameter and the conditional distribution of the other given the former and then taking the average over the values of the “nuisance” parameter\n\\[\rp(\\mu \\mid y)=\\int p(\\mu \\mid \\sigma^2, y)p(\\sigma^2 \\mid y)d\\sigma^2.\r\\]\nThe integral forms are rarely computed in practice but this expression helps us to understand that posterior distributions can be expressed in terms of the product of marginal and conditional densities, first drawing \\(\\sigma^2\\) from its marginal and then \\(\\mu\\) from its conditional given the drawn value of \\(\\sigma^2\\), so that the integration is indirectly performed. For example, consider the Normal model with both unknown mean and variance and assume a vague prior density \\(p(\\mu,\\sigma^2)\\propto (\\sigma^2)^{-1}\\) (corresponding to uniform prior on \\((\\mu, \\log\\sigma)\\)), then the joint posterior distribution is proportional to the sampling distribution multiplied by the factor \\((\\sigma^2)^{-1}\\), that is\n\\[\rp(\\mu,\\sigma^2 \\mid y)\\propto \\sigma^{-n-2}\\text{exp}\\left(-\\frac{1}{2\\sigma^2}\\left[(n-1)s^2+n(\\bar{y}-\\mu)^2 \\right] \\right),\r\\]\nwhere \\(s^2=\\frac{1}{n-1}\\sum_{i=1}^n(y_i-\\bar{y})^2\\) is the sample variance. Next, the conditional posterior density \\(p(\\mu \\mid \\sigma^2)\\) can be shown to be equal to\n\\[\rp(\\mu \\mid \\sigma^2,y) \\sim N(\\bar{y},\\frac{\\sigma^2}{n}),\r\\]\nwhile the marginal posterior \\(p(\\sigma^2 \\mid y)\\) can be obtained by averaging the joint \\(p(\\mu,\\sigma^2\\mid y)\\) over \\(\\mu\\), that is\n\\[\rp(\\sigma^2 \\mid y)\\propto \\int \\left(\\sigma^{-n-2}\\text{exp}\\left(-\\frac{1}{2\\sigma^2}\\left[(n-1)s^2+n(\\bar{y}-\\mu)^2 \\right] \\right)\\right)d\\mu,\r\\]\nwhich leads to\n\\[\rp(\\sigma^2 \\mid ,y) \\sim \\text{Inv-}\\chi^2(n-1,s^2).\r\\]\nTypically, \\(\\mu\\) represents the estimand of interest and the obejective of the analysis is therefore to make inference about the marginal distribution \\(p(\\mu \\mid y)\\), which can be obtained by integrating \\(\\sigma^2\\) out of the joint posterior\n\\[\rp(\\mu \\mid y)=\\int_{0}^{\\infty}p(\\mu,\\sigma^2\\mid y)d\\sigma^2 \\propto \\left[1+\\frac{n(\\mu-\\bar{y})}{(n-1)s^2} \\right]\r\\]\nwhich corresponds to a Student-\\(t\\) density with \\(n-1\\) degrees of freedom\n\\[\rp(\\mu \\mid y)\\sim t_{n-1}\\left(\\bar{y},\\frac{s^2}{n}\\right)\r\\]\n\rMultivariate Normal Example\rSimilar considerations to those applied to the univariate case can be extended to the multivariate case when \\(y\\) is formed by \\(J\\) components coming from the Multivariate Normal distribution\n\\[\rp(y\\mid \\mu, \\Sigma) \\sim N(\\mu, \\Sigma),\r\\]\nwhere \\(\\mu\\) is a vector of length \\(J\\) and \\(\\Sigma\\) is a \\(J\\times J\\) covariance matrix, which is symmetric and positive definite. The sampling distribution for a sample of \\(n\\) units is\n\\[\rp(y\\mid \\mu, \\Sigma) \\propto \\mid \\Sigma \\mid^{-n/2}\\text{exp}\\left(-\\frac{1}{2}\\sum_{i=1}^n(y_i-\\mu)^{T}\\Sigma^{-1}(y_i-\\mu) \\right),\r\\]\nAs with the univariate normal model, we can derive the posterior distribution for \\(\\mu\\) and \\(\\Sigma\\) according to the factorisation used of the joint posterior and the prior distributions specified. For example, using the conjugate normal prior for the mean \\(p(\\mu)\\sim N(\\mu_0,\\Sigma_0)\\), given \\(\\Sigma\\) known, the posterior can be shown to be\n\\[\rp(\\mu \\mid y) \\sim N(\\mu_1,\\Sigma_1),\r\\]\nwhere the posterior mean is a weighted average of the data and prior mean with weights given by the data and prior precision matrices \\(\\mu_1=(\\Sigma^{-1}_0+n\\Sigma^{-1})^{-1} (\\Sigma_0^{-1}\\mu_0 + n\\Sigma^{-1}\\bar{y})\\), and the posterior precision is the sum of the data and prior precisions \\(\\Sigma^{-1}_1=\\Sigma^{-1}_0+n\\Sigma^{-1}\\).\nIn the situation in which both \\(\\mu\\) and \\(\\Sigma\\) are unknown, convenient conjugate prior distributions which generalise those used in the univariate case are the Inverse-Wishart for the covariance matrix \\(\\Sigma\\sim \\text{Inv-Wishart}(\\Lambda_0,\\nu_0)\\) and the Multivariate Normal for the mean \\(\\mu\\sim N(\\mu_0, \\Sigma_0)\\), where \\(\\nu_0\\) and \\(\\Lambda_0\\) represent the degrees of freedom and the scale matrix for the Inverse-Wishart distribution, while \\(\\mu_0\\) and \\(\\Sigma_0=\\frac{\\Sigma}{\\kappa_0}\\) are the prior mean and covariance matrix for the Multivariate Normal. Woking out the form of the posterior, it can be shown that the joint posterior distribution has the same form of the sampling distribution with parameters\n\\[\rp(\\mu \\mid \\Sigma, y) \\sim N(\\mu_1,\\Sigma_1) \\;\\;\\; \\text{and} \\;\\;\\; p(\\Sigma \\mid y) \\sim \\text{Inv-Wishart}(\\Lambda_1,\\nu_1),\r\\]\nwhere \\(\\Sigma_1=\\frac{\\Sigma}{\\kappa_1}\\), \\(\\mu_1=\\frac{1}{\\kappa_0+n}\\mu_0+\\frac{n}{\\kappa_0+n}\\bar{y}\\), \\(\\kappa_1=\\kappa_0+n\\), \\(\\nu_1=\\nu_0+n\\), and \\(\\Lambda_1=\\Lambda_0+\\sum_{i=1}^n(y_i-\\bar{y})(y_i-\\bar{y})^T+\\frac{\\kappa_0 n}{\\kappa_0+n}(\\bar{y}-\\mu_0)(\\bar{y}-\\mu_0)^2\\).\n\r\rRegression Models\rSuppose the data consist in \\(n\\) units measured on an outcome variable \\(y\\) and a set of \\(J\\) covariates \\(X=(x_{1},\\ldots,x_{J})\\) and assume that the distribution of \\(y\\) given \\(x\\) is Normal with mean \\(\\mu_i=\\beta_0+\\sum_{j=1}^J\\beta_jx_{ij}\\) and variance \\(\\sigma^2\\)\n\\[\rp(y \\mid \\beta,\\sigma^2,X) \\sim N(X\\beta,\\sigma^2I),\r\\]\nwhere \\(\\beta=(\\beta_0,\\ldots,\\beta_J)\\) is the set of regression coefficients and \\(I\\) is the \\(n\\times n\\) identity matrix. Within the normal regression model, a convenient vague prior distribution is uniform on \\((\\beta,\\log\\sigma)\\)\n\\[\rp(\\beta,\\sigma^2)\\propto\\sigma^{-2}.\r\\]\nAs with normal distributions with unknown mean and variance we can first determine the marginal posterior of \\(\\sigma^2\\) and factor the joint posterior as \\(p(\\beta,\\sigma^2)=p(\\beta \\mid \\sigma^2, y)p(\\sigma^2 \\mid y)\\) (omit X for simplicity). Then, the conditional distribtuion \\(p(\\beta \\mid \\sigma^2,y)\\) is Normal\n\\[\rp(\\beta \\mid \\sigma^2, y) \\sim N(\\hat{\\beta},V_{\\beta}\\sigma^2),\r\\]\nwhere \\(\\hat{\\beta}=(X^{T}X)^{-1}(X^{T}y)\\) and \\(V_{\\beta}=(X^{T}X)^{-1}\\). The marginal posterior \\(p(\\sigma^2 \\mid y)\\) has a scaled Inverse-\\(\\chi^2\\) form\n\\[\rp(\\sigma^2\\mid y) \\sim \\text{Inv-}\\chi^2(n-J,s^2),\r\\]\nwhere \\(s^2=\\frac{1}{n-J}(y-X\\hat{\\beta})^{T}(y-X\\hat{\\beta})\\). Finally, the marginal posterior \\(p(\\beta \\mid y)\\), averaging over \\(\\sigma^2\\), is multivariate \\(t\\) with \\(n-J\\) degrees of freedom, even though in practice since we can characterise the joint posterior by drawing from \\(p(\\sigma^2)\\) and then from \\(p(\\beta \\mid \\sigma^2)\\). When the anaysis is based on improper priors (do not have finite integral), it is important to check tha the posterior is proper. In the case of the regression model, the posterior for \\(\\beta \\mid \\sigma^2\\) is proper only if the number of observations is larger than the number of parameters \\(n\u0026gt;J\\), and that the rank of \\(X\\) equals \\(J\\) (i.e. the columns of \\(X\\) are linearly independent) in order for all \\(J\\) coefficients to be uniquely identified from the data.\n\rGeneralised Linear Models\rThe purpose of Generalised Linear Models(GLM) is to extend the idea of linear modelling to cases for which the linear relationship between \\(X\\) and \\(E[y\\mid X]\\) or the Normal distribution is not appropriate. GLMs are specified in three stages\nChoose the linear predictor \\(\\eta=X\\beta\\)\n\rChoose the link fuction \\(g()\\) that relates the linear predictor to the mean of the outcome variable \\(\\mu=g^{-1}(\\eta)\\)\n\rChoose the random component specifying the distribution of \\(y\\) with mean \\(E[y\\mid X]\\)\n\r\rThus, the mean of the distribution of \\(y\\) given \\(X\\) is determined as \\(E[y\\mid X]=g^{-1}(X\\beta)\\). The Normal linear model can be thought as a special case of GLMs where the link function is the identity \\(g(\\mu)=\\mu\\) and the random component is normally distributed. Perhaps, the most commonly used GLMs are those based on Poisson and Binomial distributions to analyse count and binary data, respectively.\nPoisson\rCounted data are often modelled using Poisson regression models which assume that \\(y\\) is distributed according to a Poisson distribution with mean \\(\\mu\\). The link function is typically chosen to be the logarithm so that \\(\\log \\mu = X\\beta\\) and the distribution of the data has density\n\\[\rp(y\\mid \\beta)=\\prod_{i=1}^n \\frac{1}{y_i}\\text{exp}\\left(-\\text{e}^{(\\eta_i)}(\\text{exp}(\\eta_i))^{y_i}\\right),\r\\]\nwhere \\(\\eta_i=(X\\beta)_i\\) is the linear predictor for the \\(i-\\)th unit.\n\rBinomial\rSuppose there are some binomial data \\(y_i \\sim \\text{Bin}(n_i,\\mu_i)\\), with \\(n_i\\) known. It is common to specify the model in terms of the mean of the proportions \\(\\frac{y_i}{n_i}\\) rather than the mean of \\(y_i\\). Choosing the logit tranformation of the probability of success \\(g(\\mu_i)=\\log\\left(\\frac{\\mu_i}{1-\\mu_i}\\right)\\) as the link function leads to the logistic regression where data have distribution\n\\[\rp(y \\mid \\beta)=\\prod_{i=1}^n {n_i \\choose y_i} {e^{\\eta_i} \\choose 1+e^{\\eta_i}}^{y_i} {1 \\choose 1+e^{\\eta_i}}^{n_i-y_i}.\r\\]\nThe link functions used in the previous models are known as the canonical link functions for each family of distributions, which is the function of the mean parameter that appears in the exponent of the exponential family form of the probability density. However, it is also possible to use link functions which are not canonical.\n\r\rReferences\rGelman, Andrew, John B Carlin, Hal S Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. Bayesian Data Analysis. Chapman; Hall/CRC.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"7b5281e9615c17197896f28a67a25603","permalink":"/missmethods/likelihood-based-methods-ignorable2/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/likelihood-based-methods-ignorable2/","section":"missmethods","summary":"Bayesian inference offers a convenient framework to analyse missing data as it draws no distinction between missing values and parameters, both interprted as unobserved quantities who are associated with a joint posterior distribution conditional on the observed data. In this section, I review basic concepts of Bayesian inference based on fully observed data, with notation and structure mostly taken from Gelman et al. (2013).\nBayesian Inference for Complete Data\rBayesian inference is the process of fitting a probability model to a set of data \\(Y\\) and summarising the results by a probability distribution on the parameters \\(\\theta\\) of the model and on unobserved quantities \\(\\tilde{Y}\\) (e.","tags":["Bayesian Inference","Likelihood Based Methods Ignorable"],"title":"Introduction to Bayesian Inference","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rA possible approach to analyse missing data is to use methods based on the likelihood function under specific modelling assumptions. In this section, I review maximum likelihood methods based on fully observed data alone.\nMaximum Likelihood Methods for Complete Data\rLet \\(Y\\) denote the set of data, which are assumed to be generated according to a certain probability density function \\(f(Y= y,\\mid \\theta)=f(y \\mid \\theta)\\) indexed by the set of parameters \\(\\theta\\), which lies on the parameter space \\(\\Theta\\) (i.e. set of values of \\(\\theta\\) for which \\(f(y\\mid \\theta)\\) is a proper density function). The Likelihood function, indicated with \\(L(\\theta \\mid y)\\), is defined as any function of \\(\\theta \\in \\Theta\\) proportional that is to \\(f(y \\mid \\theta)\\). Note that, in contrast to the density function which is defined as a function of the data \\(Y\\) given the values of the parameters \\(\\theta\\), instead the likelihood is defined as a function of the parameters \\(\\theta\\) for fixed data \\(y\\). In addition, the loglikelihood function, indicated with \\(l(\\theta\\mid y)\\) is defined as the natural logarithm of \\(L(\\theta \\mid y)\\).\nUnivariate Normal Example\rThe joint density function of \\(n\\) independent and identially distributed units \\(y=(y_1,\\ldots,y_n)\\) from a Normal distribution with mean \\(\\mu\\) and variance \\(\\sigma^2\\), is\n\\[\rf(y \\mid \\mu, \\sigma^2)=\\frac{1}{\\sqrt{\\left(2\\pi\\sigma^2\\right)^n}}\\text{exp}\\left(-\\frac{1}{2}\\sum_{i=1}^n \\frac{(y_i-\\mu)^2}{\\sigma^2} \\right),\r\\]\nand therefore the loglikelihood is\n\\[\rl(\\mu, \\sigma^2 \\mid y)= -\\frac{n}{2}\\text{ln}(2\\pi)-\\frac{n}{2}\\text{ln}(\\sigma^2)-\\frac{1}{2}\\sum_{i=1}^n \\frac{(y_i-\\mu)^2}{\\sigma^2},\r\\]\nwhich is considered as a function of \\(\\theta=(\\mu,\\sigma^2)\\) for fixed data \\(y\\).\n\rMultivariate Normal Example\rIf the sample considered has dimension \\(J\u0026gt;1\\), e.g. we have a set of idependent and identically distributed variables \\(y=(y_{ij})\\), for \\(i=1,\\ldots,n\\) units and \\(j=1,\\ldots,J\\) variables, which comes from a Multivariate Normal distribution with mean vector \\(\\mu=(\\mu_1,\\ldots\\mu_J)\\) and covariance matrix \\(\\Sigma=(\\sigma_{jk})\\) for $ j=1,,J, k=1,,K$ and \\(J=K\\), then its density function is\n\\[\rf(y \\mid \\mu, \\Sigma)=\\frac{1}{\\sqrt{\\left(2\\pi \\right)^{nK}\\left(\\mid \\Sigma \\mid \\right)^n}} \\text{exp}\\left(-\\frac{1}{2}\\sum_{i=1}^{n}(y_i-\\mu)\\Sigma^{-1}(y_i-\\mu)^{T} \\right),\r\\]\nwhere \\(|\\Sigma|\\) denotes the determinant of the matrix \\(\\Sigma\\) and the superscript \\(T\\) denotes the transpose of a matrix or vector, while \\(y_i\\) denotes the row vector of observed values for unit \\(i\\). The loglikelihood of \\(\\theta=(\\mu,\\Sigma)\\) is\n\\[\rl(\\mu,\\Sigma \\mid y)= - \\frac{n}{2}\\text{ln}(2\\pi) - \\frac{n}{2}\\text{ln}(|\\Sigma|)-\\frac{1}{2}\\sum_{i=1}^{n}(y_i-\\mu)\\Sigma^{-1}(y_i-\\mu)^T.\r\\]\n\r\rMLE estimation\rFinding the maximum value of \\(\\theta\\) that is most likely to have generated the data \\(y\\), corresponding to maximising the likelihood or Maximum Likelihood Estimation(MLE), is a standard approach to make inference about \\(\\theta\\). Suppose a specific value for the parameter \\(\\hat{\\theta}\\) such that \\(L(\\hat{\\theta}\\mid y)\\geq L(\\theta \\mid y)\\) for any other value of \\(\\theta\\). This implies that the observed data \\(y\\) is at least as likely under \\(\\hat{\\theta}\\) as under any other value of \\(\\theta\\), i.e. \\(\\hat{\\theta}\\) is the value best supported by the data. More specifically, a maximum likelihood estimate of \\(\\theta\\) is a value of \\(\\theta \\in \\Theta\\) that maximises the likelihood \\(L(\\theta \\mid y)\\) or, equivalently, that maximises the loglikelihood \\(l(\\theta \\mid y)\\). In general, when the likelihood is differentiable and bounded from above, typically the MLE can be found by differentiating \\(L(\\theta \\mid y)\\) or \\(l(\\theta \\mid y)\\) with respect to \\(\\theta\\), setting the result equal to zero, and solving for \\(\\theta\\). The resulting equation, \\(D_l(\\theta)=\\frac{\\partial l(\\theta \\mid y)}{\\partial \\theta}=0\\), is known as the likelihood equation and the derivative of the loglikelihood as the score function. When \\(\\theta\\) consists in a set of \\(j=1,\\ldots,J\\) components, then the likelihood equation corresponds to a set of \\(J\\) simultaneous equations, obtained by differentiating \\(l(\\theta \\mid y)\\) with respect to each component of \\(\\theta\\).\nUnivariate Normal Example\rRecall that, for a Normal sample with \\(n\\) units, the loglikelihood is indexed by the set of parameters \\(\\theta=(\\mu,\\sigma^2)\\) and has the form\n\\[\rl(\\mu, \\sigma^2 \\mid y)= -\\frac{n}{2}\\text{ln}(2\\pi)-\\frac{n}{2}\\text{ln}(\\sigma^2)-\\frac{1}{2}\\sum_{i=1}^n \\frac{(y_i-\\mu)^2}{\\sigma^2}.\r\\]\nNext, the MLE can be derived by first differentiating \\(l(\\theta \\mid y)\\) with respect to \\(\\mu\\) and set the result equal to zero, that is\n\\[\r\\frac{\\partial l(\\theta \\mid y)}{\\partial \\mu}= -\\frac{2}{2\\sigma^2}\\sum_{i=1}^n(y_i-\\mu)(-1)=\\frac{\\sum_{i=1}^n y_i - n\\mu}{\\sigma^2}=0,\r\\]\nNext, after simplifying a bit, we can retrieve the solution\n\\[\r\\hat{\\mu}=\\frac{1}{n}\\sum_{i=1}^n y_i=\\bar{y},\r\\]\nwhich corresponds to the sample mean of the observations. Next, we differentiate \\(l(\\theta \\mid y)\\) with respect to \\(\\sigma^2\\), that is we set\n\\[\r\\frac{\\partial l(\\theta \\mid y)}{\\partial \\sigma^2}= -\\frac{n}{2\\sigma^2}+\\frac{1}{2(\\sigma^2)^2}\\sum_{i=1}^n (y_i-\\mu)^2=0.\r\\]\nWe then simplify and move things around to get\n\\[\r\\frac{1}{\\sigma^3}\\sum_{i=1}^n(y_i-\\mu)^2=\\frac{n}{\\sigma} \\;\\;\\; \\rightarrow \\;\\;\\; \\sigma^2=\\frac{1}{n}\\sum_{i=1}^n(y_i-\\mu)^2.\r\\]\nFinally, we replace \\(\\mu\\) in the expression above with the value \\(\\hat{\\mu}=\\bar{y}\\) found before and obtain the solution\n\\[\r\\hat{\\sigma}^2=\\frac{1}{n}\\sum_{i=1}^n(y_i-\\bar{y})^2=s^2,\r\\]\nwhich, however, is a biased estimator of \\(\\sigma^2\\) and therefore is often replaced with the unbiased estimator \\(\\frac{s^2}{(n-1)}\\). In particular, given a population parameter \\(\\theta\\), the estimator \\(\\hat{\\theta}\\) for \\(\\theta\\) is said to be unbiased when \\(E[\\hat{\\theta}]=\\theta\\). This is the case, for example, of the sample mean \\(\\hat{\\mu}=\\bar{y}\\) which is an unbiased estimator of the population mean \\(\\mu\\):\n\\[\rE\\left[\\hat{\\mu} \\right]=E\\left[\\frac{1}{n}\\sum_{i=1}^n y_i \\right]=\\frac{1}{n}\\sum_{i=1}^n E\\left[y_i \\right]=\\frac{1}{n} (n\\mu)=\\mu.\r\\]\nHowever, this is not true for the sample variance \\(s^2\\). This can be seen by first rewriting the expression of the estimator as\n\\[\r\\hat{\\sigma}^2=\\frac{1}{n}\\sum_{i=1}^n (y_i^2 -2y_i\\bar{y}+\\bar{y}^2)=\\frac{1}{n}\\sum_{i=1}^n y_i^2 -2\\bar{y}\\sum_{i=1}^n y_i + \\frac{1}{n}n\\bar{y}^2=\\frac{1}{n}\\sum_{i=1}^n y_i^2 - \\bar{y}^2,\r\\]\nand then by computing the expectation of this quantity:\n\\[\rE\\left[\\hat{\\sigma}^2 \\right]=E\\left[\\frac{1}{n}\\sum_{i=1}^n y_i^2 - \\bar{y}^2 \\right]=\\frac{1}{n}\\sum_{i=1}^n E\\left[y_i^2 \\right] - E\\left[\\bar{y}^2 \\right]=\\frac{1}{n}\\sum_{i=1}^n (\\sigma^2 + \\mu^2) - (\\frac{\\sigma^2}{n}+\\mu^2)=\\frac{1}{n}\\left(n\\sigma^2+n\\mu^2\\right) - \\frac{\\sigma^2}{n}-\\mu^2=\\frac{(n-1)\\sigma^2}{n}.\r\\]\nThe above result is obtained by pluggin in the expression for the variance of a general variable \\(y\\) and retrieving the expression for \\(E[y^2]\\) as a function of the variance and \\(E[y]^2\\). More specifically, given that\n\\[\rVar(y)=\\sigma^2=E\\left[y^2 \\right]-E\\left[y \\right]^2,\r\\]\nthen we know that for \\(y\\), \\(E\\left[y^2 \\right]=\\sigma^2+E[y]^2\\), and similarly we can derive the same expression for \\(\\bar{y}\\). However, we can see that \\(\\hat{\\sigma}^2\\) is biased by a factor of \\((n-1)/n\\). Thus, an unbiased estimator for \\(\\sigma^2\\) is given by multiplying \\(\\hat{\\sigma}^2\\) by \\(\\frac{n}{(n-1)}\\), which gives the unbiased estimator \\(\\hat{\\sigma}^{2\\star}=\\frac{s^2}{n-1}\\), where \\(E\\left[\\hat{\\sigma}^{2\\star}\\right]=\\sigma^2\\).\n\rMultivariate Normal Example\rThe same procedure can be applied to an independent and identically distributed multivariate sample \\(y=(y_{ij})\\), for \\(i=1,\\ldots,n\\) units and \\(j=1,\\ldots,J\\) variables (Anderson (1962),Rao et al. (1973),Gelman et al. (2013)). It can be shown that, maximising the loglikelihood with respect to \\(\\mu\\) and \\(\\Sigma\\) yields the MLEs\n\\[\r\\hat{\\mu}=\\bar{y} \\;\\;\\; \\text{and} \\;\\;\\; \\Sigma=\\frac{(n-1)\\hat{\\sigma}^{2\\star}}{n},\r\\]\nwhere \\(\\bar{y}=(\\bar{y}_1,\\ldots,\\bar{y}_{J})\\) is the row vectors of sample means and \\(\\hat{\\sigma}^{2\\star}=(s^{\\star_{jk}})\\) is the sample covariance matrix with \\(jk\\)-th element \\(s^\\star_{jk}=\\frac{\\Sigma_{i=1}^n(y_{ij} - \\bar{y}_j)}{(n-1)}\\). In addition, in general, given a function \\(g(\\theta)\\) of the parameter \\(\\theta\\), if \\(\\hat{\\theta}\\) is a MLE of \\(\\theta\\), then \\(g(\\hat{\\theta})\\) is a MLE of \\(g(\\theta)\\).\n\r\rConditional Distribution of a Bivariate Normal\rConsider an indpendent and identically distributed sample formed by two variables \\(y=(y_1,y_2)\\), each measured on \\(i=1\\ldots,n\\) units, which come from a Bivariate Normal distribution with mean vector and covariance matrix\n\\[\r\\mu=(\\mu_1,\\mu_2) \\;\\;\\; \\text{and} \\;\\;\\; \\Sigma = \\begin{pmatrix} \\sigma^2_1 \u0026amp; \\rho\\sigma_1\\sigma_2 \\\\ \\rho\\sigma_2\\sigma_1 \u0026amp; \\sigma_2^2 \\ \\end{pmatrix},\r\\]\nwhere \\(\\rho\\) is a correlation parameter between the two variables. Thus, intuitive MLEs for these parameters are\n\\[\r\\hat{\\mu}_j=\\bar{y}_j \\;\\;\\; \\text{and} \\;\\;\\; \\hat{\\sigma}_{jk}=\\frac{(n-1)s_{jk}}{n},\r\\]\nwhere \\(\\sigma^2_j=\\sigma_{jj}\\), \\(\\rho\\sigma_{j}\\sigma_{k}=\\sigma_{jk}\\), for \\(j,k=1,2\\). By properites of the Bivariate Normal distribution (Ord and Stuart (1994)), the marginal distribution of \\(y_1\\) and the conditional distribution of \\(y_2 \\mid y_1\\) are\n\\[\ry_1 \\sim \\text{Normal}\\left(\\mu_1,\\sigma^2_1 \\right) \\;\\;\\; \\text{and} \\;\\;\\; y_2 \\mid y_1 \\sim \\text{Normal}\\left(\\mu_2 + \\beta(y_1-\\mu_1 \\right), \\sigma^2_2 - \\sigma^2_1\\beta^2),\r\\]\nwhere \\(\\beta=\\rho\\frac{\\sigma_2}{\\sigma_1}\\) is the parameter that quantifies the linear dependence between the two variables. The MLEs of \\(\\beta\\) and \\(\\sigma^2_2\\) can also be derived from the likelihood based on the conditional distribution of \\(y_2 \\mid y_1\\), which have strong connections with the least squares estimates derived in a multiple linear regression framework.\n\rMultiple Linear Regression\rSuppose the data consist in \\(n\\) units measured on an outcome variable \\(y\\) and a set of \\(J\\) covariates \\(x=(x_{1},\\ldots,x_{J})\\) and assume that the distribution of \\(y\\) given \\(x\\) is Normal with mean \\(\\mu_i=\\beta_0+\\sum_{j=1}^J\\beta_jx_{ij}\\) and variance \\(\\sigma^2\\). The loglikelihood of \\(\\theta=(\\beta,\\sigma^2)\\) given the observed data \\((y,x)\\) is given by\n\\[\rl(\\theta \\mid y) = -\\frac{n}{2}\\text{ln}(2\\pi) -\\frac{n}{2}\\text{ln}(\\sigma^2) - \\frac{\\sum_{i=1}^n \\left(y_i - \\mu_i \\right)^2}{2\\sigma^2}.\r\\]\nMaximising this expression with respect to \\(\\theta\\), the MLEs are found to be equal to the least squares estimates of the intercept and regression coefficients. Using a matrix notation for the \\(n\\)-th vector of the outcome values \\(Y\\) and the \\(n\\times (J+1)\\) matrix of the covariate values (including the constant term), then the MLEs are:\n\\[\r\\hat{\\beta}=(X^{T}X)^{-1}X^{T}Y \\;\\;\\; \\text{and} \\;\\;\\; \\hat{\\sigma}^{2}=\\frac{(Y-X\\hat{\\beta})(Y-X\\hat{\\beta})}{n},\r\\]\nwhere the numerator of the fraction is known as the Residual Sum of Squares(RSS). Because the denominator of is equal to \\(n\\), the MLE of \\(\\sigma^2\\) does not correct for the loss of degrees of freedom when estimating the \\(J+1\\) location parameters. Thus, the MLE should instead divide the RSS by \\(n-(J+1)\\) to obtain an unbiased estimator. An extension of standard multiple linear regression is the so called weighted multiple linear regression, in which the regression variance is assumed to be equal to\\(\\frac{\\sigma^2}{w_i}\\), for \\((w_i) \u0026gt; 0\\). Thus, the variable \\((y_i-\\mu)\\sqrt{w_i}\\) is Normally distributed with mean \\(0\\) and variance \\(\\sigma^2\\), and the loglikelihood is\n\\[\rl(\\theta \\mid y)= - \\frac{n}{2}\\text{ln}(2\\pi) - \\frac{n}{2}\\text{ln}(\\sigma^2) - \\frac{\\sum_{i=1}^n w_i(y_i - \\mu_i)^2}{2\\sigma^2}.\r\\]\nMaximising this function yields MLEs given by the weighted least squares estimates\n\\[\r\\hat{\\beta}=\\left(X^{T}WX\\right)^{-1}\\left(X^{T}WY \\right) \\;\\;\\; \\text{and} \\;\\;\\; \\sigma^{2}=\\frac{\\left(Y-X\\hat{\\beta}\\right)^{T}W\\left(Y-X\\hat{\\beta}\\right)}{n},\r\\]\nwhere \\(W=\\text{Diag}(w_1,\\ldots,w_n)\\).\n\rGeneralised Linear Models\rConsider the previous example where we had an outcome variable \\(y\\) and a set of \\(J\\) covariates, each measured on \\(n\\) units. A more general class of models, compare with the Normal model, assumes that, given \\(x\\), the values of \\(y\\) are an independent sample from a regular exponential family distribution\n\\[\rf(y \\mid x,\\beta,\\phi)=\\text{exp}\\left(\\frac{\\left(y\\delta\\left(x,\\beta \\right) - b\\left(\\delta\\left(x,\\beta\\right)\\right)\\right)}{\\phi} + c\\left(y,\\phi\\right)\\right),\r\\]\nwhere \\(\\delta()\\) and \\(b()\\) are known functions that determine the distribution of \\(y\\), and \\(c()\\) is a known function indexed by a scale parameter \\(\\phi\\). The mean of \\(y\\) is assumed to linearly relate to the covariates via\n\\[\rE\\left[y \\mid x,\\beta,\\phi \\right]=g^{-1}\\left(\\beta_0 + \\sum_{j=1}^J\\beta_jx_{j} \\right),\r\\]\nwhere \\(E\\left[y \\mid x,\\beta,\\phi \\right]=\\mu_i\\) and \\(g()\\) is a known one to one function which is called link function because it “links” the expectation of \\(y\\) to a linear combination of the covariates. The canonical link function\n\\[\rg_c(\\mu_i)=\\delta(x_{i},\\beta)=\\beta_0+\\sum_{j=1}^J\\beta_jx_{ij},\r\\]\nwhich is obtained by setting \\(g()\\) equal to the inverse of the derivative of \\(b()\\) with respect to its argument. Examples of canonical links include\n\rNormal linear regression: \\(g_c=\\text{identity}\\), \\(b(\\delta)=\\frac{\\delta^2}{2},\\phi=\\sigma^2\\)\n\rPoisson regression: \\(g_c=\\log\\), \\(b(\\delta)=\\text{exp}(\\delta),\\phi=1\\)\n\rLogistic regression: \\(g_c=\\text{logit}\\), \\(b(\\delta)=\\log(1+\\text{exp}(\\delta)),\\phi=1\\)\n\r\rThe loglikelihood of \\(\\theta=(\\beta,\\phi)\\) given the observed data \\((y,x)\\), is\n\\[\rl(\\theta \\mid y,x)=\\sum_{i=1}^n \\left[\\frac{\\left(y_i\\delta\\left(x_i,\\beta\\right)-b\\left(\\delta\\left(x_i,\\beta\\right)\\right) \\right)}{\\phi}+c\\left(y_i,\\phi\\right)\\right],\r\\]\nwhich for non-normal cases does not have explicit maxima and numerical maximisation can be achieved using iterative algorithms.\n\rReferences\rAnderson, Theodore Wilbur. 1962. “An Introduction to Multivariate Statistical Analysis.” Wiley New York.\n\rGelman, Andrew, John B Carlin, Hal S Stern, David B Dunson, Aki Vehtari, and Donald B Rubin. 2013. Bayesian Data Analysis. Chapman; Hall/CRC.\n\rOrd, Keith, and Alan Stuart. 1994. “Kendall’s Advanced Theory of Statistics: Distribution Theory.” Edward Arnold.\n\rRao, Calyampudi Radhakrishna, Calyampudi Radhakrishna Rao, Mathematischer Statistiker, Calyampudi Radhakrishna Rao, and Calyampudi Radhakrishna Rao. 1973. Linear Statistical Inference and Its Applications. Vol. 2. Wiley New York.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"27002a3bca8067a44c90f52f701d24fb","permalink":"/missmethods/likelihood-based-methods-ignorable/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/likelihood-based-methods-ignorable/","section":"missmethods","summary":"A possible approach to analyse missing data is to use methods based on the likelihood function under specific modelling assumptions. In this section, I review maximum likelihood methods based on fully observed data alone.\nMaximum Likelihood Methods for Complete Data\rLet \\(Y\\) denote the set of data, which are assumed to be generated according to a certain probability density function \\(f(Y= y,\\mid \\theta)=f(y \\mid \\theta)\\) indexed by the set of parameters \\(\\theta\\), which lies on the parameter space \\(\\Theta\\) (i.","tags":["Maximum Likelihood Estimation","Likelihood Based Methods Ignorable"],"title":"Introduction to Maximum Likelihood Estimation","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rIn certain cases, it is possible to reduce biases from case deletion by the application of weights. After incomplete cases are removed, the remaining complete cases can be weighted so that their distribution more closely resembles that of the full sample with respect to auxiliary variables. Weighting methods can eliminate bias due to differential response related to the variables used to model the response probabilities, but it cannot correct for biases related to variables that are unused or unmeasured (Little and Rubin (2019)). Robins, Rotnitzky, and Zhao (1994) introduced Inverse Probability Weighting (IPW) as a weighted regression approach that require an explicit model for the missingness but relaxes some of the parametric assumptions in the data model. Their method is an extension of Generalized Estimating Equations (GEE), a popular technique for modeling marginal or populationaveraged relationships between a response variable and predictors (Zeger, Liang, and Albert (1988)).\nLet \\(y_i=(y_{i1},\\ldots,y_{iK})\\) denote a vector of variables for unit \\(i\\) subject to missing values with \\(y_i\\) being fully observed for \\(i=1\\ldots,n_r\\) units and partially-observed for \\(i=n_r+1,\\ldots,n\\) units. Define \\(m_i=1\\) if \\(y_i\\) is incomplete and \\(m_i=0\\) if complete. Let \\(x_i=(x_{i1},\\ldots,x_{ip})\\) denote a vector of fully observed covariates and suppose the interest is in estimating the mean of the distribution of \\(y_i\\) given \\(x_i\\), having the form \\(g(x_i,\\beta)\\), where \\(g()\\) is a possibly non-linear regression function indexed by a parameter \\(\\beta\\) of dimension \\(d\\). Let also \\(z_i=(z_{i1},\\ldots,z_{iq})\\) be a vector of fully observed auxiliary variables that potentially predictive of missingness but are not included in the model for \\(y_i \\mid x_i\\). When there are no missing data, a consistent estimate of \\(\\beta\\) is given by the solution to the following GEE, under mild regularity conditions (Liang and Zeger (1986)),\n\\[\r\\sum_{i=1}^n = D_i(x_i,\\beta)(y_i-g(x_i,\\beta))=0,\r\\]\nwhere \\(D_i(x_i,\\beta)\\) is a suitably chosen \\((d\\times k)\\) matrix of known functions of \\(x_i\\). With missing data, the equation is applied only to the complete cases (\\(n_{r}\\)), which yields consistent estimates provided that\n\\[\rp(m_i=1 \\mid x_i,y_i,z_i,\\phi)=p(m_i=1\\mid x_i,\\phi),\r\\]\nthat is, missingness does not depend on \\(y_i\\) or \\(z_i\\) after conditioning on \\(x_i\\). IPW GEE methods (Robins and Rotnitzky (1995)) replace the equation with\n\\[\r\\sum_{i=1}^{n_r} = w_i(\\hat{\\alpha})D_i(x_i,\\beta)(y_i-g(x_i,\\beta))=0,\r\\]\nwhere \\(w_i(\\hat{\\alpha})=\\frac{1}{p(x_i,z_i \\mid \\hat{\\alpha})}\\), with \\(p(x_i,z_i \\mid \\hat{\\alpha})\\) being an estimate of the probability of being a complete unit, obtained for example via logistic regressions on \\(m_i\\) on \\(x_i\\) and \\(z_i\\). If the logistic regression is correctly specified, IPW GEE yields a consistent estimator of \\(\\beta\\) provided that\n\\[\rp(m_i=1 \\mid x_i,y_i,z_i,\\phi)=p(m_i=1\\mid x_i,z_i\\phi).\r\\]\nExample\rSuppose the full data consists of a single outcome variable \\(y\\) and an additional variable \\(z\\) and that the objective is to estimate the population outcome mean \\(\\mu=\\text{E}[y]\\). If data were fully observed for \\(i=1,\\ldots,n\\) individuals, an obvious estimator of \\(\\mu\\) would be the sample outcome mean\n\\[\r\\bar{y}=\\frac{1}{n}\\sum_{i=1}^ny_i,\r\\]\nwhich is equivalent to the solution to the estimating equation \\(\\sum_{i=1}^n(y_i-\\mu)=0\\). When \\(y\\) is partially observed (while \\(Z\\) is always fully observed), individuals may fall into one of two missingness patterns \\(r=(r_{y},r_{z})\\), namely \\(r=(1,1)\\) if both variables are observed or \\(r=(1,0)\\) if \\(y\\) is missing. Let \\(c=1\\) if \\(r=(1,1)\\) and \\(c=0\\) otherwise, so that the observed data can be summarised as \\((c,cy,z)\\). Assuming that missingness only depends on \\(z\\), that is\n\\[\rp(c=1 \\mid y,z)=p(c=1 \\mid z)=\\pi(z),\r\\]\nthen the missing data mechanism is Missing At Random (MAR). Under these conditions, the sample mean of the complete cases \\(\\bar{y}_{cc}=\\frac{\\sum_{i=1}^nc_iy_i}{c_i}\\), i.e. the solution to the equation \\(\\sum_{i=1}^nc_i(y_i-\\mu)=0\\), is not a consistent estimator of \\(\\mu\\). To correct for this, the IPW complete case estimating equation\n\\[\r\\sum_{i=1}^n\\frac{c_i}{\\pi(z_i)}(y_i-\\mu)=0,\r\\]\ncan be used to weight the contribution of each complete case by the inverse of \\(\\pi(z_i)\\). The solution of the equation corresponds to the IPW estimator\n\\[\r\\mu_{ipw}=\\left(\\sum_{i=1}^n \\frac{c_i}{\\pi(z_i)} \\right)^{-1} \\sum_{i=1}^n \\frac{c_iy_i}{\\pi(z_i)},\r\\]\nwhich is unbiased under MAR and for \\(\\pi(z)\u0026gt;0\\). In case you want to have a look at the proof of this I put here the link. In most situations \\(\\pi(z_i)\\) is not known and must be estimated from the data, typically posing some model for \\(p(c=1 \\mid z, \\hat{\\alpha})\\), indexed by some parameter \\(\\hat{\\alpha}\\), for example a logistic regression\n\\[\r\\text{logit}(\\pi)=\\alpha_0 + \\alpha_1z.\r\\]\nOf course, if the model for \\(\\pi(z)\\) is misspecified, \\(\\mu_{ipw}\\) can be an inconsistent estimator. In addition, IPW methods typically used data only from the completers discarding all the partially observed values, which is clearly inefficient.\n\rConclusions\rThus, IPW estimators can correct for the bias of unweighted estimators due to the dependence of the missingness mechanism on \\(z_i\\) (Schafer and Graham (2002)). The basic intuition of IPW methods is that each subject’s contribution to the weighted Complete Case Analysis (CCA) is replicated \\(w_i\\) times in order to account once for herself and \\((1-w_i)\\) times for those subjects with the same responses and covariates who are missing. These models are called semiparametric because they apart from requiring the regression equation to have a specific form, they do not specify any probability distribution for the response variable (Molenberghs et al. (2014)). Older GEE methods can accommodate missing values only if they are Missing Completely At Random (MCAR), while more recent methods allow them to be MAR or even Missing Not At Random (MNAR), provided that a model for the missingness is correctly specified (Robins, Rotnitzky, and Zhao (1995),Rotnitzky, Robins, and Scharfstein (1998)).\n\rReferences\rLiang, Kung-Yee, and Scott L Zeger. 1986. “Longitudinal Data Analysis Using Generalized Linear Models.” Biometrika 73 (1): 13–22.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rMolenberghs, Geert, Garrett Fitzmaurice, Michael G Kenward, Anastasios Tsiatis, and Geert Verbeke. 2014. Handbook of Missing Data Methodology. Chapman; Hall/CRC.\n\rRobins, James M, and Andrea Rotnitzky. 1995. “Semiparametric Efficiency in Multivariate Regression Models with Missing Data.” Journal of the American Statistical Association 90 (429): 122–29.\n\rRobins, James M, Andrea Rotnitzky, and Lue Ping Zhao. 1994. “Estimation of Regression Coefficients When Some Regressors Are Not Always Observed.” Journal of the American Statistical Association 89 (427): 846–66.\n\r———. 1995. “Analysis of Semiparametric Regression Models for Repeated Outcomes in the Presence of Missing Data.” Journal of the American Statistical Association 90 (429): 106–21.\n\rRotnitzky, Andrea, James M Robins, and Daniel O Scharfstein. 1998. “Semiparametric Regression for Repeated Outcomes with Nonignorable Nonresponse.” Journal of the American Statistical Association 93 (444): 1321–39.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rZeger, Scott L, Kung-Yee Liang, and Paul S Albert. 1988. “Models for Longitudinal Data: A Generalized Estimating Equation Approach.” Biometrics, 1049–60.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"b7412e7bb27e826cf74f8b74c863ac86","permalink":"/missmethods/inverse-probability-weighting/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/inverse-probability-weighting/","section":"missmethods","summary":"In certain cases, it is possible to reduce biases from case deletion by the application of weights. After incomplete cases are removed, the remaining complete cases can be weighted so that their distribution more closely resembles that of the full sample with respect to auxiliary variables. Weighting methods can eliminate bias due to differential response related to the variables used to model the response probabilities, but it cannot correct for biases related to variables that are unused or unmeasured (Little and Rubin (2019)).","tags":["Weighting Methods","Semiparametric Methods","Weighting Adjustments","Inverse Probability Weighting","Augmented Inverse Probability Weighting"],"title":"Inverse Probability Weighting","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rMultiple Imputation(MI) refers to the procedure of replacing each missing value by a set of \\(H\\geq 2\\) imputed values. These are ordered in the sense that \\(H\\) completed data sets can be created from the sets of imputations, where the first imputed value replaces the missing value in the first completed data set, the second imputed value in the second completed data set, and so on. Next, standard complete data methods are used to analyse each completed data set. When the \\(H\\) sets of imputations are repeated random draws from the predictive distribution of the missing data under a particular model of missingness, the \\(H\\) completed data inferences can be combined to form one inference that properly reflects uncertainty due to missing values under that model. In general, MI procedures can be summarised in three main steps:\nSpecify an imputation model to generate \\(H\\) imputed values, typically taken as random draws from the predictive distribution of the missing values given the observed values, and create \\(H\\) completed data sets using these imputations and the observed data.\n\rAnalyse each completed data sets using standard complete data methods based on an analysis model, and derive \\(H\\) completed data inferences\n\rPool together the \\(H\\) completed data inferences into a single inference using standard MI formulas, which ensure that missing data uncertainty is taken into account\n\r\rMi was first proposed by Rubin (Rubin (1978)) and has become more popular over time (Rubin (1996), Schafer and Graham (2002), Little and Rubin (2019)), as well as the focus of research for methodological and practical applications in a variety of fields (Herzog and Rubin (1983), Rubin and Schenker (1987), Schafer (1999), Carpenter and Kenward (2012), Molenberghs et al. (2014), Van Buuren (2018)). MI shares both advantages of Single Imputaiton (SI) methods and solves both disadvantages. Indeed, like SI, MI methods allow the analyst to use familiar complete data methods when analysing the completed data sets. The only disadvantage of MI compared with SI methods is that it takes more time to generate the imputations and analyse the completed data sets. However, Rubin (2004) showed that in order to obtain sufficiently precise estimates, a relatively small number of imputations (typically \\(10\\)) is required. For example, considering a situation with \\(\\lambda=50\\%\\) missing information and \\(H=10\\) imputations, the efficiency of MI can be shown to be equal to \\((1+\\frac{\\lambda}{H})^{-1}=95\\%\\). In addition, in today’s computing environments, the work of analysing the completed data sets is quite modest since it involves performing the same task \\(H\\) times. Thus, once a precedure to combine multiple completed data sets is established, the additonal time and effort to handle \\(50\\), \\(20\\), or \\(10\\) imputations if often of little consequence.\nIn the first step of MI, imputations should ideally be created as repeated draws from the posterior predictive distribution of the missing values \\(y_{mis}\\) given the observed values \\(y_{obs}\\), each repetition being an independent drawing of the parameters and missing values. In practice, implicit imputation models can also be used in place of explicit imputation models (Herzog and Rubin (1983)). In the second step, each completed data set is analysed using the same complete data method that would be used in the absence of missingness. Finally, in the last step, standard procedures should be used to combine the compelted data inferences into a single one. The simplest and most popular method for combining the reuslts of \\(H\\) completed data sets is known as Rubin’s rules (Rubin (2004)), which can be explained with a simple example.\nRubin’s rules\rLet \\(\\hat{\\theta}_h\\) and \\(V_h\\), for \\(h=1,\\ldots,H\\), be the completed data estimates and sampling variances for a scalar estimand \\(\\theta\\), calculated from \\(H\\) repeated imputations under a given imputation model. Then, according to Rubin’s rules, the combined estimate is simply the average of the \\(H\\) completed data estimates, that is\n\\[\r\\bar{\\theta}_{H}=\\frac{1}{H}\\sum_{h=1}^{H}\\hat{\\theta}_{h}.\r\\]\nBecause the imputations under MI are conditional draws, under a good imputaton model, they provide valid estimates for a wide range of estimands. In addition, the averaging over \\(H\\) imputed data sets increases the efficiency of estimation over that obtained from a single completed data set. The variability associated with the pooled estimate has two components: the average within-imputation variance \\(\\bar{V}_H\\) and the between-imputation variance \\(B_H\\), defined as\n\\[\r\\bar{V}_{H}=\\frac{1}{H}\\sum_{h=1}^{H}V_{h} \\;\\;\\; \\text{and} \\;\\;\\; B_{H}=\\frac{1}{H-1}\\sum_{h=1}^{H}(\\hat{\\theta}_{h}-\\bar{\\theta}_{H})^2.\r\\]\nThe total variability associated with \\(\\bar{\\theta}_H\\) is the computed as\n\\[\rT_{H}=\\bar{V}_H + \\frac{H+1}{H}B_{H},\r\\]\nwhere \\((1+\\frac{1}{H})\\) is an adjustment factor for finite due to estimating \\(\\theta\\) by \\(\\bar{\\theta}_H\\). Thus, \\(\\hat{\\lambda}_H=(1+\\frac{1}{H})\\frac{B_H}{T_H}\\) is known as the fraction of missing information and is an estimate of the fraction of information about \\(\\theta\\) that is missing due to nonresponse. For large sample sizes and scalar quantities like \\(\\theta\\), the reference distribution for interval estimates and significance tests is a \\(t\\) distribution\n\\[\r(\\theta - \\bar{\\theta}_H)\\frac{1}{\\sqrt{T^2_H}} \\sim t_v,\r\\]\nwhere the degrees of freedom \\(v\\) can be approximated with the quantity \\(v=(H-1)\\left(1+\\frac{1}{H+1}\\frac{\\bar{V}_H}{B_H} \\right)^2\\) (Rubin and Schenker (1987)). In small data sets, an improved version of \\(v\\) can be obtained as \\(v^\\star=(\\frac{1}{v}+\\frac{1}{\\hat{v}_{obs}})^{-1}\\), where\n\\[\r\\hat{v}_{obs}=(1-\\hat{\\lambda}_{H})\\left(\\frac{v_{com}+1}{v_{com}+3}\\right)v_{com},\r\\]\nwith \\(v_{com}\\) being the degrees of freedom for appropriate or exact \\(t\\) inferences about \\(\\theta\\) when there are no missing values (Barnard and Rubin (1999)).\nThe validity of MI rests on how the imputations are created and how that procedure relates to the model used to subsequently analyze the data. Creating MIs often requires special algorithms (Schafer (1997)). In general, they should be drawn from a distribution for the missing data that reflects uncertainty about the parameters of the data model. Recall that with SI methods, it is desirable to impute from the conditional distribution \\(p(y_{mis}\\mid y_{obs},\\hat{\\theta})\\), where \\(\\hat{\\theta}\\) is an estimate derived from the observed data. MI extends this approach by first simulating \\(H\\) independent plausible values for the parameters \\(\\theta_1,\\ldots,\\theta_H\\) and then drawing the missing values \\(y_{mis}^h\\) from \\(p(y_{mis}\\mid y_{obs}, \\theta_h)\\). Treating parameters as random rather than fixed is\ran essential part of MI. For this reason, it is natural (but not essential) to motivate MI from the Bayesian perspective, in which the state of knowledge about parameters is represented through a posterior distribution.\n\rJoint Multiple Imputation\rJoint MI starts from the assumption that the data can be described by a multivariate distribution which in many cases, mostly for practical reasons, corresponds to assuming a multivariate Normal distribution. The general idea is that, for a general missing data pattern $ r$, missingness may occur anywhere in the multivariate outcome vector $ y=(y_1,,y_J)$, so that the distribution from which imputations should be drawn varies based on the observed variables in each pattern. For example, given $ r=(0,0,1,1)$, then imputations should be drawn from the bivariate distribution of the missing variables given the observed variables in that pattern, that is from \\(f(y^{mis}_1,y^{mis}_2 \\mid y^{obs}_3, y^{obs}_4, \\phi_{12})\\), where \\(\\phi_{12}\\) is the probability of being in pattern $ r$ where the first two variables are missing.\nConsider the multivariate Normal distribution \\(y \\sim N(\\mu,\\Sigma)\\), where \\(\\theta=(\\mu,\\Sigma)\\) represent the vector of the parameters of interest which need to be identified. Indeed, for non-monotone missing data, $ $ cannot be generally identified based on the observed data directly $ y^{obs}$, and the typical solution is to iterate imputation and parameter estimation using a general algorithm known as data augmentation(Tanner and Wong (1987)). Following Van Buuren (2018), the general procedure of the algorithm can be summarised as follows:\nDefine some plausible starting values for all parameters \\(\\theta_0=(\\mu_0,\\Sigma_0)\\)\n\rAt each iteration \\(t=1,\\ldots,T\\), draw \\(h=1,\\ldots,H\\) imputations for each missing value from the predictive distribution of the missing data given the observed data and the current value of the parameters at \\(t-1\\), that is\n\r\r\\[\r\\hat{y}^{mis}_{t} \\sim p(y^{mis} \\mid y^{obs},\\theta_{t-1})\r\\]\nRe-estimate the parameters \\(\\theta\\) using the observed and imputed data at \\(t\\) based on the multivariate Normal model, that is\r\r\\[\r\\hat{\\theta}_{t} \\sim p(\\theta \\mid y^{obs}, \\hat{y}^{mis}_{t})\r\\]\nAnd reiterate the steps 2 and 3 until convergence, where the stopping rule typically consists in imposing that the change in the parameters between iterations \\(t-1\\) and \\(t\\) should be smaller than a predefined “small” threshold \\(\\epsilon\\). Schafer (1997) showed that imputations generated under the multivariate Normal model can be robust to non-normal data, even though it is generally more efficient to transform the data towards normality, especially when the parameters of interest are difficult to estimate, such as quantiles and variances.\nThe multivariate Normal model is also often applied to categorical data, with different types of specifications that have been proposed in the literature (Schafer (1997),Horton, Lipsitz, and Parzen (2003),Allison (2005),Bernaards, Belin, and Schafer (2007),Yucel, He, and Zaslavsky (2008),Demirtas (2009)). For examples, missing data in contingency tables can be imputed using log-linear models (Schafer (1997)); mixed continuous-categorical data can be imputed under the general location model which combines a log-linear and multivariate Normal model (Olkin, Tate, and others (1961)); two-way imputation can be applied to missing test item responses by imputing missing categorical data by conditioning on the row and column sum scores of the multivariate data (Van Ginkel et al. (2007)).\n\rReferences\rAllison, Paul D. 2005. “Imputation of Categorical Variables with Proc Mi.” SUGI 30 Proceedings 113 (30): 1–14.\n\rBarnard, John, and Donald B Rubin. 1999. “Miscellanea. Small-Sample Degrees of Freedom with Multiple Imputation.” Biometrika 86 (4): 948–55.\n\rBernaards, Coen A, Thomas R Belin, and Joseph L Schafer. 2007. “Robustness of a Multivariate Normal Approximation for Imputation of Incomplete Binary Data.” Statistics in Medicine 26 (6): 1368–82.\n\rCarpenter, James, and Michael Kenward. 2012. Multiple Imputation and Its Application. John Wiley \u0026amp; Sons.\n\rDemirtas, Hakan. 2009. “Rounding Strategies for Multiply Imputed Binary Data.” Biometrical Journal: Journal of Mathematical Methods in Biosciences 51 (4): 677–88.\n\rHerzog, Thomas N, and Donald B Rubin. 1983. “Using Multiple Imputations to Handle Nonresponse in Sample Surveys.” Incomplete Data in Sample Surveys 2: 209–45.\n\rHorton, Nicholas J, Stuart R Lipsitz, and Michael Parzen. 2003. “A Potential for Bias When Rounding in Multiple Imputation.” The American Statistician 57 (4): 229–32.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rMolenberghs, Geert, Garrett Fitzmaurice, Michael G Kenward, Anastasios Tsiatis, and Geert Verbeke. 2014. Handbook of Missing Data Methodology. Chapman; Hall/CRC.\n\rOlkin, Ingram, Robert Fleming Tate, and others. 1961. “Multivariate Correlation Models with Mixed Discrete and Continuous Variables.” The Annals of Mathematical Statistics 32 (2): 448–65.\n\rRubin, Donald B. 1978. “Multiple Imputations in Sample Surveys a Phenomenological Bayesian Approach to Nonresponse.” Proceedings of the Survey Research Methods Section of the American Statistical Association 1: 20–34.\n\r———. 1996. “Multiple Imputation After 18 Years.” Journal of the American Statistical Association 91 (434): 473–89.\n\r———. 2004. Multiple Imputation for Nonresponse in Surveys. John Wiley \u0026amp; Sons.\n\rRubin, Donald B, and Nathaniel Schenker. 1987. “Interval Estimation from Multiply Imputed Data: A Case Study Using Census Agriculture Industry Codes.” Journal of Official Statistics 3 (4): 375.\n\rSchafer, Joseph L. 1997. Analysis of Incomplete Multivariate Data. Chapman; Hall/CRC.\n\r———. 1999. “Multiple Imputation: A Primer.” Statistical Methods in Medical Research 8 (1): 3–15.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rTanner, Martin A, and Wing Hung Wong. 1987. “The Calculation of Posterior Distributions by Data Augmentation.” Journal of the American Statistical Association 82 (398): 528–40.\n\rVan Buuren, Stef. 2018. Flexible Imputation of Missing Data. Chapman; Hall/CRC.\n\rVan Ginkel, Joost R, L Andries Van der Ark, Klaas Sijtsma, and Jeroen K Vermunt. 2007. “Two-Way Imputation: A Bayesian Method for Estimating Missing Scores in Tests and Questionnaires, and an Accurate Approximation.” Computational Statistics \u0026amp; Data Analysis 51 (8): 4013–27.\n\rYucel, Recai M, Yulei He, and Alan M Zaslavsky. 2008. “Using Calibration to Improve Rounding in Imputation.” The American Statistician 62 (2): 125–29.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"2fe39d9953178e8abeabce9506d9389f","permalink":"/missmethods/joint-multiple-imputation/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/joint-multiple-imputation/","section":"missmethods","summary":"Multiple Imputation(MI) refers to the procedure of replacing each missing value by a set of \\(H\\geq 2\\) imputed values. These are ordered in the sense that \\(H\\) completed data sets can be created from the sets of imputations, where the first imputed value replaces the missing value in the first completed data set, the second imputed value in the second completed data set, and so on. Next, standard complete data methods are used to analyse each completed data set.","tags":["Joint Multiple Imputation","Multiple Imputation by Chained Equations","Multiple Imputation"],"title":"Joint Multiple Imputation","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rAs for the inference under complete data, inference under incomplete data consists in deriving the likelihood for the parameters based on the available data, either using a Maximum Likelihood (ML) approach (solving the likelihood equation) or using the Bayes’ rule incorporating a prior distribution (performing necessary integrations to obtain the posterior distribution). However, asymptotic standard errors obtained from the information matrix, are more questionable when dealing with missing data since the sample will not be typically iid and results that imply the large sample normality of the likelihood function do not immediately apply. More complications arise when dealing with the process that lead to some of the data to be missing. This can be explained with a simple example.\nLet \\(Y=(y_{ij})\\), for \\(i=1,\\ldots,n\\) and \\(j=1,\\ldots,J\\), denote the complete dataset if there were no missing values, with a total of \\(n\\) units and \\(J\\) variables. Let \\(M=(m_{ij})\\) denote the fully observed matrix of binary missing data indicators with \\(m_{ij}=1\\) if \\(y_{ij}\\) is missing and \\(0\\) otherwise. As an example, we can model the density of the joint distribution of \\(Y\\) and \\(M\\) using the selection model factorisation (Little and Rubin (2019))\n\\[\rp(Y=y,M=m \\mid \\theta, \\psi) = f(y \\mid \\theta)f(m \\mid y, \\psi),\r\\]\nwhere \\(\\theta\\) is the parameter vector indexing the response model and \\(\\psi\\) is the parameter vector indexing the missingness mechanism. The observed values \\(m\\) effect a partition \\(y=(y_1,y_0)\\), where \\(y_0=[y_{ij} : m_{ij}=0]\\) is the observed component and \\(y_1=[y_{ij} : m_{ij}=1]\\) is the missing component of \\(y\\). The full likelihood based on the observed data and the assumed model is\n\\[\rL_{full}(\\theta, \\psi \\mid y_{0},m) = \\int f\\left(y_{0},y_{1} \\mid \\theta \\right) f\\left(m \\mid y_{0},y_{1}, \\psi \\right)dy_{1}\r\\]\nand is a function of the parameters \\((\\theta,\\psi)\\). Next, we define the likelihood of ignoring the missingness mechanism or ignorable likelihood as\n\\[\rL_{ign}\\left(\\theta \\mid y_{0} \\right) = \\int f(y_{0},y_{1}\\mid \\theta)dy_{1},\r\\]\nwhich does not involve the model for \\(M\\). In practice, modelling the joint distribution of \\(Y\\) and \\(M\\) is often challenging and, in fact, many approaches to missing data do not model \\(M\\) and (explicitly or implicitly) base inference about \\(\\theta\\) on the ignorable likelihood. It is therefore important to assess under which conditions inferences about \\(\\theta\\) based on \\(L_{ign}\\) can be considered appropriate. More specifically, the missingness mechanism is said to be ignorable if inferences about \\(\\theta\\) based on the ignorable likelihood equation evauluated at some realisations of \\(y_0\\) and \\(m\\) are the same as inferences about \\(\\theta\\) based on the full likelihood equation, evaluated at the same realisations of \\(y_0\\) and \\(m\\). The conditions for ignoring the missingness mechanism depend on whether the inferences are direct likelihood, Bayesian or frequentist.\nDirect Likelihood Inference\rDirect Likelihood Inference refers to inference based solely on likelihood ratios for pair of values of the parameters, with the data fixed at their observed values. The missingness mechanism can be ignored for direct likelihood if the likelihood ratio based on the ignorable likelihood is the same as the ratio based on the full likelihood. More precisely, the missingness mechanism is said to be ignorable for direct likelihood inference at some realisations of \\((y_0,m)\\) if the likelihood ratio for two values \\(\\theta\\) and \\(\\theta^\\star\\) is the same whether based on the full or ignorable likelihood. That is\n\\[\r\\frac{L_{full}\\left( \\theta, \\psi \\mid y_{0}, m \\right)}{L_{full}\\left( \\theta^{\\star}, \\psi \\mid y_{0}, m \\right)}=\\frac{L_{ign}\\left( \\theta \\mid y_{0} \\right)}{L_{ign}\\left( \\theta^{\\star} \\mid y_{0}\\right)},\r\\]\nfor all \\(\\theta\\), \\(\\theta^\\star\\) and \\(\\psi\\). In general, the missingnes mechanism is ignorable for direct likelihood inference if the following two conditions hold:\nParameter distinctness. The parameters \\(\\theta\\) and \\(\\psi\\) are distinct, in the sense that the joint parameter space \\(\\Omega_{\\theta,\\psi}\\) is the product of the two parameter spaces \\(\\Omega_{\\theta}\\) and \\(\\Omega_{\\psi}\\).\rFactorisation of the full likelihood. The full likelihood factors as\r\r\\[\rL_{full}\\left(\\theta, \\psi \\mid y_{0},m \\right) = L_{ign}\\left(\\theta \\mid y_{0} \\right) L_{rest}\\left(\\psi \\mid y_{0},m \\right)\r\\]\nfor all values of \\(\\theta,\\psi \\in \\Omega_{\\theta,\\psi}\\). The distinctness condition ensures that each value of \\(\\psi \\in \\Omega_{\\psi}\\) is compatible with different values of \\(\\theta \\in \\Omega_{\\theta}\\). A sufficient condition for the factorisation of the full likelihood is that the missing data are Missing At Random(MAR) at the specific realisations of \\(y_{0},m\\). This means that the distribution function of \\(M\\), evaluated at the given realisations \\((y_{0},m)\\), does not depend on the missing values \\(y_1\\), that is\n\\[\rf\\left(m \\mid y_{0}, y_{1}, \\psi \\right)=f\\left(m \\mid y_{0}, y^{\\star}_{1} \\psi \\right),\r\\]\nfor all \\(y_{1},y^\\star_{1},\\psi\\). Thus, we have\n\\[\rf\\left(y_{0}, m \\mid \\theta, \\psi \\right) = f\\left(m \\mid y_{0}, \\psi \\right) \\int f\\left(y_{0},y_{1} \\mid \\theta \\right)dy_{1} = f\\left(m \\mid y_{0}, \\psi \\right) f\\left( y_{0} \\mid \\theta \\right).\r\\]\nFrom this it follows that, if the missing data are MAR at the given realisations of \\((y_{0},m)\\) and \\(\\theta\\) and \\(\\psi\\) are distinct, the missingnes mechanism is ignorable for likelihood inference.\n\rBayesian Inference\rBayesian Inference under the full model for \\(Y\\) and \\(M\\) requires that the full likelihood is combined with a prior distribution \\(p(\\theta,\\psi)\\) for the parameters \\(\\theta\\) and \\(\\psi\\), that is\n\\[\rp\\left(\\theta, \\psi \\mid y_{0}, m \\right) \\propto p(\\theta, \\psi) L_{full}\\left(\\theta, \\psi \\mid y_{0}, m \\right).\r\\]\nBayesian inference ignoring the missingness mechanism combines the ignorable likelihood with a prior distribution for \\(\\theta\\) alone, that is\n\\[\rp(\\theta \\mid y_{0}) \\propto p(\\theta) L_{ign}\\left(\\theta \\mid y_{0} \\right).\r\\]\nMore formally, the missingness mechanism is said to be ignorable for Bayesian inference at the given realisations of \\((y_{0},m)\\) if the posterior distribution for \\(\\theta\\) based on the posterior distribution for the full likelihood and prior distribution for \\((\\theta,\\psi)\\) is the same as the posterior distribution for the ignorable likelihood and the prior distribution for \\(\\theta\\) alone. This holds when the following conditions are satisfied:\nThe parameters \\(\\theta\\) and \\(\\psi\\) are a priori independent, that is the prior distribution has the form\r\r\\[\rp(\\theta , \\psi) = p(\\theta) p(\\psi)\r\\]\nThe full likelihood evaluated at the realisations of \\((y_{0},m)\\) factors as for direct likelihood inference\r\rUnder these conditions:\n\\[\rp(\\theta, \\psi \\mid y_{0}, m) \\propto \\left(p(\\theta)L_{ign}\\left( \\theta \\mid y_{0} \\right) \\right) \\left(p(\\psi)L_{rest}\\left(\\psi \\mid y_{0},m \\right) \\right).\r\\]\nAs for direct likelihood inference, MAR is a sufficient condition for the factorisation of the full likelihood. This means that, if the data are MAR at the given realisations of \\((y_{0},m)\\) and the parameters \\(\\theta\\) and \\(\\psi\\) are a prior independent, then the missingness mechanism is ignorable for Bayesian inference. We note that the a priori condition is more stringent than the distinctness condition because paramerers with distinct parameter spaces might have dependent prior distributions.\n\rFrequentist Asymptotic Inference\rFrequentist Asymptotic Inference requires that, in order to ignore the missingness mechanism, the factorisation of the full likelihood needs to be valid for values of the observed data under repeated sampling. This means that we require\n\\[\rL_{full}\\left(\\theta,\\psi \\mid y_{0}, m \\right) = L_{ign}\\left(\\theta \\mid y_{0} \\right) L_{rest}\\left(\\psi \\mid y_{0}, m \\right)\r\\]\nfor all \\(y_{0},m\\) and \\(\\theta,\\psi \\in \\Omega_{\\theta,\\psi}\\). For this form of inference, a sufficient condition for ignoring the missingness mechanism is given by the following conditions:\nParameter distinctness as defined for direct likelihood inference.\n\rMissing data are Missing Always At Random (MAAR), that is\n\r\r\\[\rf\\left(m \\mid y_{0},y_{1},\\psi \\right) = f\\left(m \\mid y_{0}, y^{\\star}_{1},\\psi \\right)\r\\]\nfor all \\(m,y_{0},y_{1},y^\\star_{1},\\psi\\). In the following example we discuss conditions for ignoring the missingness mechanism for direct likelihood and Bayesian inference, which can be extended to the case of frequentist asymptotic inference by requiring that they hold for for values of \\(y_{0},m\\) other than those observed that could arise in repeated sampling.\n\rBivariate Normal Sample with One Variable Subject to Missingness\rConsider a bivariate normal sample \\(y=(y_{i1},y_{i2})\\), for \\(i=1,\\ldots,n\\) units, but with the values of \\(y_{i2}\\) being missing for \\(i=(n_{cc}+1),\\ldots,n\\). This leads to a monotone missing data pattern with two variables. The loglikelihood of ignoring the missingness mechanism is\n\\[\rl_{ign}\\left(\\mu, \\Sigma \\mid y_{0} \\right) = \\log\\left(L_{ign}\\left(\\mu,\\Sigma \\mid y_{0} \\right) \\right) = - \\frac{1}{2}n_{cc}ln \\mid \\Sigma \\mid - \\frac{1}{2}\\sum_{i=1}^{n_{cc}}(y_i - \\mu ) \\Sigma^{-1}(y_i - \\mu)^{T} - \\frac{1}{2}(n-n_{cc})ln\\sigma_{1} - \\frac{1}{2}\\sum_{i=n_{cc}+1}^{n}\\frac{(y_{i1}-\\mu_1)^2}{\\sigma_{1}}.\r\\]\nThis loglikelihood is appropriate for inference provided the conditional distribution of \\(M\\) does not depend on the values of \\(y_{i2}\\), and \\(\\theta=(\\mu,\\Sigma)\\) is distinct from \\(\\psi\\). Under these conditions, ML estimates of \\(\\theta\\) can be found by maximising this loglikelihood. For Bayesian inference, if these conditions hold and the prior distribution for \\((\\theta,\\psi)\\) has the form \\(p(\\theta)p(\\psi)\\), then the joint posterior distribution of \\(\\theta\\) is proportional to the product of \\(p(\\theta)\\) and \\(L_{ign}(\\theta \\mid y_{0})\\).\n\rReferences\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d3592131ea628b2e84c6e27479d5ba54","permalink":"/missmethods/likelihood-based-methods-ignorable3/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/likelihood-based-methods-ignorable3/","section":"missmethods","summary":"As for the inference under complete data, inference under incomplete data consists in deriving the likelihood for the parameters based on the available data, either using a Maximum Likelihood (ML) approach (solving the likelihood equation) or using the Bayes’ rule incorporating a prior distribution (performing necessary integrations to obtain the posterior distribution). However, asymptotic standard errors obtained from the information matrix, are more questionable when dealing with missing data since the sample will not be typically iid and results that imply the large sample normality of the likelihood function do not immediately apply.","tags":["Maximum Likelihood Estimation","Bayesian Inference","Likelihood Based Methods Ignorable"],"title":"Likelihood Based Inference with Incomplete Data","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rIn many cases, analysis methods for missing data are based on the ignorable likelihood\n\\[\rL_{ign}\\left(\\theta \\mid Y_0, X \\right) \\propto f\\left(Y_0 \\mid X, \\theta \\right),\r\\]\nregarded as a function of the parameters \\(\\theta\\) for fixed observed data \\(Y_0\\) and some fully observed covariates \\(X\\). The density \\(f(Y_0 \\mid X, \\theta)\\) is obtained by integrating out the missing data \\(Y_1\\) from the joint density \\(f(Y \\mid X, \\theta)=f(Y_0,Y_1\\mid X, \\theta)\\). Sufficient conditions for basing inference about \\(\\theta\\) on the ignorbale likelihood are that the missingness mechanism is Missing At Random(MAR) and the parameters of the model of analysis \\(\\theta\\) and those of the missingness mechanism \\(\\psi\\) are distinct. Here we focus our attention on the situations where the missingness mechanism is Missing Not At Random(MNAR) and valid Maximum Likelihood(ML), Bayesian and Multiple Imputation(MI) inferences generally need to be based on the full likelihood\n\\[\rL_{full}\\left(\\theta, \\psi \\mid Y_0, X, M \\right) \\propto f\\left(Y_0, M \\mid X, \\theta, \\psi \\right),\r\\]\nregarded as a function of \\((\\theta,\\psi)\\) for fixed \\((Y_0,M)\\). Here, \\(f(Y_0,M\\mid \\theta, \\psi)\\) is obtained by integrating out \\(Y_1\\) from the joint density \\(f(Y,M \\mid X, \\theta, \\psi)\\). Two main approaches for formulating MNAR models can be distinguished, namely selection models(SM) and pattern mixture models(PMM).\nSelection and Pattern Mixture Models\rSMs factor the joint distribution of \\(m_i\\) and \\(y_i\\) as\n\\[\rf(m_i,y_i \\mid x_i, \\theta, \\psi) = f(y_i \\mid x_i, \\theta)f(m_i \\mid x_i,y_i,\\psi),\r\\]\nwhere the first factor is the distribution of \\(y_i\\) in the population while the second factor is the missingness mechanism, with \\(\\theta\\) and \\(\\psi\\) which are assumed to be distinct. Alternatively, PMMs factor the joint distribution as\n\\[\rf(m_i,y_i \\mid x_i, \\theta, \\psi) = f(y_i \\mid x_i, m_i,\\xi)f(m_i \\mid x_i),\r\\]\nwhere the first factor is the distribution of \\(y_i\\) in the strata defined by different patterns of missingness \\(m_i\\) while the second factor models the probabilities of the different patterns, with \\(\\xi\\) which are assumed to be distinct (Little (1993),Little and Rubin (2019)). The distinction between the two factorisations becomes clearer when considering a specific example.\nSuppose thta missing values are confined to a single variable and let \\(y_i=(y_{i,1},y_{i2})\\) be a bivariate response outcome where \\(y_{i1}\\) is fully observed and \\(y_{i2}\\) is observed for \\(i=1,\\ldots,n_{cc}\\) but missing for \\(i=n_{cc}+1,\\ldots,n\\). Let \\(m_{i2}\\) be the missingness indicator for \\(y_{i2}\\), then a PMM factors the denisty of \\(Y_0\\) and \\(M\\) given \\(X\\) as\n\\[\rf(y_0, M \\mid X, \\xi)=\\prod_{i=1}^{n_{cc}}f(y_{i1},y_{i2}\\mid x_i, m_{i2}=0,\\xi)Pr(m_{i2}=0 \\mid x_i, \\omega) \\times \\prod_{i=n_{cc}+1}^{n}f(y_{i1} \\mid x_i, m_{i2}=1,\\xi)Pr(m_{i2}=1 \\mid x_i, \\omega).\r\\]\nThis expression shows that there are no data with which to estimate directly the distribution \\(f(y_{i2} \\mid x_i, m_{i2}=1,\\xi)\\), because all units with \\(m_{i2}=1\\) have \\(y_{i2}\\) missing. Under MAR, this is identified using the distribution of the observed data \\(f(y_{i2} \\mid x_i, m_{i2}=1,\\xi)=f(y_{i2} \\mid x_i, m_{i2}=0,\\xi)\\), while under MNAR it must be identified using other assumptions. The SM formulation is\n\\[\rf(y_i, m_{i2} \\mid \\theta, \\psi) = f(y_{i1} \\mid x_i, \\theta)f(y_{i2} \\mid x_i, y_{i1},\\theta)f(m_{i2}\\mid x_i,y_{i1},y_{i2},\\psi).\r\\]\nTypically, the missingness mechanism \\(f(m_{i2} \\mid x_i,y_{i1},y_{i2},\\psi)\\) is modelled using some additive probit or logit regression of \\(m_{i2}\\) on \\(x_i\\),\\(y_{i1}\\) and \\(y_{i2}\\). However, the coefficient of \\(y_{i2}\\) in this regression is not directly estimable from the data and hence the model cannot be fully estimated without extra assumptions.\nNormal Models for MNAR data\rAssume we have a complete sample \\((y_i,x_i)\\) on a continuous variable \\(Y\\) and a set of fully observed covariates \\(X\\), for \\(i=1,\\ldots,n\\). Suppose that \\(i=1,\\ldots,n_{cc}\\) units are observed while the remaining \\(i=n_{cc}+1,\\ldots,n\\) units are missing, with \\(m_i\\) being the corresponding missingness indicator. Heckman (Heckman (1976)) proposed the following selection model to handle missingness:\n\\[\ry_i \\mid x_i, \\theta, \\psi \\sim N(\\beta_0 + \\beta_1x_i, \\sigma^2) \\;\\;\\; \\text{and} \\;\\;\\; m_i \\mid x_i,y_i,\\theta,\\psi \\sim Bern\\left(\\Phi(\\psi_0 + \\psi_1x_i + \\psi_2y_i) \\right),\r\\]\nwhere \\(\\theta=(\\beta_0,\\beta_1,\\sigma^2)\\) and \\(\\Phi\\) denotes the probit (cumulative normal) distribution function. Note that if \\(\\psi_2=0\\), the missing data are MAR, while if \\(\\psi_2 \\neq 0\\) the missing data are MNAR since missingness in \\(Y\\) depends on the unobserved value of \\(Y\\). This model can be estimated using either a two-step least squares method, ML in combination with an EM algorithm, or a Bayesian approach. The main issue is the lack of information about \\(\\psi_2\\), which can be partly identified through the specific assumptions about the distribution of the observed data of \\(Y\\). This, however, makes the implicit assumption that the assumed distribution can well described the distribution of the complete (observed and missing) data which can never be tested or checked. An alternative approach is to use a PMM factorisation and model:\n\\[\ry_i \\mid m_i=m,x_i,\\xi,\\omega \\sim N(\\beta_0^m + \\beta_1^mx_i, \\sigma^{2m})\\;\\;\\; \\text{and} \\;\\;\\; m_i \\mid x_i,\\xi,\\omega \\sim Bern\\left(\\Phi(\\omega_0 + \\omega_1x_i) \\right),\r\\]\nwhere \\(\\xi=(\\beta_0^m,\\beta_1^m,\\sigma^{2m},\\;\\;\\; m=0,1)\\). This model implies that the distribution of \\(y_i\\) given \\(x_i\\) in the population is a mixture of two normal distributions with mean\n\\[\r\\left[1 - \\Phi(\\omega_0 + \\omega_1x_i) \\right] \\left[\\beta_0^0 + \\beta_1^0 x_i \\right] + \\left[\\Phi(\\omega_0 + \\omega_1x_i) \\right] \\left[\\beta_0^1 + \\beta_1^1 x_i \\right].\r\\]\nThe parameters \\((\\beta_0^0,\\beta_1^0,\\sigma^{20},\\omega)\\) can be estimated from the data but the parameters \\((\\beta_0^1,\\beta_1^1,\\sigma^{21})\\) are not estimable because \\(y_i\\) is missing when \\(m_i=1\\). Under MAR, the distribution of \\(Y\\) given \\(X\\) is the same for units with \\(Y\\) observed and missing, such that \\(\\beta_0^0=\\beta_0^1=\\beta_0\\) (as well as for \\(\\beta_1\\) and \\(\\sigma^2\\)). Under MNAR, other assumptions are needed to esitmate the parameters indexed by \\(m=1\\).\nSome final considerations:\n\rBoth SM and PMM model the joint distribution of \\(Y\\) and \\(M\\).\n\rThe SM formulation is more natural when the substantive interest concerns the relationship between \\(Y\\) and \\(X\\) in the population. However, these parameters can also be derived in PMM by averaging the patterns specific parameters over the missingness patterns.\n\rThe PMM factorisation is more transparent in terms of the underlying assumptions about the unidentified parameters of the model, while SM tends to impose some obscure constraints in order to identify these parameters, which are also difficult to interpret.\n\rGiven specific assumptions to identify all the parameters in the model, PMMs are often easier to fit than SMs. In addition, imputations of the missing values are based on the predictive distribution of \\(Y\\) given \\(X\\) and \\(M=0\\).\n\r\rThese considerations seem to favour PMM over SM as MNAR approaches, especially when considering sensitivity analysis. Bayesian approaches can also be used to identify these models, by assigning prior distributions which can be used to identify those parameters which cannot be estimated from the data. Justifications for the choice of these priors are therefore necessary to ensure the plausibility of the assumptions assessed and the impact of these assumptions on the posterior inference.\n\r\rReferences\rHeckman, James J. 1976. “The Common Structure of Statistical Models of Truncation, Sample Selection and Limited Dependent Variables and a Simple Estimator for Such Models.” In Annals of Economic and Social Measurement, Volume 5, Number 4, 475–92. NBER.\n\rLittle, Roderick JA. 1993. “Pattern-Mixture Models for Multivariate Incomplete Data.” Journal of the American Statistical Association 88 (421): 125–34.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"aa1d3630c280c833da24f17594133eb3","permalink":"/missmethods/likelihood-based-methods-nonignorable/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/likelihood-based-methods-nonignorable/","section":"missmethods","summary":"In many cases, analysis methods for missing data are based on the ignorable likelihood\n\\[\rL_{ign}\\left(\\theta \\mid Y_0, X \\right) \\propto f\\left(Y_0 \\mid X, \\theta \\right),\r\\]\nregarded as a function of the parameters \\(\\theta\\) for fixed observed data \\(Y_0\\) and some fully observed covariates \\(X\\). The density \\(f(Y_0 \\mid X, \\theta)\\) is obtained by integrating out the missing data \\(Y_1\\) from the joint density \\(f(Y \\mid X, \\theta)=f(Y_0,Y_1\\mid X, \\theta)\\).","tags":["Maximum Likelihood Estimation","Bayesian Inference","Likelihood Based Methods Nonignorable"],"title":"Likelihood Based Inference with Incomplete Data (Nonignorable)","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rMultiple Imputation(MI) refers to the procedure of replacing each missing value by a set of \\(H\\geq 2\\) imputed values. These are ordered in the sense that \\(H\\) completed data sets can be created from the sets of imputations, where the first imputed value replaces the missing value in the first completed data set, the second imputed value in the second completed data set, and so on. Next, standard complete data methods are used to analyse each completed data set. When the \\(H\\) sets of imputations are repeated random draws from the predictive distribution of the missing data under a particular model of missingness, the \\(H\\) completed data inferences can be combined to form one inference that properly reflects uncertainty due to missing values under that model. In general, MI procedures can be summarised in three main steps:\nSpecify an imputation model to generate \\(H\\) imputed values, typically taken as random draws from the predictive distribution of the missing values given the observed values, and create \\(H\\) completed data sets using these imputations and the observed data.\n\rAnalyse each completed data sets using standard complete data methods based on an analysis model, and derive \\(H\\) completed data inferences\n\rPool together the \\(H\\) completed data inferences into a single inference using standard MI formulas, which ensure that missing data uncertainty is taken into account\n\r\rMi was first proposed by Rubin (Rubin (1978)) and has become more popular over time (Rubin (1996), Schafer and Graham (2002), Little and Rubin (2019)), as well as the focus of research for methodological and practical applications in a variety of fields (Herzog and Rubin (1983), Rubin and Schenker (1987), Schafer (1999), Carpenter and Kenward (2012), Molenberghs et al. (2014), Van Buuren (2018)). MI shares both advantages of Single Imputaiton (SI) methods and solves both disadvantages. Indeed, like SI, MI methods allow the analyst to use familiar complete data methods when analysing the completed data sets. The only disadvantage of MI compared with SI methods is that it takes more time to generate the imputations and analyse the completed data sets. However, Rubin (2004) showed that in order to obtain sufficiently precise estimates, a relatively small number of imputations (typically \\(10\\)) is required. For example, considering a situation with \\(\\lambda=50\\%\\) missing information and \\(H=10\\) imputations, the efficiency of MI can be shown to be equal to \\((1+\\frac{\\lambda}{H})^{-1}=95\\%\\). In addition, in today’s computing environments, the work of analysing the completed data sets is quite modest since it involves performing the same task \\(H\\) times. Thus, once a precedure to combine multiple completed data sets is established, the additonal time and effort to handle \\(50\\), \\(20\\), or \\(10\\) imputations if often of little consequence.\nIn the first step of MI, imputations should ideally be created as repeated draws from the posterior predictive distribution of the missing values \\(y_{mis}\\) given the observed values \\(y_{obs}\\), each repetition being an independent drawing of the parameters and missing values. In practice, implicit imputation models can also be used in place of explicit imputation models (Herzog and Rubin (1983)). In the second step, each completed data set is analysed using the same complete data method that would be used in the absence of missingness. Finally, in the last step, standard procedures should be used to combine the compelted data inferences into a single one. The simplest and most popular method for combining the reuslts of \\(H\\) completed data sets is known as Rubin’s rules (Rubin (2004)), which can be explained with a simple example.\nRubin’s rules\rLet \\(\\hat{\\theta}_h\\) and \\(V_h\\), for \\(h=1,\\ldots,H\\), be the completed data estimates and sampling variances for a scalar estimand \\(\\theta\\), calculated from \\(H\\) repeated imputations under a given imputation model. Then, according to Rubin’s rules, the combined estimate is simply the average of the \\(H\\) completed data estimates, that is\n\\[\r\\bar{\\theta}_{H}=\\frac{1}{H}\\sum_{h=1}^{H}\\hat{\\theta}_{h}.\r\\]\nBecause the imputations under MI are conditional draws, under a good imputaton model, they provide valid estimates for a wide range of estimands. In addition, the averaging over \\(H\\) imputed data sets increases the efficiency of estimation over that obtained from a single completed data set. The variability associated with the pooled estimate has two components: the average within-imputation variance \\(\\bar{V}_H\\) and the between-imputation variance \\(B_H\\), defined as\n\\[\r\\bar{V}_{H}=\\frac{1}{H}\\sum_{h=1}^{H}V_{h} \\;\\;\\; \\text{and} \\;\\;\\; B_{H}=\\frac{1}{H-1}\\sum_{h=1}^{H}(\\hat{\\theta}_{h}-\\bar{\\theta}_{H})^2.\r\\]\nThe total variability associated with \\(\\bar{\\theta}_H\\) is the computed as\n\\[\rT_{H}=\\bar{V}_H + \\frac{H+1}{H}B_{H},\r\\]\nwhere \\((1+\\frac{1}{H})\\) is an adjustment factor for finite due to estimating \\(\\theta\\) by \\(\\bar{\\theta}_H\\). Thus, \\(\\hat{\\lambda}_H=(1+\\frac{1}{H})\\frac{B_H}{T_H}\\) is known as the fraction of missing information and is an estimate of the fraction of information about \\(\\theta\\) that is missing due to nonresponse. For large sample sizes and scalar quantities like \\(\\theta\\), the reference distribution for interval estimates and significance tests is a \\(t\\) distribution\n\\[\r(\\theta - \\bar{\\theta}_H)\\frac{1}{\\sqrt{T^2_H}} \\sim t_v,\r\\]\nwhere the degrees of freedom \\(v\\) can be approximated with the quantity \\(v=(H-1)\\left(1+\\frac{1}{H+1}\\frac{\\bar{V}_H}{B_H} \\right)^2\\) (Rubin and Schenker (1987)). In small data sets, an improved version of \\(v\\) can be obtained as \\(v^\\star=(\\frac{1}{v}+\\frac{1}{\\hat{v}_{obs}})^{-1}\\), where\n\\[\r\\hat{v}_{obs}=(1-\\hat{\\lambda}_{H})\\left(\\frac{v_{com}+1}{v_{com}+3}\\right)v_{com},\r\\]\nwith \\(v_{com}\\) being the degrees of freedom for appropriate or exact \\(t\\) inferences about \\(\\theta\\) when there are no missing values (Barnard and Rubin (1999)).\nThe validity of MI rests on how the imputations are created and how that procedure relates to the model used to subsequently analyze the data. Creating MIs often requires special algorithms (Schafer (1997)). In general, they should be drawn from a distribution for the missing data that reflects uncertainty about the parameters of the data model. Recall that with SI methods, it is desirable to impute from the conditional distribution \\(p(y_{mis}\\mid y_{obs},\\hat{\\theta})\\), where \\(\\hat{\\theta}\\) is an estimate derived from the observed data. MI extends this approach by first simulating \\(H\\) independent plausible values for the parameters \\(\\theta_1,\\ldots,\\theta_H\\) and then drawing the missing values \\(y_{mis}^h\\) from \\(p(y_{mis}\\mid y_{obs}, \\theta_h)\\). Treating parameters as random rather than fixed is\ran essential part of MI. For this reason, it is natural (but not essential) to motivate MI from the Bayesian perspective, in which the state of knowledge about parameters is represented through a posterior distribution.\n\rMultiple Imputation by Chained Equations\rMI by Chained Equations, also known as Fully Conditional Specification(FCS), imputes multivariate missing data on a variable-by-variable basis, and therefore requires the specification of an imputation model for each incomplete variable to create imputations per variable in an iterative fashion (Van Buuren (2007)). In contrast to Joint MI, MICE specifies the multivariate distribution for the outcome and missingness pattern \\(p(y,r\\mid \\theta, \\phi)\\), indexed by the parameter vectors of the outcome (\\(\\theta\\)) and missingness models (\\(\\phi\\)), through a set of conditional densities \\(p(y_j \\mid y_{-j},r,\\theta_j, \\phi_j)\\), which is used to impute \\(y_j\\) given the other variables. Starting from a random draw from the marginal distribution of \\(y_1\\), imputation is then carried out by iterating over the conditionally specified imputation models for each \\(y_j=(y_2,\\ldots,y_J)\\) separately given the set of all the other variables \\(y_{-j}\\).\nTha main idea of MICE is to directly draw the missing data from the predictive distribution of conditional densities, therefore avoiding the need to specify a joint multivariate model for all the data. Different approaches can be used to implement MICE. For example, a possible strategy is the following:\nStart at iteration \\(t=0\\) by drawing randomly from the the distribution of the missing data given the observed data and all other variables, according to some probability model for each variable \\(y_j\\), that is\r\r\\[\r\\hat{y}^{mis}_{j,0} \\sim p(y^{mis}_{j} \\mid y^{obs}_{j}, y_{-j}, r)\r\\]\nAt each iteration \\(t=1,\\ldots,T\\) and for each variable \\(j=\\ldots,J\\), set\r\r\\[\r\\hat{y}^{mis}_{-j,t}=\\left(\\hat{y}_{1,t},\\ldots, \\hat{y}_{j-1,t}, \\hat{y}_{j+1,t}, \\ldots, \\hat{y}_{J,t} \\right)\r\\]\nas the currently completed data except \\(y_j\\)\nDraw \\(h=1,\\ldots,H\\) imputations for each variable \\(y_j\\) from the predictive distribution of the missing data given the observed data and the currently imputed data at \\(t\\), that is\r\r\\[\r\\hat{y}^{mis}_{j,t} \\sim p(y^{mis}_{j} \\mid y^{obs}_{j}, \\hat{y}_{-j,t}, r)\r\\]\nand repeat the steps 2 and 3 until convergence. It is important to stress out that MICE is essentially a Markov Chain Monte Carlo(MCMC) algorithm (Brooks et al. (2011)), where the state space is the collection of all imputed values. More specifically, when the conditional distributions of all variables are compatible with a joint multivariate distribution, the algorithm corresponds to a Gibbs sampler, a Bayesian simulation method that samples from the conditional distributions in order to obtain samples from the joint multivariate distribution of all variables via some conditional factorisation of the latter (Casella and George (1992), Gilks, Richardson, and Spiegelhalter (1996)). A potential issue of MICE is that, since the conditional distributions are specified freely by the user, these may not be compatible with a joint distribution and therefore it is not clear from which distribution the algorithm is sampling from. However, a general advatage of MICE is that it gives freedom to the user for the specification of the univariate models for the variables, which can be tailored to handle different types of variabes (e.g. continuous and categorical) and different statistical issues for each variable (e.g. skewness and non-liner associations).\nRegardless of the theoretical implications of MICE, as a MCMC method, the algorithm converges to a stationary distribution when three conditions are satisfied (Roberts (1996),Brooks et al. (2011)):\n\rThe chain is irreducible, i.e. must be able to reach any state from any state in the state space\n\rThe chain is aperiodic, i.e. must be able to return to each state after some unknown number of steps or transitions\n\rThe chain is recurrent, i.e. there is probability of one of eventually returning to each state after some number of steps\n\r\rTypically periodicity and non-recurrence can be a problem in MICE when the imputation models are not compatible, possibly leading to different inferences based on the stopping point of the chain or to non-stationary behaviours of the chain.\n\rReferences\rBarnard, John, and Donald B Rubin. 1999. “Miscellanea. Small-Sample Degrees of Freedom with Multiple Imputation.” Biometrika 86 (4): 948–55.\n\rBrooks, Steve, Andrew Gelman, Galin Jones, and Xiao-Li Meng. 2011. Handbook of Markov Chain Monte Carlo. CRC press.\n\rCarpenter, James, and Michael Kenward. 2012. Multiple Imputation and Its Application. John Wiley \u0026amp; Sons.\n\rCasella, George, and Edward I George. 1992. “Explaining the Gibbs Sampler.” The American Statistician 46 (3): 167–74.\n\rGilks, Walter R, Sylvia Richardson, and David J Spiegelhalter. 1996. “Introducing Markov Chain Monte Carlo.” Markov Chain Monte Carlo in Practice 1: 19.\n\rHerzog, Thomas N, and Donald B Rubin. 1983. “Using Multiple Imputations to Handle Nonresponse in Sample Surveys.” Incomplete Data in Sample Surveys 2: 209–45.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rMolenberghs, Geert, Garrett Fitzmaurice, Michael G Kenward, Anastasios Tsiatis, and Geert Verbeke. 2014. Handbook of Missing Data Methodology. Chapman; Hall/CRC.\n\rRoberts, Gareth O. 1996. “Markov Chain Concepts Related to Sampling Algorithms.” Markov Chain Monte Carlo in Practice 57.\n\rRubin, Donald B. 1978. “Multiple Imputations in Sample Surveys a Phenomenological Bayesian Approach to Nonresponse.” Proceedings of the Survey Research Methods Section of the American Statistical Association 1: 20–34.\n\r———. 1996. “Multiple Imputation After 18 Years.” Journal of the American Statistical Association 91 (434): 473–89.\n\r———. 2004. Multiple Imputation for Nonresponse in Surveys. John Wiley \u0026amp; Sons.\n\rRubin, Donald B, and Nathaniel Schenker. 1987. “Interval Estimation from Multiply Imputed Data: A Case Study Using Census Agriculture Industry Codes.” Journal of Official Statistics 3 (4): 375.\n\rSchafer, Joseph L. 1997. Analysis of Incomplete Multivariate Data. Chapman; Hall/CRC.\n\r———. 1999. “Multiple Imputation: A Primer.” Statistical Methods in Medical Research 8 (1): 3–15.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\rVan Buuren, Stef. 2007. “Multiple Imputation of Discrete and Continuous Data by Fully Conditional Specification.” Statistical Methods in Medical Research 16 (3): 219–42.\n\r———. 2018. Flexible Imputation of Missing Data. Chapman; Hall/CRC.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d05d59bacb71b6211d6709c985f21444","permalink":"/missmethods/multiple-imputation-by-chained-equations/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/multiple-imputation-by-chained-equations/","section":"missmethods","summary":"Multiple Imputation(MI) refers to the procedure of replacing each missing value by a set of \\(H\\geq 2\\) imputed values. These are ordered in the sense that \\(H\\) completed data sets can be created from the sets of imputations, where the first imputed value replaces the missing value in the first completed data set, the second imputed value in the second completed data set, and so on. Next, standard complete data methods are used to analyse each completed data set.","tags":["Joint Multiple Imputation","Multiple Imputation by Chained Equations","Multiple Imputation"],"title":"Multiple Imputation by Chained Equations","type":"missmethods"},{"authors":null,"categories":null,"content":"Introduction Economic evaluation alongside Randomised Clinical Trials (RCTs) is an important and increasingly popular component of the process of technology appraisal. The typical analysis of individual level data involves the comparison of two interventions for which suitable measures of clinical benefits and costs are observed on each patient enrolled in the trial at different time points throughout the follow up. Individual level data from RCTs are almost invariably affected by missingness. The recorded outcome process is often incomplete due to individuals who drop out or are observed intermittently throughout the study, causing some observations to be missing. In most applications, the economic evaluation is performed on the cross-sectional variables, computed using only the data from the individuals who are observed at each time point in the trial (completers), with at most limited sensitivity analysis to missingness assumptions. This, however, is an extremely inefficient approach as the information from the responses of all partially observed subjects is completely lost and it is also likely biased unless the completers are a random sample of the subjects on each arm. The problem of missingness is often embedded within a more complex framework, which makes the modelling task in economic evaluations particularly challenging. Specifically, the effectiveness and cost data typically present a series of complexities that need to be simultaneously addressed to avoid biased results.\nUsing a recent randomised trial as our motivating example, we present a Bayesian parametric model for conducting inference on a bivariate health economic longitudinal response. We specify our model to account for the different types of complexities affecting the data while accommodating a sensitivity analysis to explore the impact of alternative missingness assumptions on the inferences and on the decision-making process for health technology assessment.\nStandard approach To perform the economic evaluation, aggregated measures for both utilities and costs are typically derived from the longitudinal responses recorded in the study. QALYs ($e_{it}$) and total costs ($c_{it}$) measures are computed as:\n\\[ e_{it}=\\sum_{j=1}^{J}(u_{ijt}+u_{ij-1t})\\frac{\\delta_{j}}{2} ;;; \\text{and} ;;;\\ c_{it}=\\sum_{j=1}^{J}c_{ijt}, \\]\nwhere $t$ denotes the treatment group, while $\\delta_{j}=\\frac{\\text{Time}_{j}-\\text{Time}_{j-1}}{\\text{Unit of time}}$ is the percentage of the time unit (typically one year) which is covered between time $j-1$ and $j$ in the trial. The economic evaluation is then performed by applying some parametric model $p(e_{it},c_{it}\\mid \\boldsymbol \\theta)$, indexed by a set of parameters $\\boldsymbol \\theta$, to these cross-sectional quantities, typically using linear regression methods to account for the imbalance in some baseline variables between treatments. We note that the term cross-sectional here refers to analyses based on variables derived from the combination of repeated measurements collected at different times over the trial duration and not on data collected at a single point in time. Finally, QALYs and total costs population mean values are derived from the model:\n\\[ \\mu_{et} = \\text{E}\\left(e_{it} \\mid \\boldsymbol \\theta\\right) ;;; \\text{and} ;;; \\mu_{ct} = \\text{E}\\left(c_{it} \\mid \\boldsymbol \\theta \\right). \\]\nThe differences in $\\mu_{et}$ and $\\mu_{ct}$ between the treatment groups represent the quantities of interest in the economic evaluation and are used in assessing the relative cost-effectiveness of the interventions. This modelling approach has the limitation that $\\mu_{et}$ and $\\mu_{ct}$ are derived based only on the completers in the study and does not assess the robustness of the results to a range of plausible missingness assumptions. The model also fails to account for the different complexities that affect the utility and cost data in the trial: from the correlation between variables to the skewness and the presence of structural values (zero for the costs and one for the utilities) in both outcomes.\nLongitudinal model to deal with missingness We propose an alternative approach to deal with a missing bivariate outcome in economic evaluations, while simultaneously allowing for the different complexities that typically affect utility and cost data. Our approach includes a longitudinal model that improves the current practice by taking into account the information from all observed data as well as the time dependence between the responses.\nLet $\\boldsymbol u_i=(u_{i0},\\ldots,u_{iJ})$ and $\\boldsymbol c_i=(c_{i0},\\ldots,c_{iJ})$ denote the vectors of utilities and costs that were supposed to be observed for subject $i$ at time $j$ in the study, with $j \\in {0,1,J}$. We denote with $\\boldsymbol y_{ij}=(u_{ij},c_{ij})$ the bivariate outcome for subject $i$ formed by the utility and cost pair at time $j$. We group the individuals according to the missingness patterns and denote with $\\boldsymbol r_{ij}=(r^u_{ij},r^c_{ij})$ a pair of indicator variables that take value $1$ if the corresponding outcome for subject $i$ at time $j$ is observed and $0$ otherwise. We denote with $\\boldsymbol r_i = (\\boldsymbol r_{i0}, \\ldots, \\boldsymbol r_{iJ})$ the missingness pattern to which subject $i$ belongs, where each pattern is associated with different values for $\\boldsymbol r_{ij}$.\nWe then define our modelling strategy and factor the joint distribution for the response and missingness as:\n\\[ p(\\boldsymbol y, \\boldsymbol r \\mid \\boldsymbol \\omega) = p(\\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r \\mid \\boldsymbol \\omega)p(\\boldsymbol y^{\\boldsymbol r}_{mis} \\mid \\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r, \\boldsymbol \\omega) \\]\nwhere $\\boldsymbol y^{\\boldsymbol r}_{obs}$ and $\\boldsymbol y^{\\boldsymbol r}_{mis}$ indicate the observed and missing responses within pattern $\\boldsymbol r$, respectively. This is the extrapolation factorisation and factors the joint into two components, of which the extrapolation distribution $p(\\boldsymbol y^{\\boldsymbol r}_{mis} \\mid \\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r, \\boldsymbol \\omega)$ remains unidentified by the data in the absence of unverifiable assumptions about the full data.\nTo specify the observed data distribution $p(\\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r \\mid \\boldsymbol \\omega)$ we use a working model $p^{\\star}$ for the joint distribution of the response and missingness. Essentially, the idea is to use the working model $p^{\\star}(\\boldsymbol y, \\boldsymbol{r} \\mid \\boldsymbol \\omega)$ to draw inferences about the distribution of the observed data $p(\\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r \\mid \\boldsymbol \\omega)$ by integrating out the missing responses:\n\\[ p(\\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r \\mid \\boldsymbol \\omega) = \\int p^{\\star}(\\boldsymbol y, \\boldsymbol{r} \\mid \\boldsymbol \\omega)d \\boldsymbol y^{\\boldsymbol r}_{mis}. \\]\nThis approach avoids direct specification of the joint distribution of the observed and missing data $p(\\boldsymbol y, \\boldsymbol r\\mid \\boldsymbol \\omega)$, which has the undesirable consequence of identifying the extrapolation distribution with assumptions that are difficult to check. Indeed, since we use $p^{\\star}(\\boldsymbol y, \\boldsymbol r \\mid \\boldsymbol \\omega)$ only to obtain a model for $p(\\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r \\mid \\boldsymbol \\omega)$ and not as a basis for inference, the extrapolation distribution is left unidentified. Any inference depending on the observed data distribution may be obtained using the working model as the true model, with the advantage that it is often easier to specify a model for the the full data $p(\\boldsymbol y,\\boldsymbol r)$ compared with a model for the observed data $p(\\boldsymbol y^{\\boldsymbol r}_{obs},\\boldsymbol r)$.\nWe specify $p^{\\star}$ using a pattern mixture approach, factoring the joint $p(\\boldsymbol y,\\boldsymbol r \\mid \\boldsymbol \\omega)$ as the product between the marginal distribution of the missingness patterns $p(\\boldsymbol r\\mid \\boldsymbol \\psi)$ and the distribution of the response conditional on the patterns $p(\\boldsymbol y\\mid \\boldsymbol r,\\boldsymbol \\theta)$, respectively indexed by the distinct parameter vectors $\\boldsymbol \\psi$ and $\\boldsymbol \\theta$. If missingness is monotone it is possible to summarise the patterns by dropout time and directly model the dropout process. Unfortunately, as it often occurs in trial-based health economic data, missingness in the case study is mostly nonmonotone and the sparsity of the data in most patterns makes it infeasible to fit the response model within each pattern, with the exception of the completers ($\\boldsymbol r = \\boldsymbol 1$). Thus, we decided to collapse together all the non-completers patterns ($\\boldsymbol r \\neq \\boldsymbol 1$) and fit the model separately to this aggregated pattern and to the completers. The joint distribution has three components. The first is given by the model for the patterns and the model for the completers ($\\boldsymbol r = \\boldsymbol 1$), where no missingness occurs. The second component is a model for the observed data in the collapsed patterns $\\boldsymbol r \\neq \\boldsymbol 1$ that, together with the first component, form the observed data distribution. The last component is the extrapolation distribution.\nBecause the targeted quantities of interest can be derived based on the marginal utility and cost means at each time $j$, in our analysis we do not require the full identification of $p(\\boldsymbol y^{\\boldsymbol r}_{mis} \\mid \\boldsymbol y^{\\boldsymbol r}_{obs}, \\boldsymbol r,\\boldsymbol \\xi)$. Instead, we only partially identify the extrapolation distribution using partial identifying restrictions. Specifically, we only require the identification of the marginal means for the missing responses in each pattern. We identify the marginal mean of $\\boldsymbol y^{\\boldsymbol r}_{mis}$ using the observed values, averaged across $\\boldsymbol r^\\prime \\neq \\boldsymbol 1$, and some sensitivity parameters $\\boldsymbol \\Delta = (\\Delta_u,\\Delta_c)$. Therefore, we compute the marginal means by averaging only across the observed components in pattern ${\\boldsymbol r}^\\prime$ and ignore the components that are missing.\nWe start by setting a benchmark assumption with $\\boldsymbol \\Delta = \\boldsymbol 0$, and then explore the sensitivity of the results to alternative scenarios by using different prior distributions on $\\boldsymbol \\Delta$, calibrated on the observed data. This provides a convenient benchmark scenario from which departures can be explored using alternative informative priors on $\\boldsymbol \\Delta$. Once the working model has been fitted to the observed data and the extrapolation distribution has been identified, the overall marginal mean for the response model can be computed by marginalising over $\\boldsymbol r$, i.e. $\\text{E}\\left[\\boldsymbol Y\\right] = \\sum_{\\boldsymbol r} p(\\boldsymbol r)\\text{E}\\left[\\boldsymbol Y \\mid \\boldsymbol r \\right]$.\nModelling framework The distribution of the observed responses $\\boldsymbol y_{ijt}=(u_{ijv},c_{ijt})$ is specified in terms of a model for the utility and cost variables at time $j=0,1,2$, which are jointly modelled without using a multilevel approach and separately by treatment group. In particular, the joint distribution for $\\boldsymbol y_{ijt}$ is specified as a series of conditional distributions that capture the dependence between utilities and costs as well as the time dependence.\nFollowing the recommendations from the published literature, we account for the skewness using Beta and Log-Normal distributions for the utilities and costs, respectively. Since the Beta distribution does not allow for negative values, we scaled the utilities on $[0,1]$ through the transformation $u^{\\star}_{ij}=\\frac{u_{ij}-\\text{min}(\\boldsymbol u_{j})}{\\text{max}(\\boldsymbol u_{j})-\\text{min}(\\boldsymbol u_{j})}$, and fit the model to these transformed variables. To account for the structural values $u_{ij} = 1$ and $c_{ij} = 0$ we use a hurdle approach by including in the model the indicator variables $d^u_{ij}:=\\mathbb{I}(u_{ij}=1)$ and $d^c_{ij}:=\\mathbb{I}(c_{ij}=0)$, which take value $1$ if subject $i$ is associated with a structural value at time $j$ and 0 otherwise. The probabilities of observing these values, as well as the mean of each variable, are then modelled conditionally on other variables via linear regressions defined on the logit or log scale. Specifically, at time $j=1,2$, the probability of observing a zero and the mean costs are modelled conditionally on the utilities and costs at the previous times, while the probability of observing a one and the mean utilities are modelled conditionally on the current costs (also at $j=0$) and the utilities at the previous times (only at $j=1,2$). The model is summarised by the following Figure.\n\rLongitudinal model for missingness.\r\r\rWe use partial identifying restrictions to link the observed data distribution $p(\\boldsymbol y_{obs},\\boldsymbol r)$ to the extrapolation distribution $p(\\boldsymbol y_{mis} \\mid \\boldsymbol y_{obs},\\boldsymbol r)$ and consider interpretable deviations from a benchmark scenario to assess how inferences are driven by our assumptions. Specifically, we identify the marginal mean of the missing responses in each pattern $\\boldsymbol y^{\\boldsymbol r}_{mis}$ by averaging across the corresponding components that are observed and add the sensitivity parameters $\\boldsymbol \\Delta_j$.\nWe define $\\boldsymbol \\Delta_j=(\\Delta_{c_{j}},\\Delta_{u_{j}})$ to be time-specific location shifts at the marginal mean in each pattern and set $\\boldsymbol \\Delta_j = \\boldsymbol 0$ as the benchmark scenario. We then explore departures from this benchmark using alternative priors on $\\boldsymbol \\Delta_j$, which are calibrated using the observed standard deviations for costs and utilities at each time $j$ to define the amplitude of the departures from $\\boldsymbol \\Delta_j=\\boldsymbol 0$.\nConlcusions Missingness represents a threat to economic evaluations as, when dealing with partially-observed data, any analysis makes assumptions about the missing values that cannot be verified from the data at hand. Trial-based analyses are typically conducted on cross-sectional quantities, e.g. QALYs and total costs, which are derived based only on the observed data from the completers in the study. This is an inefficient approach which may discard a substantial proportion of the sample, especially when there is a relatively large number of time points, where individuals are more likely to have some missing value or to drop out from the study. In addition, when there are systematic differences between the responses of the completers and non-completers, which is typically the case when dealing with self-reported outcomes in trial-based analyses, the results based only on the former may be biased and mislead the final assessment. A further concern is that routine analyses typically rely on standard models that ignore or at best fail to properly account for potentially important features in the data such as correlation, skewness, and the presence of structural values.\nOur framework represents a considerable step forward for the handling of missingness in economic evaluations compared with the current practice, which typically relies on methods that assume an ignorable MAR and rarely conducts sensitivity analysis to MNAR departures. Nevertheless, further improvements are certainly possible. For example, a potential area for future work is to increase the flexibility of our approach through a semi-parametric or nonparametric specification for the observed data distribution, which would allow a weakening of the model assumptions and likely further improve the fit of the model to the observed data and address sparse patterns in an automated way. As for the extrapolation distribution, alternative identifying restrictions that introduce the sensitivity parameters via the conditional mean (rather than the marginal mean) could be considered, and their impact on the conclusions assessed in a sensitivity analysis.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"64ed545a4c3df615031db54dc419fefc","permalink":"/project/missing-data/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/missing-data/","section":"project","summary":"With [Michael Daniels](http://users.stat.ufl.edu/~daniels/) and [Gianluca Baio](https://www.ucl.ac.uk/statistics/people/gianlucabaio)","tags":["Missing Data"],"title":"Nonignorable Missingness Models in HTA","type":"project"},{"authors":null,"categories":["rubric"],"content":"\rIt is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\). Under the assumption of the ignorability of the missingness mechanism, the model can be identified using only the information from the observed data. When ignorability is not believed to be a suitable assumption, one can use a more general class of models that allows missing data indicators to depend on missing responses themselves. These models allow to parameterise the conditional dependence between \\(R\\) and \\(Y_{mis}\\), given \\(Y_{obs}\\). Without the benefit of untestable assumptions, this association structure cannot be identified from the observed data and therefore inference depends on some combination of two elements:\nUnverifiable parametric assumptions\n\rInformative prior distributions (under a Bayesian approach)\n\r\rWe show some simple examples about how these nonignorable models can be constructed, identified and applied. In this section, we specifically focus on the class of nonignorable models known as Pattern Mixture Models(PMM).\nPattern Mixture Models\rThe pattern mixture model approach factors the full data distribution as\n\\[\rf(y,r \\mid \\omega) = f(y \\mid r, \\phi) f(r \\mid y,\\chi),\r\\]\nwhere it is typically assumed that the set of full data parameters \\(\\omega\\) can be decomposed as separate parameters for each factor \\((\\phi,\\chi)\\). Thus, under the PMM approach, the response model \\(f(y \\mid \\theta)\\) can be retrieved as a mixture of the pattern specific distributions\n\\[\rf(y \\mid \\theta) = \\sum_{r}f(y \\mid r, \\phi)f(r \\mid \\chi),\r\\]\nwith weights given by the corresponding probabilities of the different patterns. The missingness mechanism \\(f(r \\mid y, \\psi)\\) can also be obtained using Bayes’ rule\n\\[\rf(y \\mid r, \\psi) = \\frac{f(y \\mid r, \\phi)f(r\\mid \\chi)}{f(y \\mid \\theta)}.\r\\]\nThe construction of PMMs requires the specification of the full data distribution conditional on different missingness patterns, which may be cumbersome when the number of patterns is large, but with the advantage of making explicit the parameters that cannot be identified by the observed data. In particular, PMMs are well suited to show that the distribution of the response within each pattern can be decomposed as\n\\[\rf(y_{obs},y_{mis} \\mid r, \\phi)= f(y_{mis} \\mid y_{obs},r,\\phi_{E})f(y_{obs}\\mid r,\\phi_{O}),\r\\]\nwhere \\(\\phi_E = \\lambda_1(\\phi)\\) and \\(\\phi_O=\\lambda_2(\\phi)\\) are functions of the mixture component parameter \\(\\phi\\). The former subset of parameters indexes the so called extrapolation distribution and cannot be identified from the data, i.e. the distribution of the missing values given the observed values, while the latter indexes the observed data distribution and is typically identifiable from the data. Assuming there exists a partition such that \\(\\phi_E=(\\phi_{EI},\\phi_{ENI})\\) and the observed data distribution is a function of \\(\\phi_{EI}\\) but not of \\(\\phi_{ENI}\\), then \\(\\phi_{ENI}\\) is a senstivity parameter in that it can only be identified using information from sources other than the observed data and thus makes a suitable basis to formulate sensitivity analysis using informative priors.\nExample of PMM for bivariate normal data\rConsider a sample of \\(i=1,\\ldots,n\\) units from a bivariate normal distribution \\(Y=(Y_1,Y_2)\\). Assume also that \\(Y_1\\) is always observed while \\(Y_2\\) may be missing, and let \\(R=R_2\\) be the missingness indicator for the partially-observed response \\(Y_2\\). A PMM factors the full data distribution as\n\\[\rf(y_1,y_2,r \\mid \\omega) = f(y_1, y_2 \\mid r, \\phi)f(r \\mid ,\\chi),\r\\]\nwhere, for example, we may have \\(Y \\mid R=1 \\sim N(\\mu^1,\\Sigma^1)\\), \\(Y \\mid R=0 \\sim N(\\mu^0,\\Sigma^0)\\) and \\(R \\sim Bern(\\chi)\\). We define \\(\\mu^r=(\\mu^r_1)\\), while \\(\\Sigma^r\\) has elements \\(\\sigma^r=(\\sigma^r_{11},\\sigma^r_{12},\\sigma^r_{22})\\). Similarly, we can define the parameters \\(\\beta^r_0\\), \\(\\beta^r_1\\) and \\(\\sigma^r_{2\\mid 1}\\) as the intercept, slope and residual variance of the regression of \\(Y_2\\) on \\(Y_1\\) for each pattern \\(r\\). Under this reparameterisation, the full data model parameters are\n\\[\r\\phi=\\{\\mu^r_1,\\sigma^r_{11},\\beta^r_0,\\beta^1_1,\\sigma^r_{2\\mid 1}\\}.\r\\]\nThe extrapolation and observed data distributions, with associated parameters, are then\n\\[\rf(y_{mis}\\mid y_{obs},\\phi_{E}) \\rightarrow \\phi_{E}=(\\beta^0_0, \\beta^0_1,\\sigma^0_{2\\mid1})\r\\]\nand\n\\[\rf(y_{obs}\\mid \\phi_{O}) \\rightarrow \\phi_{O}=(\\mu^1,\\beta^1,\\sigma^1_{11},\\mu^0_0,\\sigma^1_{11}).\r\\]\nIt can be shown that, in this specific example, the observed data distribution does not depend on the parameters indexing the extrapolation distribtuon \\(\\phi_{ENI}=(\\beta^0_0,\\beta^0_1,\\sigma^0_{2\\mid 1})\\). It is possible to set \\(\\beta^0=\\beta=1\\) and \\(\\sigma^0_{2\\mid1}=\\sigma^1_{2\\mid1}\\) to yield a Missing At Random(MAR) assumption. Hence, a function that maps identified parameters and sensitivity parameters \\(\\Delta\\) to the space of unidentified parameters can be used to quantify departures from MAR. For example, assume we impose\n\\[\r\\beta^0_0=\\beta^1_0+\\Delta,\r\\]\nthen assigning a point mass prior at \\(\\Delta=0\\) implies MAR, while fixing \\(\\Delta \\neq 0\\) or using any type of inofrmative prior on this parameter implies a Missing Not At Random(MNAR) assumption.\n\r\rConlcusions\rTo summarise, PMMs have the advantage of being able to find full data parameters indexing the distribution of the missing data that are not identified from the observed data, making inference more transparent. A potential downside is the practical implementation of these models which becomes more difficult as the number of patterns and unidentified parameters grows.\n\rReferences\rDaniels, Michael J, and Joseph W Hogan. 2008. Missing Data in Longitudinal Studies: Strategies for Bayesian Modeling and Sensitivity Analysis. Chapman; Hall/CRC.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"ade887abdca5fce869b560f1807f7591","permalink":"/missmethods/pattern-mixture-models/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/pattern-mixture-models/","section":"missmethods","summary":"It is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\).","tags":["Pattern Mixture Models","Full Data Models under MNAR","Likelihood Based Methods Nonignorable"],"title":"Pattern Mixture Models","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rIt is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\). Under the assumption of the ignorability of the missingness mechanism, the model can be identified using only the information from the observed data. When ignorability is not believed to be a suitable assumption, one can use a more general class of models that allows missing data indicators to depend on missing responses themselves. These models allow to parameterise the conditional dependence between \\(R\\) and \\(Y_{mis}\\), given \\(Y_{obs}\\). Without the benefit of untestable assumptions, this association structure cannot be identified from the observed data and therefore inference depends on some combination of two elements:\nUnverifiable parametric assumptions\n\rInformative prior distributions (under a Bayesian approach)\n\r\rWe show some simple examples about how these nonignorable models can be constructed, identified and applied. In this section, we specifically focus on the class of nonignorable models known as Selection Models(SM).\nSelection Models\rThe selection model approach factors the full data distribution as\n\\[\rf(y,r \\mid \\omega) = f(y \\mid \\theta) f(r \\mid y,\\psi),\r\\]\nwhere it is typically assumed that the set of full data parameters \\(\\omega\\) can be decomposed as separate parameters for each factor \\((\\theta,\\psi)\\). Thus, under the SM approach, the response model \\(f(y \\mid \\theta)\\) and the missing data mechanism \\(f(r \\mid y, \\psi)\\) must be specified by the analyst. SMs can be attractive for several reasons, including\n\rThe possibility to directly specify the model of interest \\(f(y \\mid \\theta)\\)\n\rThe SM factorisation appeals to Rubin’s missing data taxonomy, enabling easy characterisation of the missing data mechanism\n\rWhen the missingness pattern is monotone, the missigness mechanism can be formulated as a hazard function, where the hazard of dropout at some time point \\(j\\) can depend on parts of the full data vector \\(Y\\)\n\r\rExample of SM for bivariate normal data\rConsider a sample of \\(i=1,\\ldots,n\\) units from a bivariate normal distribution \\(Y=(Y_1,Y_2)\\). Assume also that \\(Y_1\\) is always observed while \\(Y_2\\) may be missing, and let \\(R=R_2\\) be the missingness indicator for the partially-observed response \\(Y_2\\). A SM factors the full data distribution as\n\\[\rf(y_1,y_2,r \\mid \\omega) = f(y_1 \\mid \\theta)f(r \\mid y_1,y_2,\\psi),\r\\]\nwhere we assume \\(\\omega=(\\theta,\\psi)\\). Suppose we specify \\(f(y_1,y_2 \\mid \\theta)\\) as a bivariate normal density with mean \\(\\mu\\) and \\(2\\times2\\) covariance matrix \\(\\Sigma\\). The distribution of \\(r\\) is assumed to be distributed as a Bernoulli variable with probability \\(\\pi_i\\), such that\n\\[\rg(\\pi_i) = \\psi_0 + \\psi_1y_{i1} + \\psi_2y_{i2},\r\\]\nwhere \\(g()\\) denotes a given link function which relates the expected value of the response to the linear predictors in the model. When this is taken as the inverse normal cumulative distribution function \\(\\Phi^{-1}()\\) the model corresponds to the Heckman probit selection model (Heckman (1976)). In general, setting \\(\\psi_2=0\\) leads to a Missing At Random(MAR) assumption; if, in addition, we have distinctness of the parameters \\(f(\\mu,\\Sigma,\\psi)=f(\\mu,\\Sigma)f(\\psi)\\), we have ignorability. We note that, even though the parameter \\(\\psi_2\\) characterises the association between \\(R\\) and \\(Y_2\\), the parametric assumptions made in this example will identify \\(\\psi_2\\) even in the absence of informative priors, that is the observed data likelihood is a function of \\(\\psi_2\\). Moreover, the parameter indexes the joint distribution of observables \\(Y_{obs}\\) and \\(R\\) and in general can be identified from the observed data. This property of parametric SMs make them ill-suited to assessing sensitivity to assumptions about the missingness mechanism.\nThe model can also be generalised to longitudinal data assuming a multivariate normal distribution for \\(Y=(Y_1,\\ldots,Y_J)\\) and replacing \\(\\pi_i\\) with a discrete time hazard function for dropout\n\\[\rh\\left(t_j \\mid \\bar{Y}_{j}\\right) = \\text{Prob}\\left(R_j = 0 \\mid R_{j-1} = 1, Y_{1},\\ldots,Y_{j} \\right).\r\\]\nUsing the logit function to model the discrete time hazard in terms of observed response history \\(\\bar{Y}_{j-1}\\) and the current but possibly unobserved \\(Y_j\\) corresponds to the model of Diggle and Kenward (1994).\n\r\rConlcusions\rTo summarise, SMs allows to generalise ignorable models to handle nonignorable missingness by letting \\(f(r \\mid y_{obs},y_{mis})\\) to depend on \\(y_{mis}\\) and their structure directly appeals to Rubin’s taxonomy. However, identification of the missing data distribution is accomplished through parametric assumptions about the full data response model \\(f(y \\mid \\theta)\\) and the explicit form of the missingness mechanism. This makes it difficult to disentagle the type of information that is used to identify the model, i.e. parametric modelling assumptions or information from the observed data, therefore complicating the task of assessing the robustness of the results to a range of transparent and plausible assumptions.\n\rReferences\rDaniels, Michael J, and Joseph W Hogan. 2008. Missing Data in Longitudinal Studies: Strategies for Bayesian Modeling and Sensitivity Analysis. Chapman; Hall/CRC.\n\rDiggle, Peter, and Michael G Kenward. 1994. “Informative Drop-Out in Longitudinal Data Analysis.” Journal of the Royal Statistical Society: Series C (Applied Statistics) 43 (1): 49–73.\n\rHeckman, James J. 1976. “The Common Structure of Statistical Models of Truncation, Sample Selection and Limited Dependent Variables and a Simple Estimator for Such Models.” In Annals of Economic and Social Measurement, Volume 5, Number 4, 475–92. NBER.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"5e5577911e5b60bb5b8eee1c351979c9","permalink":"/missmethods/selection-models/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/selection-models/","section":"missmethods","summary":"It is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\).","tags":["Selection Models","Full Data Models under MNAR","Likelihood Based Methods Nonignorable"],"title":"Selection Models","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\rIt is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\). Under the assumption of the ignorability of the missingness mechanism, the model can be identified using only the information from the observed data. When ignorability is not believed to be a suitable assumption, one can use a more general class of models that allows missing data indicators to depend on missing responses themselves. These models allow to parameterise the conditional dependence between \\(R\\) and \\(Y_{mis}\\), given \\(Y_{obs}\\). Without the benefit of untestable assumptions, this association structure cannot be identified from the observed data and therefore inference depends on some combination of two elements:\nUnverifiable parametric assumptions\n\rInformative prior distributions (under a Bayesian approach)\n\r\rWe show some simple examples about how these nonignorable models can be constructed, identified and applied. In this section, we specifically focus on the class of nonignorable models known as Shared Parameter Models(SPM).\nShared Parameter Models\rThe shared parameter model approach consists in an explicit multilevel specification, where random effects \\(b\\) are modelled jointly with \\(Y\\) and \\(R\\) (Wu and Carroll (1988)). The general form of the full data modelling using a SPM approach is\n\\[\rf(y,r \\mid \\omega) = \\int f(y, r, b \\mid \\omega)db.\r\\]\nNext, specific SPMs are formulated by making assumptions about the joint distribution under the integral sign. Main advantages of this models is that they are quite easy to specify and that, through the use of random effects, high-dimensional or multilevel data modelling is relatively easy to accomplish. The main drawback is that the underlying missingness mechanism is often difficult to understand and may not have even a closed form.\nExample random coefficients selection model\rWu and Carroll (1988) specified a SPM assuming the response follow a linear random effects model\n\\[\rY_i \\mid x_i,b_i \\sim N(x_i\\beta + w_ib_i, \\Sigma_i(\\phi)),\r\\]\nwhere \\(w_i\\) are the random effects covariates with rows \\(w_i=(1,t_{ij})\\), therefore implying that each individual has a random slope and intercept. The random effects \\(b_i=(b_{i1},b_{i2})\\) are assumed to follow a bivariate normal distribution\n\\[\rb_i \\sim N(0,\\Omega),\r\\]\nwhile the hazard of dropout is Bernoulli with\n\\[\rR_{ij} \\mid R_{ij-1}=1,b_i \\sim Bern(\\pi_{ij}),\r\\]\nwhich depends on the random effects via\n\\[\rg(\\pi_{ij}) = \\psi_0 + \\psi_1b_{i1} + \\psi_2b_{i2}.\r\\]\nThe model can be seen as a special case of the general SPM formulation by noticing that the joint distribution under the integral sign can be factored as\n\\[\rf(y,r,b \\mid x, \\omega) = f(r \\mid b,x,\\psi)f(y \\mid b,x,\\beta,\\phi)f(b \\mid \\Omega)\r\\]\nunder the assumption that \\(R\\) is independent of both \\(Y_{obs}\\) and \\(Y_{mis}\\), conditionally on \\(b\\). However, integrating over the random effects, dependence between \\(R\\) and \\(Y_{mis}\\), given \\(Y_{obs}\\), is induced and therefore the model characterises a Missing Not At Random(MNAR) mechanism.\nThe conditional linear model (Wu and Bailey (1989)) can also be seen as a version of the SPM, which is formulated as\n\\[\rf(y,r,b \\mid x) = f(y \\mid r,b,x)f(b \\mid r,x)f(r \\mid x).\r\\]\n\r\rConlcusions\rTo summarise, shared parameter models are very useful for characterizing joint distributions of repeated measures and event times, and can be particularly useful as a method of data reduction when the dimension of \\(Y\\) is high. Nonetheless, their application to the problem of making full data inference from incomplete longitudinal data should be made with caution and with an eye toward justifying the required assumptions. Sensitivity analysis is an open area of research for these models.\n\rReferences\rDaniels, Michael J, and Joseph W Hogan. 2008. Missing Data in Longitudinal Studies: Strategies for Bayesian Modeling and Sensitivity Analysis. Chapman; Hall/CRC.\n\rWu, Margaret C, and Kent R Bailey. 1989. “Estimation and Comparison of Changes in the Presence of Informative Right Censoring: Conditional Linear Model.” Biometrics, 939–55.\n\rWu, Margaret C, and Raymond J Carroll. 1988. “Estimation and Comparison of Changes in the Presence of Informative Right Censoring by Modeling the Censoring Process.” Biometrics, 175–88.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"6c20666e1ae46902829ffa7f1fd8aa86","permalink":"/missmethods/shared-parameter-models/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/shared-parameter-models/","section":"missmethods","summary":"It is possible to summarise the steps involved in drawing inference from incomplete data as (Daniels and Hogan (2008)):\n\rSpecification of a full data model for the response and missingness indicators \\(f(y,r)\\)\n\rSpecification of the prior distribution (within a Bayesian approach)\n\rSampling from the posterior distribution of full data parameters, given the observed data \\(Y_{obs}\\) and the missingness indicators \\(R\\)\n\r\rIdentification of a full data model, particularly the part involving the missing data \\(Y_{mis}\\), requires making unverifiable assumptions about the full data model \\(f(y,r)\\).","tags":["Shared Parameter Models","Full Data Models under MNAR","Likelihood Based Methods Nonignorable"],"title":"Shared Parameter Models","type":"missmethods"},{"authors":null,"categories":["rubric"],"content":"\r\rThe notion of reducing bias due to missingness through reweighting methods has its root in the survey literature and the basic idea is closely related to weighting in randomisation inference for finite population surveys (Little and Rubin (2019)). In particular, in probability sampling, a unit selected from a target population with probability \\(\\pi_i\\) can be thought as “representing” \\(\\pi^{-1}_i\\) units in the population and hence should be given weight \\(\\pi^{-1}_i\\) when estimating population quantities. For example, in a stratified random sample, a selected unit in stratum \\(j\\) represents \\(\\frac{N_j}{n_j}\\) population units, where \\(n_j\\) indicates the units sampled from the \\(N_j\\) population units in stratum \\(j=1,\\ldots,J\\). The population total \\(T\\) can then be estimated by the weighted sum\n\\[\rT = \\sum_{i=1}^{n}y_i\\pi^{-1}_i,\r\\]\nknown as the Horvitz-Thompson estimate (Horvitz and Thompson (1952)), while the stratified mean can be written as\n\\[\r\\bar{y}_{w} = \\frac{1}{n}\\sum_{i=1}^{n}w_iy_i,\r\\]\nwhere \\(w_i=\\frac{n\\pi^{-1}_i}{\\sum_{k=1}^n\\pi^{-1}_k}\\) is the sampling weight attached to the \\(i\\)-th unit scaled tosum up to the sample size \\(n\\). Weighting class estimators extend this approach to handle missing data such that, if the probabilities of response for unit \\(\\phi_i\\) were known, then the probability of selection and response is \\(\\pi_i\\phi_i\\) and we have\n\\[\r\\bar{y}_{w} = \\frac{1}{n_r}\\sum_{i=1}^{n_r}w_iy_i,\r\\]\nwhere the sum is now over responding units and \\(w_i=\\frac{n_r(\\pi_i\\phi_i)^{-1}}{\\sum_{k=1}^{n_r}(\\pi_k\\phi_k)^{-1}}\\). In practice, the response probability \\(\\phi_i\\) is not known and is typically estimated based on the information available for respondents and nonrespondents (Schafer and Graham (2002)).\nWeighting Class Estimator of the Mean\rA simple reweighting approach is to partition the sample into \\(J\\) “weighting classes” according to the variables observed for respondents and nonrespondents. If \\(n_j\\) is the sample size, \\(n_{rj}\\) the number of respondents in class \\(j\\), with \\(n_r=\\sum_{j=1}^Jr_j\\), then a simple estimator of the response probability for units in class \\(j\\) is given by \\(\\frac{n_{rj}}{n_j}\\). Thus, responding units in class \\(j\\) receive weight \\(w_i=\\frac{n_r(\\pi_i\\hat{\\phi}_i)^{-1}}{\\sum_{k=1}^{n_r}(\\pi_k\\hat{\\phi}_k)^{-1}}\\), where \\(\\hat{\\phi}_i=\\frac{n_{rj}}{n_j}\\) for unit \\(i\\) in class \\(j\\). The weighting class estimate of the mean is then\n\\[\r\\bar{y}_{w} = \\frac{1}{n_r}\\sum_{i=1}^{n_r}w_iy_i,\r\\]\nwhich is unbiased under the quasirandomisation assumption (Oh and Scheuren (1983)), which requires respondents in weighting class \\(j\\) to be a random sample of the sampled units, i.e. data are Missing Completely At Random (MCAR) within adjustment class \\(j\\). Weighting class adjustments are simple because the same weights are obtained regardless of the outcome tp which they are applied, but these are inefficient and generally involves an increase in sampling variance for outcomes that are weakly related to the weighting class variable. Assuming random sampling within weighting classes, a constant variance \\(\\sigma^2\\) for an outcome \\(y\\), and ignoring sampling variation in the weights, the increase in sampling variance of a sample mean is\n\\[\r\\text{Var}\\left(\\frac{1}{n_{r}}\\sum_{i=1}^{n_{r}}w_iy_i \\right) = \\frac{\\sigma^2}{n_{r}^2}\\left(\\sum_{i=1}^{n_{r}}w_{i}^{2} \\right) = \\frac{\\sigma^2}{n_{r}}(1+\\text{cv}^2(w_i)),\r\\]\nwhere \\(\\text{cv}(w_i)\\) is the coefficient of variation of the weights (scaled to average one), which is a rough measure of the proportional increase in sampling variance due to weighting (Kish (1992)). When the weighting class variable is predictive of \\(y\\), weighting methods can lead to a reduction in sampling variance. Little and Rubin (2019) summarise the effect of weighting on the bias and sampling variance of an estimated mean, according to whether the associations between the adjustment cells and the outcome \\(y\\) and missing indicator \\(m\\) are high or low.\n\rTable 1: Effect of weighting adjustments on bias and sampling variance of a mean.\r\r\r\r\rLow (y)\r\rHigh (y)\r\r\r\r\r\rLow (m)\r\rbias: /, var: /\r\rbias: /, var: -\r\r\r\rHigh (m)\r\rbias: /, var: +\r\rbias: -, var: -\r\r\r\r\rThus, weighting is only effective when the outcome is associated with the adjustment cell variable because otherwise the sampling variance is increased with no bias reduction.\n\rPropensity Weighting\rIn some settings, weighting class estimates cannot be feasibly derived by all recorded variables X because the number of classes become too large and some may include cells with nonrespondents but no respondents for which the nonresponse weight is infinite. The theory of propensity scores (Rosenbaum and Rubin (1983)) provides a prescription for choosing the coarsest reduction of the variables to a weighting class variable \\(c\\). Suppose the data are Missing At Random (MAR) such that\n\\[\rp(m\\mid X,y,\\phi)=p(m\\mid X,\\phi),\r\\]\nwhere \\(\\phi\\) are unknown parameters and define the nonresponse propensity for unit \\(i\\) as\n\\[\r\\rho(x_i,\\phi)=p(m_i=1 \\mid \\phi),\r\\]\nassuming that this is strictly positive for all values of \\(x_i\\). Then, it can be shown that\n\\[\rp(m\\mid \\rho(X,\\phi),y,\\phi)=p(m\\mid \\rho(X,\\phi),\\phi),\r\\]\nso that respondents are a random subsample within strata defined by the propensity score \\(\\rho(X,\\phi)\\). In practice the parameter \\(\\phi\\) is unknown and must be estimated from sample data, for example via logistic, probit or robit regressions of the missingness indicator \\(m\\) on \\(X\\) based on respondent and nonrespondent data (Liu (2004)). A variant of this procedure is to weight respondents \\(i\\) directly by the inverse of the estimated propensity score \\(\\rho(X,\\hat{\\phi})^{-1}\\) (Cassel, Sarndal, and Wretman (1983)), which allows to remove bias but may cause two problems: 1) estimates may be associated with very high sampling variances due to nonrespondents with low response propensity estimates receiving large nonresponse weights; 2) more reliance on correct model specification of the propensity score regression than response propensity stratification.\n\rReferences\rCassel, Claes M, Carl-Erik Sarndal, and Jan H Wretman. 1983. “Some Uses of Statistical Models in Connection with the Nonresponse Problem.” Incomplete Data in Sample Surveys 3: 143–60.\n\rHorvitz, Daniel G, and Donovan J Thompson. 1952. “A Generalization of Sampling Without Replacement from a Finite Universe.” Journal of the American Statistical Association 47 (260): 663–85.\n\rKish, Leslie. 1992. “Weighting for Unequal Pi.” Journal of Official Statistics 8 (2): 183.\n\rLittle, Roderick JA, and Donald B Rubin. 2019. Statistical Analysis with Missing Data. Vol. 793. John Wiley \u0026amp; Sons.\n\rLiu, Chuanhai. 2004. “Robit Regression: A Simple Robust Alternative to Logistic and Probit Regression.” Applied Bayesian Modeling and Casual Inference from Incomplete-Data Perspectives, 227–38.\n\rOh, H, and F Scheuren. 1983. “Weighting Adjustment for Unit Nonresponse. Chap. 13 in Vol. 2, Part 4 of Incomplete Data in Sample Surveys, Edited by William G. Madow, Harold Nisselson, and Ingram Olkin.” New York: Academic Press.\n\rRosenbaum, Paul R, and Donald B Rubin. 1983. “The Central Role of the Propensity Score in Observational Studies for Causal Effects.” Biometrika 70 (1): 41–55.\n\rSchafer, Joseph L, and John W Graham. 2002. “Missing Data: Our View of the State of the Art.” Psychological Methods 7 (2): 147.\n\r\r\r","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"cd76644e8e97252ab237218522353d37","permalink":"/missmethods/weighting-adjustments/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/missmethods/weighting-adjustments/","section":"missmethods","summary":"The notion of reducing bias due to missingness through reweighting methods has its root in the survey literature and the basic idea is closely related to weighting in randomisation inference for finite population surveys (Little and Rubin (2019)). In particular, in probability sampling, a unit selected from a target population with probability \\(\\pi_i\\) can be thought as “representing” \\(\\pi^{-1}_i\\) units in the population and hence should be given weight \\(\\pi^{-1}_i\\) when estimating population quantities.","tags":["Weighting Methods","Semiparametric Methods","Weighting Adjustments","Inverse Probability Weighting","Augmented Inverse Probability Weighting"],"title":"Weighting Adjustments","type":"missmethods"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"9e79f36b90901f58b3acd71bf9fdeeb8","permalink":"/missingdata/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/missingdata/","section":"","summary":"","tags":null,"title":"Missing Data","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f1d044c0738ab9f19347f15c290a71a1","permalink":"/research/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/research/","section":"","summary":"","tags":null,"title":"Research","type":"widget_page"}]